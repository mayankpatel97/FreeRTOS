
rtos_manual.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c3c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b4  08006de0  08006de0  00016de0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007194  08007194  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08007194  08007194  00017194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800719c  0800719c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800719c  0800719c  0001719c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080071a0  080071a0  000171a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080071a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003f14  200001dc  08007380  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  200040f0  08007380  000240f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000950d  00000000  00000000  0002024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002019  00000000  00000000  0002975c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009e8  00000000  00000000  0002b778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000075c  00000000  00000000  0002c160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000172e2  00000000  00000000  0002c8bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b854  00000000  00000000  00043b9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d0c4  00000000  00000000  0004f3f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003670  00000000  00000000  000dc4b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000dfb28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006dc4 	.word	0x08006dc4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08006dc4 	.word	0x08006dc4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b970 	b.w	8000eb0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	460d      	mov	r5, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	460f      	mov	r7, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4694      	mov	ip, r2
 8000bfc:	d965      	bls.n	8000cca <__udivmoddi4+0xe2>
 8000bfe:	fab2 f382 	clz	r3, r2
 8000c02:	b143      	cbz	r3, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c08:	f1c3 0220 	rsb	r2, r3, #32
 8000c0c:	409f      	lsls	r7, r3
 8000c0e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c12:	4317      	orrs	r7, r2
 8000c14:	409c      	lsls	r4, r3
 8000c16:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c1a:	fa1f f58c 	uxth.w	r5, ip
 8000c1e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c22:	0c22      	lsrs	r2, r4, #16
 8000c24:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c2c:	fb01 f005 	mul.w	r0, r1, r5
 8000c30:	4290      	cmp	r0, r2
 8000c32:	d90a      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c34:	eb1c 0202 	adds.w	r2, ip, r2
 8000c38:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c3c:	f080 811c 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c40:	4290      	cmp	r0, r2
 8000c42:	f240 8119 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c46:	3902      	subs	r1, #2
 8000c48:	4462      	add	r2, ip
 8000c4a:	1a12      	subs	r2, r2, r0
 8000c4c:	b2a4      	uxth	r4, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c5a:	fb00 f505 	mul.w	r5, r0, r5
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x90>
 8000c62:	eb1c 0404 	adds.w	r4, ip, r4
 8000c66:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c6a:	f080 8107 	bcs.w	8000e7c <__udivmoddi4+0x294>
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	f240 8104 	bls.w	8000e7c <__udivmoddi4+0x294>
 8000c74:	4464      	add	r4, ip
 8000c76:	3802      	subs	r0, #2
 8000c78:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7c:	1b64      	subs	r4, r4, r5
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11e      	cbz	r6, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40dc      	lsrs	r4, r3
 8000c84:	2300      	movs	r3, #0
 8000c86:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0xbc>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80ed 	beq.w	8000e72 <__udivmoddi4+0x28a>
 8000c98:	2100      	movs	r1, #0
 8000c9a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca4:	fab3 f183 	clz	r1, r3
 8000ca8:	2900      	cmp	r1, #0
 8000caa:	d149      	bne.n	8000d40 <__udivmoddi4+0x158>
 8000cac:	42ab      	cmp	r3, r5
 8000cae:	d302      	bcc.n	8000cb6 <__udivmoddi4+0xce>
 8000cb0:	4282      	cmp	r2, r0
 8000cb2:	f200 80f8 	bhi.w	8000ea6 <__udivmoddi4+0x2be>
 8000cb6:	1a84      	subs	r4, r0, r2
 8000cb8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	4617      	mov	r7, r2
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	d0e2      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cc8:	e7df      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cca:	b902      	cbnz	r2, 8000cce <__udivmoddi4+0xe6>
 8000ccc:	deff      	udf	#255	; 0xff
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8090 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cd8:	1a8a      	subs	r2, r1, r2
 8000cda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cde:	fa1f fe8c 	uxth.w	lr, ip
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ce8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cec:	0c22      	lsrs	r2, r4, #16
 8000cee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cf2:	fb0e f005 	mul.w	r0, lr, r5
 8000cf6:	4290      	cmp	r0, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfa:	eb1c 0202 	adds.w	r2, ip, r2
 8000cfe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4290      	cmp	r0, r2
 8000d06:	f200 80cb 	bhi.w	8000ea0 <__udivmoddi4+0x2b8>
 8000d0a:	4645      	mov	r5, r8
 8000d0c:	1a12      	subs	r2, r2, r0
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d14:	fb07 2210 	mls	r2, r7, r0, r2
 8000d18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d20:	45a6      	cmp	lr, r4
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x14e>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x14c>
 8000d2e:	45a6      	cmp	lr, r4
 8000d30:	f200 80bb 	bhi.w	8000eaa <__udivmoddi4+0x2c2>
 8000d34:	4610      	mov	r0, r2
 8000d36:	eba4 040e 	sub.w	r4, r4, lr
 8000d3a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d3e:	e79f      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d40:	f1c1 0720 	rsb	r7, r1, #32
 8000d44:	408b      	lsls	r3, r1
 8000d46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d52:	fa20 f307 	lsr.w	r3, r0, r7
 8000d56:	40fd      	lsrs	r5, r7
 8000d58:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d5c:	4323      	orrs	r3, r4
 8000d5e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d62:	fa1f fe8c 	uxth.w	lr, ip
 8000d66:	fb09 5518 	mls	r5, r9, r8, r5
 8000d6a:	0c1c      	lsrs	r4, r3, #16
 8000d6c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d70:	fb08 f50e 	mul.w	r5, r8, lr
 8000d74:	42a5      	cmp	r5, r4
 8000d76:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1c 0404 	adds.w	r4, ip, r4
 8000d84:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d88:	f080 8088 	bcs.w	8000e9c <__udivmoddi4+0x2b4>
 8000d8c:	42a5      	cmp	r5, r4
 8000d8e:	f240 8085 	bls.w	8000e9c <__udivmoddi4+0x2b4>
 8000d92:	f1a8 0802 	sub.w	r8, r8, #2
 8000d96:	4464      	add	r4, ip
 8000d98:	1b64      	subs	r4, r4, r5
 8000d9a:	b29d      	uxth	r5, r3
 8000d9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da0:	fb09 4413 	mls	r4, r9, r3, r4
 8000da4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000da8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000db8:	d26c      	bcs.n	8000e94 <__udivmoddi4+0x2ac>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	d96a      	bls.n	8000e94 <__udivmoddi4+0x2ac>
 8000dbe:	3b02      	subs	r3, #2
 8000dc0:	4464      	add	r4, ip
 8000dc2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dc6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dca:	eba4 040e 	sub.w	r4, r4, lr
 8000dce:	42ac      	cmp	r4, r5
 8000dd0:	46c8      	mov	r8, r9
 8000dd2:	46ae      	mov	lr, r5
 8000dd4:	d356      	bcc.n	8000e84 <__udivmoddi4+0x29c>
 8000dd6:	d053      	beq.n	8000e80 <__udivmoddi4+0x298>
 8000dd8:	b156      	cbz	r6, 8000df0 <__udivmoddi4+0x208>
 8000dda:	ebb0 0208 	subs.w	r2, r0, r8
 8000dde:	eb64 040e 	sbc.w	r4, r4, lr
 8000de2:	fa04 f707 	lsl.w	r7, r4, r7
 8000de6:	40ca      	lsrs	r2, r1
 8000de8:	40cc      	lsrs	r4, r1
 8000dea:	4317      	orrs	r7, r2
 8000dec:	e9c6 7400 	strd	r7, r4, [r6]
 8000df0:	4618      	mov	r0, r3
 8000df2:	2100      	movs	r1, #0
 8000df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df8:	f1c3 0120 	rsb	r1, r3, #32
 8000dfc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e00:	fa20 f201 	lsr.w	r2, r0, r1
 8000e04:	fa25 f101 	lsr.w	r1, r5, r1
 8000e08:	409d      	lsls	r5, r3
 8000e0a:	432a      	orrs	r2, r5
 8000e0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e18:	fb07 1510 	mls	r5, r7, r0, r1
 8000e1c:	0c11      	lsrs	r1, r2, #16
 8000e1e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e22:	fb00 f50e 	mul.w	r5, r0, lr
 8000e26:	428d      	cmp	r5, r1
 8000e28:	fa04 f403 	lsl.w	r4, r4, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x258>
 8000e2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e32:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e36:	d22f      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e38:	428d      	cmp	r5, r1
 8000e3a:	d92d      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1b49      	subs	r1, r1, r5
 8000e42:	b292      	uxth	r2, r2
 8000e44:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e48:	fb07 1115 	mls	r1, r7, r5, r1
 8000e4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e50:	fb05 f10e 	mul.w	r1, r5, lr
 8000e54:	4291      	cmp	r1, r2
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x282>
 8000e58:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e60:	d216      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000e62:	4291      	cmp	r1, r2
 8000e64:	d914      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e66:	3d02      	subs	r5, #2
 8000e68:	4462      	add	r2, ip
 8000e6a:	1a52      	subs	r2, r2, r1
 8000e6c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e70:	e738      	b.n	8000ce4 <__udivmoddi4+0xfc>
 8000e72:	4631      	mov	r1, r6
 8000e74:	4630      	mov	r0, r6
 8000e76:	e708      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000e78:	4639      	mov	r1, r7
 8000e7a:	e6e6      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	e6fb      	b.n	8000c78 <__udivmoddi4+0x90>
 8000e80:	4548      	cmp	r0, r9
 8000e82:	d2a9      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e84:	ebb9 0802 	subs.w	r8, r9, r2
 8000e88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	e7a3      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e90:	4645      	mov	r5, r8
 8000e92:	e7ea      	b.n	8000e6a <__udivmoddi4+0x282>
 8000e94:	462b      	mov	r3, r5
 8000e96:	e794      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e98:	4640      	mov	r0, r8
 8000e9a:	e7d1      	b.n	8000e40 <__udivmoddi4+0x258>
 8000e9c:	46d0      	mov	r8, sl
 8000e9e:	e77b      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000ea0:	3d02      	subs	r5, #2
 8000ea2:	4462      	add	r2, ip
 8000ea4:	e732      	b.n	8000d0c <__udivmoddi4+0x124>
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e70a      	b.n	8000cc0 <__udivmoddi4+0xd8>
 8000eaa:	4464      	add	r4, ip
 8000eac:	3802      	subs	r0, #2
 8000eae:	e742      	b.n	8000d36 <__udivmoddi4+0x14e>

08000eb0 <__aeabi_idiv0>:
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <vTask1>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void vTask1(void *pvParameters) {
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
    while(1)
    {
        // Toggle the first LED (e.g., GPIO_PIN_5)
        HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000ebc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ec0:	4803      	ldr	r0, [pc, #12]	; (8000ed0 <vTask1+0x1c>)
 8000ec2:	f000 fd24 	bl	800190e <HAL_GPIO_TogglePin>

        // Delay for 500 milliseconds
        vTaskDelay(500 / portTICK_PERIOD_MS);
 8000ec6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000eca:	f001 fe4b 	bl	8002b64 <vTaskDelay>
        HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000ece:	e7f5      	b.n	8000ebc <vTask1+0x8>
 8000ed0:	40020c00 	.word	0x40020c00

08000ed4 <vTask2>:
    }
}

void vTask2(void *pvParameters) {
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
    while(1)
    {
        // Toggle the second LED (e.g., GPIO_PIN_6)
    	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000edc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ee0:	4803      	ldr	r0, [pc, #12]	; (8000ef0 <vTask2+0x1c>)
 8000ee2:	f000 fd14 	bl	800190e <HAL_GPIO_TogglePin>

        // Delay for 1000 milliseconds
    	vTaskDelay(500 / portTICK_PERIOD_MS);
 8000ee6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000eea:	f001 fe3b 	bl	8002b64 <vTaskDelay>
    	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000eee:	e7f5      	b.n	8000edc <vTask2+0x8>
 8000ef0:	40020c00 	.word	0x40020c00

08000ef4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000efa:	f000 fa27 	bl	800134c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000efe:	f000 f823 	bl	8000f48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f02:	f000 f88b 	bl	800101c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  xTaskCreate(
 8000f06:	2300      	movs	r3, #0
 8000f08:	9301      	str	r3, [sp, #4]
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	9300      	str	r3, [sp, #0]
 8000f0e:	2300      	movs	r3, #0
 8000f10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f14:	4908      	ldr	r1, [pc, #32]	; (8000f38 <main+0x44>)
 8000f16:	4809      	ldr	r0, [pc, #36]	; (8000f3c <main+0x48>)
 8000f18:	f001 fcba 	bl	8002890 <xTaskCreate>
      tskIDLE_PRIORITY,// Task priority
      NULL             // Task handle
  );

  // Create the second task
  xTaskCreate(
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	9301      	str	r3, [sp, #4]
 8000f20:	2300      	movs	r3, #0
 8000f22:	9300      	str	r3, [sp, #0]
 8000f24:	2300      	movs	r3, #0
 8000f26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f2a:	4905      	ldr	r1, [pc, #20]	; (8000f40 <main+0x4c>)
 8000f2c:	4805      	ldr	r0, [pc, #20]	; (8000f44 <main+0x50>)
 8000f2e:	f001 fcaf 	bl	8002890 <xTaskCreate>
      tskIDLE_PRIORITY,// Task priority
      NULL             // Task handle
  );

  // Start the scheduler
  vTaskStartScheduler();
 8000f32:	f001 fe4b 	bl	8002bcc <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f36:	e7fe      	b.n	8000f36 <main+0x42>
 8000f38:	08006de0 	.word	0x08006de0
 8000f3c:	08000eb5 	.word	0x08000eb5
 8000f40:	08006dec 	.word	0x08006dec
 8000f44:	08000ed5 	.word	0x08000ed5

08000f48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b094      	sub	sp, #80	; 0x50
 8000f4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f4e:	f107 0320 	add.w	r3, r7, #32
 8000f52:	2230      	movs	r2, #48	; 0x30
 8000f54:	2100      	movs	r1, #0
 8000f56:	4618      	mov	r0, r3
 8000f58:	f003 ffe5 	bl	8004f26 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f5c:	f107 030c 	add.w	r3, r7, #12
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]
 8000f6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	60bb      	str	r3, [r7, #8]
 8000f70:	4b28      	ldr	r3, [pc, #160]	; (8001014 <SystemClock_Config+0xcc>)
 8000f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f74:	4a27      	ldr	r2, [pc, #156]	; (8001014 <SystemClock_Config+0xcc>)
 8000f76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f7a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f7c:	4b25      	ldr	r3, [pc, #148]	; (8001014 <SystemClock_Config+0xcc>)
 8000f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f84:	60bb      	str	r3, [r7, #8]
 8000f86:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f88:	2300      	movs	r3, #0
 8000f8a:	607b      	str	r3, [r7, #4]
 8000f8c:	4b22      	ldr	r3, [pc, #136]	; (8001018 <SystemClock_Config+0xd0>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f94:	4a20      	ldr	r2, [pc, #128]	; (8001018 <SystemClock_Config+0xd0>)
 8000f96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f9a:	6013      	str	r3, [r2, #0]
 8000f9c:	4b1e      	ldr	r3, [pc, #120]	; (8001018 <SystemClock_Config+0xd0>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fa4:	607b      	str	r3, [r7, #4]
 8000fa6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fac:	2301      	movs	r3, #1
 8000fae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fb0:	2310      	movs	r3, #16
 8000fb2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fbc:	2308      	movs	r3, #8
 8000fbe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000fc0:	2360      	movs	r3, #96	; 0x60
 8000fc2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000fc4:	2304      	movs	r3, #4
 8000fc6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fc8:	2304      	movs	r3, #4
 8000fca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fcc:	f107 0320 	add.w	r3, r7, #32
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f000 fcb7 	bl	8001944 <HAL_RCC_OscConfig>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000fdc:	f000 f870 	bl	80010c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fe0:	230f      	movs	r3, #15
 8000fe2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ff0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ff6:	f107 030c 	add.w	r3, r7, #12
 8000ffa:	2101      	movs	r1, #1
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f000 ff19 	bl	8001e34 <HAL_RCC_ClockConfig>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001008:	f000 f85a 	bl	80010c0 <Error_Handler>
  }
}
 800100c:	bf00      	nop
 800100e:	3750      	adds	r7, #80	; 0x50
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	40023800 	.word	0x40023800
 8001018:	40007000 	.word	0x40007000

0800101c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b088      	sub	sp, #32
 8001020:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001022:	f107 030c 	add.w	r3, r7, #12
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	605a      	str	r2, [r3, #4]
 800102c:	609a      	str	r2, [r3, #8]
 800102e:	60da      	str	r2, [r3, #12]
 8001030:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	60bb      	str	r3, [r7, #8]
 8001036:	4b1f      	ldr	r3, [pc, #124]	; (80010b4 <MX_GPIO_Init+0x98>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	4a1e      	ldr	r2, [pc, #120]	; (80010b4 <MX_GPIO_Init+0x98>)
 800103c:	f043 0301 	orr.w	r3, r3, #1
 8001040:	6313      	str	r3, [r2, #48]	; 0x30
 8001042:	4b1c      	ldr	r3, [pc, #112]	; (80010b4 <MX_GPIO_Init+0x98>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	60bb      	str	r3, [r7, #8]
 800104c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	607b      	str	r3, [r7, #4]
 8001052:	4b18      	ldr	r3, [pc, #96]	; (80010b4 <MX_GPIO_Init+0x98>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	4a17      	ldr	r2, [pc, #92]	; (80010b4 <MX_GPIO_Init+0x98>)
 8001058:	f043 0308 	orr.w	r3, r3, #8
 800105c:	6313      	str	r3, [r2, #48]	; 0x30
 800105e:	4b15      	ldr	r3, [pc, #84]	; (80010b4 <MX_GPIO_Init+0x98>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	f003 0308 	and.w	r3, r3, #8
 8001066:	607b      	str	r3, [r7, #4]
 8001068:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800106a:	2200      	movs	r2, #0
 800106c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001070:	4811      	ldr	r0, [pc, #68]	; (80010b8 <MX_GPIO_Init+0x9c>)
 8001072:	f000 fc33 	bl	80018dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001076:	2301      	movs	r3, #1
 8001078:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800107a:	2300      	movs	r3, #0
 800107c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001082:	f107 030c 	add.w	r3, r7, #12
 8001086:	4619      	mov	r1, r3
 8001088:	480c      	ldr	r0, [pc, #48]	; (80010bc <MX_GPIO_Init+0xa0>)
 800108a:	f000 faa3 	bl	80015d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800108e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001092:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001094:	2301      	movs	r3, #1
 8001096:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109c:	2300      	movs	r3, #0
 800109e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010a0:	f107 030c 	add.w	r3, r7, #12
 80010a4:	4619      	mov	r1, r3
 80010a6:	4804      	ldr	r0, [pc, #16]	; (80010b8 <MX_GPIO_Init+0x9c>)
 80010a8:	f000 fa94 	bl	80015d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010ac:	bf00      	nop
 80010ae:	3720      	adds	r7, #32
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40023800 	.word	0x40023800
 80010b8:	40020c00 	.word	0x40020c00
 80010bc:	40020000 	.word	0x40020000

080010c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010c4:	b672      	cpsid	i
}
 80010c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010c8:	e7fe      	b.n	80010c8 <Error_Handler+0x8>
	...

080010cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	607b      	str	r3, [r7, #4]
 80010d6:	4b10      	ldr	r3, [pc, #64]	; (8001118 <HAL_MspInit+0x4c>)
 80010d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010da:	4a0f      	ldr	r2, [pc, #60]	; (8001118 <HAL_MspInit+0x4c>)
 80010dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010e0:	6453      	str	r3, [r2, #68]	; 0x44
 80010e2:	4b0d      	ldr	r3, [pc, #52]	; (8001118 <HAL_MspInit+0x4c>)
 80010e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ea:	607b      	str	r3, [r7, #4]
 80010ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	603b      	str	r3, [r7, #0]
 80010f2:	4b09      	ldr	r3, [pc, #36]	; (8001118 <HAL_MspInit+0x4c>)
 80010f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f6:	4a08      	ldr	r2, [pc, #32]	; (8001118 <HAL_MspInit+0x4c>)
 80010f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010fc:	6413      	str	r3, [r2, #64]	; 0x40
 80010fe:	4b06      	ldr	r3, [pc, #24]	; (8001118 <HAL_MspInit+0x4c>)
 8001100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001106:	603b      	str	r3, [r7, #0]
 8001108:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800110a:	bf00      	nop
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	40023800 	.word	0x40023800

0800111c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001120:	e7fe      	b.n	8001120 <NMI_Handler+0x4>

08001122 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001122:	b480      	push	{r7}
 8001124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001126:	e7fe      	b.n	8001126 <HardFault_Handler+0x4>

08001128 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800112c:	e7fe      	b.n	800112c <MemManage_Handler+0x4>

0800112e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800112e:	b480      	push	{r7}
 8001130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001132:	e7fe      	b.n	8001132 <BusFault_Handler+0x4>

08001134 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001138:	e7fe      	b.n	8001138 <UsageFault_Handler+0x4>

0800113a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800113a:	b480      	push	{r7}
 800113c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800113e:	bf00      	nop
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  return 1;
 800114c:	2301      	movs	r3, #1
}
 800114e:	4618      	mov	r0, r3
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <_kill>:

int _kill(int pid, int sig)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001162:	f003 ff33 	bl	8004fcc <__errno>
 8001166:	4603      	mov	r3, r0
 8001168:	2216      	movs	r2, #22
 800116a:	601a      	str	r2, [r3, #0]
  return -1;
 800116c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001170:	4618      	mov	r0, r3
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <_exit>:

void _exit (int status)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001180:	f04f 31ff 	mov.w	r1, #4294967295
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff ffe7 	bl	8001158 <_kill>
  while (1) {}    /* Make sure we hang here */
 800118a:	e7fe      	b.n	800118a <_exit+0x12>

0800118c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b086      	sub	sp, #24
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001198:	2300      	movs	r3, #0
 800119a:	617b      	str	r3, [r7, #20]
 800119c:	e00a      	b.n	80011b4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800119e:	f3af 8000 	nop.w
 80011a2:	4601      	mov	r1, r0
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	1c5a      	adds	r2, r3, #1
 80011a8:	60ba      	str	r2, [r7, #8]
 80011aa:	b2ca      	uxtb	r2, r1
 80011ac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	3301      	adds	r3, #1
 80011b2:	617b      	str	r3, [r7, #20]
 80011b4:	697a      	ldr	r2, [r7, #20]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	dbf0      	blt.n	800119e <_read+0x12>
  }

  return len;
 80011bc:	687b      	ldr	r3, [r7, #4]
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3718      	adds	r7, #24
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b086      	sub	sp, #24
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	60f8      	str	r0, [r7, #12]
 80011ce:	60b9      	str	r1, [r7, #8]
 80011d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011d2:	2300      	movs	r3, #0
 80011d4:	617b      	str	r3, [r7, #20]
 80011d6:	e009      	b.n	80011ec <_write+0x26>
  {
    __io_putchar(*ptr++);
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	1c5a      	adds	r2, r3, #1
 80011dc:	60ba      	str	r2, [r7, #8]
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	3301      	adds	r3, #1
 80011ea:	617b      	str	r3, [r7, #20]
 80011ec:	697a      	ldr	r2, [r7, #20]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	dbf1      	blt.n	80011d8 <_write+0x12>
  }
  return len;
 80011f4:	687b      	ldr	r3, [r7, #4]
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3718      	adds	r7, #24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <_close>:

int _close(int file)
{
 80011fe:	b480      	push	{r7}
 8001200:	b083      	sub	sp, #12
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001206:	f04f 33ff 	mov.w	r3, #4294967295
}
 800120a:	4618      	mov	r0, r3
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr

08001216 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001216:	b480      	push	{r7}
 8001218:	b083      	sub	sp, #12
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
 800121e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001226:	605a      	str	r2, [r3, #4]
  return 0;
 8001228:	2300      	movs	r3, #0
}
 800122a:	4618      	mov	r0, r3
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr

08001236 <_isatty>:

int _isatty(int file)
{
 8001236:	b480      	push	{r7}
 8001238:	b083      	sub	sp, #12
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800123e:	2301      	movs	r3, #1
}
 8001240:	4618      	mov	r0, r3
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800124c:	b480      	push	{r7}
 800124e:	b085      	sub	sp, #20
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	3714      	adds	r7, #20
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
	...

08001268 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001270:	4a14      	ldr	r2, [pc, #80]	; (80012c4 <_sbrk+0x5c>)
 8001272:	4b15      	ldr	r3, [pc, #84]	; (80012c8 <_sbrk+0x60>)
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800127c:	4b13      	ldr	r3, [pc, #76]	; (80012cc <_sbrk+0x64>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d102      	bne.n	800128a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001284:	4b11      	ldr	r3, [pc, #68]	; (80012cc <_sbrk+0x64>)
 8001286:	4a12      	ldr	r2, [pc, #72]	; (80012d0 <_sbrk+0x68>)
 8001288:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800128a:	4b10      	ldr	r3, [pc, #64]	; (80012cc <_sbrk+0x64>)
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4413      	add	r3, r2
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	429a      	cmp	r2, r3
 8001296:	d207      	bcs.n	80012a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001298:	f003 fe98 	bl	8004fcc <__errno>
 800129c:	4603      	mov	r3, r0
 800129e:	220c      	movs	r2, #12
 80012a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012a2:	f04f 33ff 	mov.w	r3, #4294967295
 80012a6:	e009      	b.n	80012bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012a8:	4b08      	ldr	r3, [pc, #32]	; (80012cc <_sbrk+0x64>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012ae:	4b07      	ldr	r3, [pc, #28]	; (80012cc <_sbrk+0x64>)
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4413      	add	r3, r2
 80012b6:	4a05      	ldr	r2, [pc, #20]	; (80012cc <_sbrk+0x64>)
 80012b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012ba:	68fb      	ldr	r3, [r7, #12]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3718      	adds	r7, #24
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20010000 	.word	0x20010000
 80012c8:	00004000 	.word	0x00004000
 80012cc:	200001f8 	.word	0x200001f8
 80012d0:	200040f0 	.word	0x200040f0

080012d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012d8:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <SystemInit+0x20>)
 80012da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012de:	4a05      	ldr	r2, [pc, #20]	; (80012f4 <SystemInit+0x20>)
 80012e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012e8:	bf00      	nop
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	e000ed00 	.word	0xe000ed00

080012f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80012f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001330 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80012fc:	f7ff ffea 	bl	80012d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001300:	480c      	ldr	r0, [pc, #48]	; (8001334 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001302:	490d      	ldr	r1, [pc, #52]	; (8001338 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001304:	4a0d      	ldr	r2, [pc, #52]	; (800133c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001306:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001308:	e002      	b.n	8001310 <LoopCopyDataInit>

0800130a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800130a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800130c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800130e:	3304      	adds	r3, #4

08001310 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001310:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001312:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001314:	d3f9      	bcc.n	800130a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001316:	4a0a      	ldr	r2, [pc, #40]	; (8001340 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001318:	4c0a      	ldr	r4, [pc, #40]	; (8001344 <LoopFillZerobss+0x22>)
  movs r3, #0
 800131a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800131c:	e001      	b.n	8001322 <LoopFillZerobss>

0800131e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800131e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001320:	3204      	adds	r2, #4

08001322 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001322:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001324:	d3fb      	bcc.n	800131e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001326:	f003 fe57 	bl	8004fd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800132a:	f7ff fde3 	bl	8000ef4 <main>
  bx  lr    
 800132e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001330:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001334:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001338:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 800133c:	080071a4 	.word	0x080071a4
  ldr r2, =_sbss
 8001340:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001344:	200040f0 	.word	0x200040f0

08001348 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001348:	e7fe      	b.n	8001348 <ADC_IRQHandler>
	...

0800134c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001350:	4b0e      	ldr	r3, [pc, #56]	; (800138c <HAL_Init+0x40>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a0d      	ldr	r2, [pc, #52]	; (800138c <HAL_Init+0x40>)
 8001356:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800135a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800135c:	4b0b      	ldr	r3, [pc, #44]	; (800138c <HAL_Init+0x40>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a0a      	ldr	r2, [pc, #40]	; (800138c <HAL_Init+0x40>)
 8001362:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001366:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001368:	4b08      	ldr	r3, [pc, #32]	; (800138c <HAL_Init+0x40>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a07      	ldr	r2, [pc, #28]	; (800138c <HAL_Init+0x40>)
 800136e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001372:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001374:	2003      	movs	r0, #3
 8001376:	f000 f8f9 	bl	800156c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800137a:	200f      	movs	r0, #15
 800137c:	f000 f808 	bl	8001390 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001380:	f7ff fea4 	bl	80010cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001384:	2300      	movs	r3, #0
}
 8001386:	4618      	mov	r0, r3
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40023c00 	.word	0x40023c00

08001390 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001398:	4b12      	ldr	r3, [pc, #72]	; (80013e4 <HAL_InitTick+0x54>)
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	4b12      	ldr	r3, [pc, #72]	; (80013e8 <HAL_InitTick+0x58>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	4619      	mov	r1, r3
 80013a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ae:	4618      	mov	r0, r3
 80013b0:	f000 f903 	bl	80015ba <HAL_SYSTICK_Config>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e00e      	b.n	80013dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2b0f      	cmp	r3, #15
 80013c2:	d80a      	bhi.n	80013da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013c4:	2200      	movs	r2, #0
 80013c6:	6879      	ldr	r1, [r7, #4]
 80013c8:	f04f 30ff 	mov.w	r0, #4294967295
 80013cc:	f000 f8d9 	bl	8001582 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013d0:	4a06      	ldr	r2, [pc, #24]	; (80013ec <HAL_InitTick+0x5c>)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013d6:	2300      	movs	r3, #0
 80013d8:	e000      	b.n	80013dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	20000000 	.word	0x20000000
 80013e8:	20000008 	.word	0x20000008
 80013ec:	20000004 	.word	0x20000004

080013f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  return uwTick;
 80013f4:	4b03      	ldr	r3, [pc, #12]	; (8001404 <HAL_GetTick+0x14>)
 80013f6:	681b      	ldr	r3, [r3, #0]
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	200001fc 	.word	0x200001fc

08001408 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f003 0307 	and.w	r3, r3, #7
 8001416:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001418:	4b0c      	ldr	r3, [pc, #48]	; (800144c <__NVIC_SetPriorityGrouping+0x44>)
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800141e:	68ba      	ldr	r2, [r7, #8]
 8001420:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001424:	4013      	ands	r3, r2
 8001426:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001430:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001434:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001438:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800143a:	4a04      	ldr	r2, [pc, #16]	; (800144c <__NVIC_SetPriorityGrouping+0x44>)
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	60d3      	str	r3, [r2, #12]
}
 8001440:	bf00      	nop
 8001442:	3714      	adds	r7, #20
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	e000ed00 	.word	0xe000ed00

08001450 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001454:	4b04      	ldr	r3, [pc, #16]	; (8001468 <__NVIC_GetPriorityGrouping+0x18>)
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	0a1b      	lsrs	r3, r3, #8
 800145a:	f003 0307 	and.w	r3, r3, #7
}
 800145e:	4618      	mov	r0, r3
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr
 8001468:	e000ed00 	.word	0xe000ed00

0800146c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	6039      	str	r1, [r7, #0]
 8001476:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147c:	2b00      	cmp	r3, #0
 800147e:	db0a      	blt.n	8001496 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	b2da      	uxtb	r2, r3
 8001484:	490c      	ldr	r1, [pc, #48]	; (80014b8 <__NVIC_SetPriority+0x4c>)
 8001486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148a:	0112      	lsls	r2, r2, #4
 800148c:	b2d2      	uxtb	r2, r2
 800148e:	440b      	add	r3, r1
 8001490:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001494:	e00a      	b.n	80014ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	b2da      	uxtb	r2, r3
 800149a:	4908      	ldr	r1, [pc, #32]	; (80014bc <__NVIC_SetPriority+0x50>)
 800149c:	79fb      	ldrb	r3, [r7, #7]
 800149e:	f003 030f 	and.w	r3, r3, #15
 80014a2:	3b04      	subs	r3, #4
 80014a4:	0112      	lsls	r2, r2, #4
 80014a6:	b2d2      	uxtb	r2, r2
 80014a8:	440b      	add	r3, r1
 80014aa:	761a      	strb	r2, [r3, #24]
}
 80014ac:	bf00      	nop
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	e000e100 	.word	0xe000e100
 80014bc:	e000ed00 	.word	0xe000ed00

080014c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b089      	sub	sp, #36	; 0x24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	f003 0307 	and.w	r3, r3, #7
 80014d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	f1c3 0307 	rsb	r3, r3, #7
 80014da:	2b04      	cmp	r3, #4
 80014dc:	bf28      	it	cs
 80014de:	2304      	movcs	r3, #4
 80014e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	3304      	adds	r3, #4
 80014e6:	2b06      	cmp	r3, #6
 80014e8:	d902      	bls.n	80014f0 <NVIC_EncodePriority+0x30>
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	3b03      	subs	r3, #3
 80014ee:	e000      	b.n	80014f2 <NVIC_EncodePriority+0x32>
 80014f0:	2300      	movs	r3, #0
 80014f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f4:	f04f 32ff 	mov.w	r2, #4294967295
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	fa02 f303 	lsl.w	r3, r2, r3
 80014fe:	43da      	mvns	r2, r3
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	401a      	ands	r2, r3
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001508:	f04f 31ff 	mov.w	r1, #4294967295
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	fa01 f303 	lsl.w	r3, r1, r3
 8001512:	43d9      	mvns	r1, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001518:	4313      	orrs	r3, r2
         );
}
 800151a:	4618      	mov	r0, r3
 800151c:	3724      	adds	r7, #36	; 0x24
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
	...

08001528 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	3b01      	subs	r3, #1
 8001534:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001538:	d301      	bcc.n	800153e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800153a:	2301      	movs	r3, #1
 800153c:	e00f      	b.n	800155e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800153e:	4a0a      	ldr	r2, [pc, #40]	; (8001568 <SysTick_Config+0x40>)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	3b01      	subs	r3, #1
 8001544:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001546:	210f      	movs	r1, #15
 8001548:	f04f 30ff 	mov.w	r0, #4294967295
 800154c:	f7ff ff8e 	bl	800146c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001550:	4b05      	ldr	r3, [pc, #20]	; (8001568 <SysTick_Config+0x40>)
 8001552:	2200      	movs	r2, #0
 8001554:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001556:	4b04      	ldr	r3, [pc, #16]	; (8001568 <SysTick_Config+0x40>)
 8001558:	2207      	movs	r2, #7
 800155a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800155c:	2300      	movs	r3, #0
}
 800155e:	4618      	mov	r0, r3
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	e000e010 	.word	0xe000e010

0800156c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f7ff ff47 	bl	8001408 <__NVIC_SetPriorityGrouping>
}
 800157a:	bf00      	nop
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001582:	b580      	push	{r7, lr}
 8001584:	b086      	sub	sp, #24
 8001586:	af00      	add	r7, sp, #0
 8001588:	4603      	mov	r3, r0
 800158a:	60b9      	str	r1, [r7, #8]
 800158c:	607a      	str	r2, [r7, #4]
 800158e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001590:	2300      	movs	r3, #0
 8001592:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001594:	f7ff ff5c 	bl	8001450 <__NVIC_GetPriorityGrouping>
 8001598:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	68b9      	ldr	r1, [r7, #8]
 800159e:	6978      	ldr	r0, [r7, #20]
 80015a0:	f7ff ff8e 	bl	80014c0 <NVIC_EncodePriority>
 80015a4:	4602      	mov	r2, r0
 80015a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015aa:	4611      	mov	r1, r2
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff ff5d 	bl	800146c <__NVIC_SetPriority>
}
 80015b2:	bf00      	nop
 80015b4:	3718      	adds	r7, #24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b082      	sub	sp, #8
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f7ff ffb0 	bl	8001528 <SysTick_Config>
 80015c8:	4603      	mov	r3, r0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
	...

080015d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b089      	sub	sp, #36	; 0x24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015de:	2300      	movs	r3, #0
 80015e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015e2:	2300      	movs	r3, #0
 80015e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015e6:	2300      	movs	r3, #0
 80015e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015ea:	2300      	movs	r3, #0
 80015ec:	61fb      	str	r3, [r7, #28]
 80015ee:	e159      	b.n	80018a4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015f0:	2201      	movs	r2, #1
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	697a      	ldr	r2, [r7, #20]
 8001600:	4013      	ands	r3, r2
 8001602:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001604:	693a      	ldr	r2, [r7, #16]
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	429a      	cmp	r2, r3
 800160a:	f040 8148 	bne.w	800189e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f003 0303 	and.w	r3, r3, #3
 8001616:	2b01      	cmp	r3, #1
 8001618:	d005      	beq.n	8001626 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001622:	2b02      	cmp	r3, #2
 8001624:	d130      	bne.n	8001688 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	2203      	movs	r2, #3
 8001632:	fa02 f303 	lsl.w	r3, r2, r3
 8001636:	43db      	mvns	r3, r3
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	4013      	ands	r3, r2
 800163c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	68da      	ldr	r2, [r3, #12]
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	4313      	orrs	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800165c:	2201      	movs	r2, #1
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	43db      	mvns	r3, r3
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	4013      	ands	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	091b      	lsrs	r3, r3, #4
 8001672:	f003 0201 	and.w	r2, r3, #1
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	4313      	orrs	r3, r2
 8001680:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f003 0303 	and.w	r3, r3, #3
 8001690:	2b03      	cmp	r3, #3
 8001692:	d017      	beq.n	80016c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	2203      	movs	r2, #3
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	43db      	mvns	r3, r3
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	4013      	ands	r3, r2
 80016aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	689a      	ldr	r2, [r3, #8]
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f003 0303 	and.w	r3, r3, #3
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d123      	bne.n	8001718 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	08da      	lsrs	r2, r3, #3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	3208      	adds	r2, #8
 80016d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	f003 0307 	and.w	r3, r3, #7
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	220f      	movs	r2, #15
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	43db      	mvns	r3, r3
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	4013      	ands	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	691a      	ldr	r2, [r3, #16]
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	f003 0307 	and.w	r3, r3, #7
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	4313      	orrs	r3, r2
 8001708:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	08da      	lsrs	r2, r3, #3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	3208      	adds	r2, #8
 8001712:	69b9      	ldr	r1, [r7, #24]
 8001714:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	2203      	movs	r2, #3
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	43db      	mvns	r3, r3
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	4013      	ands	r3, r2
 800172e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f003 0203 	and.w	r2, r3, #3
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	4313      	orrs	r3, r2
 8001744:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001754:	2b00      	cmp	r3, #0
 8001756:	f000 80a2 	beq.w	800189e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	60fb      	str	r3, [r7, #12]
 800175e:	4b57      	ldr	r3, [pc, #348]	; (80018bc <HAL_GPIO_Init+0x2e8>)
 8001760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001762:	4a56      	ldr	r2, [pc, #344]	; (80018bc <HAL_GPIO_Init+0x2e8>)
 8001764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001768:	6453      	str	r3, [r2, #68]	; 0x44
 800176a:	4b54      	ldr	r3, [pc, #336]	; (80018bc <HAL_GPIO_Init+0x2e8>)
 800176c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001772:	60fb      	str	r3, [r7, #12]
 8001774:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001776:	4a52      	ldr	r2, [pc, #328]	; (80018c0 <HAL_GPIO_Init+0x2ec>)
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	089b      	lsrs	r3, r3, #2
 800177c:	3302      	adds	r3, #2
 800177e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001782:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	f003 0303 	and.w	r3, r3, #3
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	220f      	movs	r2, #15
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	43db      	mvns	r3, r3
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	4013      	ands	r3, r2
 8001798:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a49      	ldr	r2, [pc, #292]	; (80018c4 <HAL_GPIO_Init+0x2f0>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d019      	beq.n	80017d6 <HAL_GPIO_Init+0x202>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a48      	ldr	r2, [pc, #288]	; (80018c8 <HAL_GPIO_Init+0x2f4>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d013      	beq.n	80017d2 <HAL_GPIO_Init+0x1fe>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a47      	ldr	r2, [pc, #284]	; (80018cc <HAL_GPIO_Init+0x2f8>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d00d      	beq.n	80017ce <HAL_GPIO_Init+0x1fa>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a46      	ldr	r2, [pc, #280]	; (80018d0 <HAL_GPIO_Init+0x2fc>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d007      	beq.n	80017ca <HAL_GPIO_Init+0x1f6>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a45      	ldr	r2, [pc, #276]	; (80018d4 <HAL_GPIO_Init+0x300>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d101      	bne.n	80017c6 <HAL_GPIO_Init+0x1f2>
 80017c2:	2304      	movs	r3, #4
 80017c4:	e008      	b.n	80017d8 <HAL_GPIO_Init+0x204>
 80017c6:	2307      	movs	r3, #7
 80017c8:	e006      	b.n	80017d8 <HAL_GPIO_Init+0x204>
 80017ca:	2303      	movs	r3, #3
 80017cc:	e004      	b.n	80017d8 <HAL_GPIO_Init+0x204>
 80017ce:	2302      	movs	r3, #2
 80017d0:	e002      	b.n	80017d8 <HAL_GPIO_Init+0x204>
 80017d2:	2301      	movs	r3, #1
 80017d4:	e000      	b.n	80017d8 <HAL_GPIO_Init+0x204>
 80017d6:	2300      	movs	r3, #0
 80017d8:	69fa      	ldr	r2, [r7, #28]
 80017da:	f002 0203 	and.w	r2, r2, #3
 80017de:	0092      	lsls	r2, r2, #2
 80017e0:	4093      	lsls	r3, r2
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017e8:	4935      	ldr	r1, [pc, #212]	; (80018c0 <HAL_GPIO_Init+0x2ec>)
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	089b      	lsrs	r3, r3, #2
 80017ee:	3302      	adds	r3, #2
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017f6:	4b38      	ldr	r3, [pc, #224]	; (80018d8 <HAL_GPIO_Init+0x304>)
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	43db      	mvns	r3, r3
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	4013      	ands	r3, r2
 8001804:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d003      	beq.n	800181a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001812:	69ba      	ldr	r2, [r7, #24]
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	4313      	orrs	r3, r2
 8001818:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800181a:	4a2f      	ldr	r2, [pc, #188]	; (80018d8 <HAL_GPIO_Init+0x304>)
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001820:	4b2d      	ldr	r3, [pc, #180]	; (80018d8 <HAL_GPIO_Init+0x304>)
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	43db      	mvns	r3, r3
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	4013      	ands	r3, r2
 800182e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d003      	beq.n	8001844 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	4313      	orrs	r3, r2
 8001842:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001844:	4a24      	ldr	r2, [pc, #144]	; (80018d8 <HAL_GPIO_Init+0x304>)
 8001846:	69bb      	ldr	r3, [r7, #24]
 8001848:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800184a:	4b23      	ldr	r3, [pc, #140]	; (80018d8 <HAL_GPIO_Init+0x304>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	43db      	mvns	r3, r3
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	4013      	ands	r3, r2
 8001858:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d003      	beq.n	800186e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001866:	69ba      	ldr	r2, [r7, #24]
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	4313      	orrs	r3, r2
 800186c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800186e:	4a1a      	ldr	r2, [pc, #104]	; (80018d8 <HAL_GPIO_Init+0x304>)
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001874:	4b18      	ldr	r3, [pc, #96]	; (80018d8 <HAL_GPIO_Init+0x304>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	43db      	mvns	r3, r3
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	4013      	ands	r3, r2
 8001882:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d003      	beq.n	8001898 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	4313      	orrs	r3, r2
 8001896:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001898:	4a0f      	ldr	r2, [pc, #60]	; (80018d8 <HAL_GPIO_Init+0x304>)
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	3301      	adds	r3, #1
 80018a2:	61fb      	str	r3, [r7, #28]
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	2b0f      	cmp	r3, #15
 80018a8:	f67f aea2 	bls.w	80015f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018ac:	bf00      	nop
 80018ae:	bf00      	nop
 80018b0:	3724      	adds	r7, #36	; 0x24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	40023800 	.word	0x40023800
 80018c0:	40013800 	.word	0x40013800
 80018c4:	40020000 	.word	0x40020000
 80018c8:	40020400 	.word	0x40020400
 80018cc:	40020800 	.word	0x40020800
 80018d0:	40020c00 	.word	0x40020c00
 80018d4:	40021000 	.word	0x40021000
 80018d8:	40013c00 	.word	0x40013c00

080018dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	460b      	mov	r3, r1
 80018e6:	807b      	strh	r3, [r7, #2]
 80018e8:	4613      	mov	r3, r2
 80018ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018ec:	787b      	ldrb	r3, [r7, #1]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d003      	beq.n	80018fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018f2:	887a      	ldrh	r2, [r7, #2]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018f8:	e003      	b.n	8001902 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018fa:	887b      	ldrh	r3, [r7, #2]
 80018fc:	041a      	lsls	r2, r3, #16
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	619a      	str	r2, [r3, #24]
}
 8001902:	bf00      	nop
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr

0800190e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800190e:	b480      	push	{r7}
 8001910:	b085      	sub	sp, #20
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
 8001916:	460b      	mov	r3, r1
 8001918:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	695b      	ldr	r3, [r3, #20]
 800191e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001920:	887a      	ldrh	r2, [r7, #2]
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	4013      	ands	r3, r2
 8001926:	041a      	lsls	r2, r3, #16
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	43d9      	mvns	r1, r3
 800192c:	887b      	ldrh	r3, [r7, #2]
 800192e:	400b      	ands	r3, r1
 8001930:	431a      	orrs	r2, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	619a      	str	r2, [r3, #24]
}
 8001936:	bf00      	nop
 8001938:	3714      	adds	r7, #20
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
	...

08001944 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d101      	bne.n	8001956 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e267      	b.n	8001e26 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	2b00      	cmp	r3, #0
 8001960:	d075      	beq.n	8001a4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001962:	4b88      	ldr	r3, [pc, #544]	; (8001b84 <HAL_RCC_OscConfig+0x240>)
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f003 030c 	and.w	r3, r3, #12
 800196a:	2b04      	cmp	r3, #4
 800196c:	d00c      	beq.n	8001988 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800196e:	4b85      	ldr	r3, [pc, #532]	; (8001b84 <HAL_RCC_OscConfig+0x240>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001976:	2b08      	cmp	r3, #8
 8001978:	d112      	bne.n	80019a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800197a:	4b82      	ldr	r3, [pc, #520]	; (8001b84 <HAL_RCC_OscConfig+0x240>)
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001982:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001986:	d10b      	bne.n	80019a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001988:	4b7e      	ldr	r3, [pc, #504]	; (8001b84 <HAL_RCC_OscConfig+0x240>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d05b      	beq.n	8001a4c <HAL_RCC_OscConfig+0x108>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d157      	bne.n	8001a4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e242      	b.n	8001e26 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019a8:	d106      	bne.n	80019b8 <HAL_RCC_OscConfig+0x74>
 80019aa:	4b76      	ldr	r3, [pc, #472]	; (8001b84 <HAL_RCC_OscConfig+0x240>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a75      	ldr	r2, [pc, #468]	; (8001b84 <HAL_RCC_OscConfig+0x240>)
 80019b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019b4:	6013      	str	r3, [r2, #0]
 80019b6:	e01d      	b.n	80019f4 <HAL_RCC_OscConfig+0xb0>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019c0:	d10c      	bne.n	80019dc <HAL_RCC_OscConfig+0x98>
 80019c2:	4b70      	ldr	r3, [pc, #448]	; (8001b84 <HAL_RCC_OscConfig+0x240>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a6f      	ldr	r2, [pc, #444]	; (8001b84 <HAL_RCC_OscConfig+0x240>)
 80019c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019cc:	6013      	str	r3, [r2, #0]
 80019ce:	4b6d      	ldr	r3, [pc, #436]	; (8001b84 <HAL_RCC_OscConfig+0x240>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a6c      	ldr	r2, [pc, #432]	; (8001b84 <HAL_RCC_OscConfig+0x240>)
 80019d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019d8:	6013      	str	r3, [r2, #0]
 80019da:	e00b      	b.n	80019f4 <HAL_RCC_OscConfig+0xb0>
 80019dc:	4b69      	ldr	r3, [pc, #420]	; (8001b84 <HAL_RCC_OscConfig+0x240>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a68      	ldr	r2, [pc, #416]	; (8001b84 <HAL_RCC_OscConfig+0x240>)
 80019e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019e6:	6013      	str	r3, [r2, #0]
 80019e8:	4b66      	ldr	r3, [pc, #408]	; (8001b84 <HAL_RCC_OscConfig+0x240>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a65      	ldr	r2, [pc, #404]	; (8001b84 <HAL_RCC_OscConfig+0x240>)
 80019ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d013      	beq.n	8001a24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019fc:	f7ff fcf8 	bl	80013f0 <HAL_GetTick>
 8001a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a02:	e008      	b.n	8001a16 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a04:	f7ff fcf4 	bl	80013f0 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	2b64      	cmp	r3, #100	; 0x64
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e207      	b.n	8001e26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a16:	4b5b      	ldr	r3, [pc, #364]	; (8001b84 <HAL_RCC_OscConfig+0x240>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d0f0      	beq.n	8001a04 <HAL_RCC_OscConfig+0xc0>
 8001a22:	e014      	b.n	8001a4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a24:	f7ff fce4 	bl	80013f0 <HAL_GetTick>
 8001a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a2a:	e008      	b.n	8001a3e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a2c:	f7ff fce0 	bl	80013f0 <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b64      	cmp	r3, #100	; 0x64
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e1f3      	b.n	8001e26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a3e:	4b51      	ldr	r3, [pc, #324]	; (8001b84 <HAL_RCC_OscConfig+0x240>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d1f0      	bne.n	8001a2c <HAL_RCC_OscConfig+0xe8>
 8001a4a:	e000      	b.n	8001a4e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d063      	beq.n	8001b22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a5a:	4b4a      	ldr	r3, [pc, #296]	; (8001b84 <HAL_RCC_OscConfig+0x240>)
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f003 030c 	and.w	r3, r3, #12
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d00b      	beq.n	8001a7e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a66:	4b47      	ldr	r3, [pc, #284]	; (8001b84 <HAL_RCC_OscConfig+0x240>)
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a6e:	2b08      	cmp	r3, #8
 8001a70:	d11c      	bne.n	8001aac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a72:	4b44      	ldr	r3, [pc, #272]	; (8001b84 <HAL_RCC_OscConfig+0x240>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d116      	bne.n	8001aac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a7e:	4b41      	ldr	r3, [pc, #260]	; (8001b84 <HAL_RCC_OscConfig+0x240>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d005      	beq.n	8001a96 <HAL_RCC_OscConfig+0x152>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d001      	beq.n	8001a96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e1c7      	b.n	8001e26 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a96:	4b3b      	ldr	r3, [pc, #236]	; (8001b84 <HAL_RCC_OscConfig+0x240>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	691b      	ldr	r3, [r3, #16]
 8001aa2:	00db      	lsls	r3, r3, #3
 8001aa4:	4937      	ldr	r1, [pc, #220]	; (8001b84 <HAL_RCC_OscConfig+0x240>)
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aaa:	e03a      	b.n	8001b22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d020      	beq.n	8001af6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ab4:	4b34      	ldr	r3, [pc, #208]	; (8001b88 <HAL_RCC_OscConfig+0x244>)
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aba:	f7ff fc99 	bl	80013f0 <HAL_GetTick>
 8001abe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ac0:	e008      	b.n	8001ad4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ac2:	f7ff fc95 	bl	80013f0 <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d901      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e1a8      	b.n	8001e26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ad4:	4b2b      	ldr	r3, [pc, #172]	; (8001b84 <HAL_RCC_OscConfig+0x240>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0302 	and.w	r3, r3, #2
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d0f0      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ae0:	4b28      	ldr	r3, [pc, #160]	; (8001b84 <HAL_RCC_OscConfig+0x240>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	691b      	ldr	r3, [r3, #16]
 8001aec:	00db      	lsls	r3, r3, #3
 8001aee:	4925      	ldr	r1, [pc, #148]	; (8001b84 <HAL_RCC_OscConfig+0x240>)
 8001af0:	4313      	orrs	r3, r2
 8001af2:	600b      	str	r3, [r1, #0]
 8001af4:	e015      	b.n	8001b22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001af6:	4b24      	ldr	r3, [pc, #144]	; (8001b88 <HAL_RCC_OscConfig+0x244>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001afc:	f7ff fc78 	bl	80013f0 <HAL_GetTick>
 8001b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b02:	e008      	b.n	8001b16 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b04:	f7ff fc74 	bl	80013f0 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e187      	b.n	8001e26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b16:	4b1b      	ldr	r3, [pc, #108]	; (8001b84 <HAL_RCC_OscConfig+0x240>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d1f0      	bne.n	8001b04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0308 	and.w	r3, r3, #8
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d036      	beq.n	8001b9c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	695b      	ldr	r3, [r3, #20]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d016      	beq.n	8001b64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b36:	4b15      	ldr	r3, [pc, #84]	; (8001b8c <HAL_RCC_OscConfig+0x248>)
 8001b38:	2201      	movs	r2, #1
 8001b3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b3c:	f7ff fc58 	bl	80013f0 <HAL_GetTick>
 8001b40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b42:	e008      	b.n	8001b56 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b44:	f7ff fc54 	bl	80013f0 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e167      	b.n	8001e26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b56:	4b0b      	ldr	r3, [pc, #44]	; (8001b84 <HAL_RCC_OscConfig+0x240>)
 8001b58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d0f0      	beq.n	8001b44 <HAL_RCC_OscConfig+0x200>
 8001b62:	e01b      	b.n	8001b9c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b64:	4b09      	ldr	r3, [pc, #36]	; (8001b8c <HAL_RCC_OscConfig+0x248>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b6a:	f7ff fc41 	bl	80013f0 <HAL_GetTick>
 8001b6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b70:	e00e      	b.n	8001b90 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b72:	f7ff fc3d 	bl	80013f0 <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d907      	bls.n	8001b90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e150      	b.n	8001e26 <HAL_RCC_OscConfig+0x4e2>
 8001b84:	40023800 	.word	0x40023800
 8001b88:	42470000 	.word	0x42470000
 8001b8c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b90:	4b88      	ldr	r3, [pc, #544]	; (8001db4 <HAL_RCC_OscConfig+0x470>)
 8001b92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b94:	f003 0302 	and.w	r3, r3, #2
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d1ea      	bne.n	8001b72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0304 	and.w	r3, r3, #4
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	f000 8097 	beq.w	8001cd8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001baa:	2300      	movs	r3, #0
 8001bac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bae:	4b81      	ldr	r3, [pc, #516]	; (8001db4 <HAL_RCC_OscConfig+0x470>)
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d10f      	bne.n	8001bda <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	60bb      	str	r3, [r7, #8]
 8001bbe:	4b7d      	ldr	r3, [pc, #500]	; (8001db4 <HAL_RCC_OscConfig+0x470>)
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc2:	4a7c      	ldr	r2, [pc, #496]	; (8001db4 <HAL_RCC_OscConfig+0x470>)
 8001bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bca:	4b7a      	ldr	r3, [pc, #488]	; (8001db4 <HAL_RCC_OscConfig+0x470>)
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd2:	60bb      	str	r3, [r7, #8]
 8001bd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bda:	4b77      	ldr	r3, [pc, #476]	; (8001db8 <HAL_RCC_OscConfig+0x474>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d118      	bne.n	8001c18 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001be6:	4b74      	ldr	r3, [pc, #464]	; (8001db8 <HAL_RCC_OscConfig+0x474>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a73      	ldr	r2, [pc, #460]	; (8001db8 <HAL_RCC_OscConfig+0x474>)
 8001bec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bf0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bf2:	f7ff fbfd 	bl	80013f0 <HAL_GetTick>
 8001bf6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bf8:	e008      	b.n	8001c0c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bfa:	f7ff fbf9 	bl	80013f0 <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d901      	bls.n	8001c0c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e10c      	b.n	8001e26 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c0c:	4b6a      	ldr	r3, [pc, #424]	; (8001db8 <HAL_RCC_OscConfig+0x474>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d0f0      	beq.n	8001bfa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d106      	bne.n	8001c2e <HAL_RCC_OscConfig+0x2ea>
 8001c20:	4b64      	ldr	r3, [pc, #400]	; (8001db4 <HAL_RCC_OscConfig+0x470>)
 8001c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c24:	4a63      	ldr	r2, [pc, #396]	; (8001db4 <HAL_RCC_OscConfig+0x470>)
 8001c26:	f043 0301 	orr.w	r3, r3, #1
 8001c2a:	6713      	str	r3, [r2, #112]	; 0x70
 8001c2c:	e01c      	b.n	8001c68 <HAL_RCC_OscConfig+0x324>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	2b05      	cmp	r3, #5
 8001c34:	d10c      	bne.n	8001c50 <HAL_RCC_OscConfig+0x30c>
 8001c36:	4b5f      	ldr	r3, [pc, #380]	; (8001db4 <HAL_RCC_OscConfig+0x470>)
 8001c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c3a:	4a5e      	ldr	r2, [pc, #376]	; (8001db4 <HAL_RCC_OscConfig+0x470>)
 8001c3c:	f043 0304 	orr.w	r3, r3, #4
 8001c40:	6713      	str	r3, [r2, #112]	; 0x70
 8001c42:	4b5c      	ldr	r3, [pc, #368]	; (8001db4 <HAL_RCC_OscConfig+0x470>)
 8001c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c46:	4a5b      	ldr	r2, [pc, #364]	; (8001db4 <HAL_RCC_OscConfig+0x470>)
 8001c48:	f043 0301 	orr.w	r3, r3, #1
 8001c4c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c4e:	e00b      	b.n	8001c68 <HAL_RCC_OscConfig+0x324>
 8001c50:	4b58      	ldr	r3, [pc, #352]	; (8001db4 <HAL_RCC_OscConfig+0x470>)
 8001c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c54:	4a57      	ldr	r2, [pc, #348]	; (8001db4 <HAL_RCC_OscConfig+0x470>)
 8001c56:	f023 0301 	bic.w	r3, r3, #1
 8001c5a:	6713      	str	r3, [r2, #112]	; 0x70
 8001c5c:	4b55      	ldr	r3, [pc, #340]	; (8001db4 <HAL_RCC_OscConfig+0x470>)
 8001c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c60:	4a54      	ldr	r2, [pc, #336]	; (8001db4 <HAL_RCC_OscConfig+0x470>)
 8001c62:	f023 0304 	bic.w	r3, r3, #4
 8001c66:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d015      	beq.n	8001c9c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c70:	f7ff fbbe 	bl	80013f0 <HAL_GetTick>
 8001c74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c76:	e00a      	b.n	8001c8e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c78:	f7ff fbba 	bl	80013f0 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e0cb      	b.n	8001e26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c8e:	4b49      	ldr	r3, [pc, #292]	; (8001db4 <HAL_RCC_OscConfig+0x470>)
 8001c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d0ee      	beq.n	8001c78 <HAL_RCC_OscConfig+0x334>
 8001c9a:	e014      	b.n	8001cc6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c9c:	f7ff fba8 	bl	80013f0 <HAL_GetTick>
 8001ca0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ca2:	e00a      	b.n	8001cba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ca4:	f7ff fba4 	bl	80013f0 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e0b5      	b.n	8001e26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cba:	4b3e      	ldr	r3, [pc, #248]	; (8001db4 <HAL_RCC_OscConfig+0x470>)
 8001cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d1ee      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cc6:	7dfb      	ldrb	r3, [r7, #23]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d105      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ccc:	4b39      	ldr	r3, [pc, #228]	; (8001db4 <HAL_RCC_OscConfig+0x470>)
 8001cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd0:	4a38      	ldr	r2, [pc, #224]	; (8001db4 <HAL_RCC_OscConfig+0x470>)
 8001cd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cd6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	f000 80a1 	beq.w	8001e24 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ce2:	4b34      	ldr	r3, [pc, #208]	; (8001db4 <HAL_RCC_OscConfig+0x470>)
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	f003 030c 	and.w	r3, r3, #12
 8001cea:	2b08      	cmp	r3, #8
 8001cec:	d05c      	beq.n	8001da8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	699b      	ldr	r3, [r3, #24]
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d141      	bne.n	8001d7a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cf6:	4b31      	ldr	r3, [pc, #196]	; (8001dbc <HAL_RCC_OscConfig+0x478>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cfc:	f7ff fb78 	bl	80013f0 <HAL_GetTick>
 8001d00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d02:	e008      	b.n	8001d16 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d04:	f7ff fb74 	bl	80013f0 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e087      	b.n	8001e26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d16:	4b27      	ldr	r3, [pc, #156]	; (8001db4 <HAL_RCC_OscConfig+0x470>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1f0      	bne.n	8001d04 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	69da      	ldr	r2, [r3, #28]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a1b      	ldr	r3, [r3, #32]
 8001d2a:	431a      	orrs	r2, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d30:	019b      	lsls	r3, r3, #6
 8001d32:	431a      	orrs	r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d38:	085b      	lsrs	r3, r3, #1
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	041b      	lsls	r3, r3, #16
 8001d3e:	431a      	orrs	r2, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d44:	061b      	lsls	r3, r3, #24
 8001d46:	491b      	ldr	r1, [pc, #108]	; (8001db4 <HAL_RCC_OscConfig+0x470>)
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d4c:	4b1b      	ldr	r3, [pc, #108]	; (8001dbc <HAL_RCC_OscConfig+0x478>)
 8001d4e:	2201      	movs	r2, #1
 8001d50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d52:	f7ff fb4d 	bl	80013f0 <HAL_GetTick>
 8001d56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d58:	e008      	b.n	8001d6c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d5a:	f7ff fb49 	bl	80013f0 <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d901      	bls.n	8001d6c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e05c      	b.n	8001e26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d6c:	4b11      	ldr	r3, [pc, #68]	; (8001db4 <HAL_RCC_OscConfig+0x470>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d0f0      	beq.n	8001d5a <HAL_RCC_OscConfig+0x416>
 8001d78:	e054      	b.n	8001e24 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d7a:	4b10      	ldr	r3, [pc, #64]	; (8001dbc <HAL_RCC_OscConfig+0x478>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d80:	f7ff fb36 	bl	80013f0 <HAL_GetTick>
 8001d84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d86:	e008      	b.n	8001d9a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d88:	f7ff fb32 	bl	80013f0 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e045      	b.n	8001e26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d9a:	4b06      	ldr	r3, [pc, #24]	; (8001db4 <HAL_RCC_OscConfig+0x470>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d1f0      	bne.n	8001d88 <HAL_RCC_OscConfig+0x444>
 8001da6:	e03d      	b.n	8001e24 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	699b      	ldr	r3, [r3, #24]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d107      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e038      	b.n	8001e26 <HAL_RCC_OscConfig+0x4e2>
 8001db4:	40023800 	.word	0x40023800
 8001db8:	40007000 	.word	0x40007000
 8001dbc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001dc0:	4b1b      	ldr	r3, [pc, #108]	; (8001e30 <HAL_RCC_OscConfig+0x4ec>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	699b      	ldr	r3, [r3, #24]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d028      	beq.n	8001e20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d121      	bne.n	8001e20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d11a      	bne.n	8001e20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001dea:	68fa      	ldr	r2, [r7, #12]
 8001dec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001df0:	4013      	ands	r3, r2
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001df6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d111      	bne.n	8001e20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e06:	085b      	lsrs	r3, r3, #1
 8001e08:	3b01      	subs	r3, #1
 8001e0a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d107      	bne.n	8001e20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e1a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d001      	beq.n	8001e24 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e000      	b.n	8001e26 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3718      	adds	r7, #24
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	40023800 	.word	0x40023800

08001e34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d101      	bne.n	8001e48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e0cc      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e48:	4b68      	ldr	r3, [pc, #416]	; (8001fec <HAL_RCC_ClockConfig+0x1b8>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0307 	and.w	r3, r3, #7
 8001e50:	683a      	ldr	r2, [r7, #0]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d90c      	bls.n	8001e70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e56:	4b65      	ldr	r3, [pc, #404]	; (8001fec <HAL_RCC_ClockConfig+0x1b8>)
 8001e58:	683a      	ldr	r2, [r7, #0]
 8001e5a:	b2d2      	uxtb	r2, r2
 8001e5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e5e:	4b63      	ldr	r3, [pc, #396]	; (8001fec <HAL_RCC_ClockConfig+0x1b8>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0307 	and.w	r3, r3, #7
 8001e66:	683a      	ldr	r2, [r7, #0]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d001      	beq.n	8001e70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e0b8      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0302 	and.w	r3, r3, #2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d020      	beq.n	8001ebe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0304 	and.w	r3, r3, #4
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d005      	beq.n	8001e94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e88:	4b59      	ldr	r3, [pc, #356]	; (8001ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	4a58      	ldr	r2, [pc, #352]	; (8001ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0308 	and.w	r3, r3, #8
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d005      	beq.n	8001eac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ea0:	4b53      	ldr	r3, [pc, #332]	; (8001ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	4a52      	ldr	r2, [pc, #328]	; (8001ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ea6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001eaa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eac:	4b50      	ldr	r3, [pc, #320]	; (8001ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	494d      	ldr	r1, [pc, #308]	; (8001ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d044      	beq.n	8001f54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d107      	bne.n	8001ee2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ed2:	4b47      	ldr	r3, [pc, #284]	; (8001ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d119      	bne.n	8001f12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e07f      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d003      	beq.n	8001ef2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001eee:	2b03      	cmp	r3, #3
 8001ef0:	d107      	bne.n	8001f02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ef2:	4b3f      	ldr	r3, [pc, #252]	; (8001ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d109      	bne.n	8001f12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e06f      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f02:	4b3b      	ldr	r3, [pc, #236]	; (8001ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d101      	bne.n	8001f12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e067      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f12:	4b37      	ldr	r3, [pc, #220]	; (8001ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f023 0203 	bic.w	r2, r3, #3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	4934      	ldr	r1, [pc, #208]	; (8001ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f20:	4313      	orrs	r3, r2
 8001f22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f24:	f7ff fa64 	bl	80013f0 <HAL_GetTick>
 8001f28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f2a:	e00a      	b.n	8001f42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f2c:	f7ff fa60 	bl	80013f0 <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e04f      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f42:	4b2b      	ldr	r3, [pc, #172]	; (8001ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f003 020c 	and.w	r2, r3, #12
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d1eb      	bne.n	8001f2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f54:	4b25      	ldr	r3, [pc, #148]	; (8001fec <HAL_RCC_ClockConfig+0x1b8>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0307 	and.w	r3, r3, #7
 8001f5c:	683a      	ldr	r2, [r7, #0]
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d20c      	bcs.n	8001f7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f62:	4b22      	ldr	r3, [pc, #136]	; (8001fec <HAL_RCC_ClockConfig+0x1b8>)
 8001f64:	683a      	ldr	r2, [r7, #0]
 8001f66:	b2d2      	uxtb	r2, r2
 8001f68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f6a:	4b20      	ldr	r3, [pc, #128]	; (8001fec <HAL_RCC_ClockConfig+0x1b8>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0307 	and.w	r3, r3, #7
 8001f72:	683a      	ldr	r2, [r7, #0]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d001      	beq.n	8001f7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e032      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0304 	and.w	r3, r3, #4
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d008      	beq.n	8001f9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f88:	4b19      	ldr	r3, [pc, #100]	; (8001ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	4916      	ldr	r1, [pc, #88]	; (8001ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f96:	4313      	orrs	r3, r2
 8001f98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0308 	and.w	r3, r3, #8
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d009      	beq.n	8001fba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fa6:	4b12      	ldr	r3, [pc, #72]	; (8001ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	490e      	ldr	r1, [pc, #56]	; (8001ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001fba:	f000 f821 	bl	8002000 <HAL_RCC_GetSysClockFreq>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	4b0b      	ldr	r3, [pc, #44]	; (8001ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	091b      	lsrs	r3, r3, #4
 8001fc6:	f003 030f 	and.w	r3, r3, #15
 8001fca:	490a      	ldr	r1, [pc, #40]	; (8001ff4 <HAL_RCC_ClockConfig+0x1c0>)
 8001fcc:	5ccb      	ldrb	r3, [r1, r3]
 8001fce:	fa22 f303 	lsr.w	r3, r2, r3
 8001fd2:	4a09      	ldr	r2, [pc, #36]	; (8001ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001fd6:	4b09      	ldr	r3, [pc, #36]	; (8001ffc <HAL_RCC_ClockConfig+0x1c8>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7ff f9d8 	bl	8001390 <HAL_InitTick>

  return HAL_OK;
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3710      	adds	r7, #16
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	40023c00 	.word	0x40023c00
 8001ff0:	40023800 	.word	0x40023800
 8001ff4:	08006e10 	.word	0x08006e10
 8001ff8:	20000000 	.word	0x20000000
 8001ffc:	20000004 	.word	0x20000004

08002000 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002000:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002004:	b090      	sub	sp, #64	; 0x40
 8002006:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002008:	2300      	movs	r3, #0
 800200a:	637b      	str	r3, [r7, #52]	; 0x34
 800200c:	2300      	movs	r3, #0
 800200e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002010:	2300      	movs	r3, #0
 8002012:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002014:	2300      	movs	r3, #0
 8002016:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002018:	4b59      	ldr	r3, [pc, #356]	; (8002180 <HAL_RCC_GetSysClockFreq+0x180>)
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f003 030c 	and.w	r3, r3, #12
 8002020:	2b08      	cmp	r3, #8
 8002022:	d00d      	beq.n	8002040 <HAL_RCC_GetSysClockFreq+0x40>
 8002024:	2b08      	cmp	r3, #8
 8002026:	f200 80a1 	bhi.w	800216c <HAL_RCC_GetSysClockFreq+0x16c>
 800202a:	2b00      	cmp	r3, #0
 800202c:	d002      	beq.n	8002034 <HAL_RCC_GetSysClockFreq+0x34>
 800202e:	2b04      	cmp	r3, #4
 8002030:	d003      	beq.n	800203a <HAL_RCC_GetSysClockFreq+0x3a>
 8002032:	e09b      	b.n	800216c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002034:	4b53      	ldr	r3, [pc, #332]	; (8002184 <HAL_RCC_GetSysClockFreq+0x184>)
 8002036:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002038:	e09b      	b.n	8002172 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800203a:	4b53      	ldr	r3, [pc, #332]	; (8002188 <HAL_RCC_GetSysClockFreq+0x188>)
 800203c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800203e:	e098      	b.n	8002172 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002040:	4b4f      	ldr	r3, [pc, #316]	; (8002180 <HAL_RCC_GetSysClockFreq+0x180>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002048:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800204a:	4b4d      	ldr	r3, [pc, #308]	; (8002180 <HAL_RCC_GetSysClockFreq+0x180>)
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d028      	beq.n	80020a8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002056:	4b4a      	ldr	r3, [pc, #296]	; (8002180 <HAL_RCC_GetSysClockFreq+0x180>)
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	099b      	lsrs	r3, r3, #6
 800205c:	2200      	movs	r2, #0
 800205e:	623b      	str	r3, [r7, #32]
 8002060:	627a      	str	r2, [r7, #36]	; 0x24
 8002062:	6a3b      	ldr	r3, [r7, #32]
 8002064:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002068:	2100      	movs	r1, #0
 800206a:	4b47      	ldr	r3, [pc, #284]	; (8002188 <HAL_RCC_GetSysClockFreq+0x188>)
 800206c:	fb03 f201 	mul.w	r2, r3, r1
 8002070:	2300      	movs	r3, #0
 8002072:	fb00 f303 	mul.w	r3, r0, r3
 8002076:	4413      	add	r3, r2
 8002078:	4a43      	ldr	r2, [pc, #268]	; (8002188 <HAL_RCC_GetSysClockFreq+0x188>)
 800207a:	fba0 1202 	umull	r1, r2, r0, r2
 800207e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002080:	460a      	mov	r2, r1
 8002082:	62ba      	str	r2, [r7, #40]	; 0x28
 8002084:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002086:	4413      	add	r3, r2
 8002088:	62fb      	str	r3, [r7, #44]	; 0x2c
 800208a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800208c:	2200      	movs	r2, #0
 800208e:	61bb      	str	r3, [r7, #24]
 8002090:	61fa      	str	r2, [r7, #28]
 8002092:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002096:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800209a:	f7fe fd8d 	bl	8000bb8 <__aeabi_uldivmod>
 800209e:	4602      	mov	r2, r0
 80020a0:	460b      	mov	r3, r1
 80020a2:	4613      	mov	r3, r2
 80020a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020a6:	e053      	b.n	8002150 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020a8:	4b35      	ldr	r3, [pc, #212]	; (8002180 <HAL_RCC_GetSysClockFreq+0x180>)
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	099b      	lsrs	r3, r3, #6
 80020ae:	2200      	movs	r2, #0
 80020b0:	613b      	str	r3, [r7, #16]
 80020b2:	617a      	str	r2, [r7, #20]
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80020ba:	f04f 0b00 	mov.w	fp, #0
 80020be:	4652      	mov	r2, sl
 80020c0:	465b      	mov	r3, fp
 80020c2:	f04f 0000 	mov.w	r0, #0
 80020c6:	f04f 0100 	mov.w	r1, #0
 80020ca:	0159      	lsls	r1, r3, #5
 80020cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020d0:	0150      	lsls	r0, r2, #5
 80020d2:	4602      	mov	r2, r0
 80020d4:	460b      	mov	r3, r1
 80020d6:	ebb2 080a 	subs.w	r8, r2, sl
 80020da:	eb63 090b 	sbc.w	r9, r3, fp
 80020de:	f04f 0200 	mov.w	r2, #0
 80020e2:	f04f 0300 	mov.w	r3, #0
 80020e6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80020ea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80020ee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80020f2:	ebb2 0408 	subs.w	r4, r2, r8
 80020f6:	eb63 0509 	sbc.w	r5, r3, r9
 80020fa:	f04f 0200 	mov.w	r2, #0
 80020fe:	f04f 0300 	mov.w	r3, #0
 8002102:	00eb      	lsls	r3, r5, #3
 8002104:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002108:	00e2      	lsls	r2, r4, #3
 800210a:	4614      	mov	r4, r2
 800210c:	461d      	mov	r5, r3
 800210e:	eb14 030a 	adds.w	r3, r4, sl
 8002112:	603b      	str	r3, [r7, #0]
 8002114:	eb45 030b 	adc.w	r3, r5, fp
 8002118:	607b      	str	r3, [r7, #4]
 800211a:	f04f 0200 	mov.w	r2, #0
 800211e:	f04f 0300 	mov.w	r3, #0
 8002122:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002126:	4629      	mov	r1, r5
 8002128:	028b      	lsls	r3, r1, #10
 800212a:	4621      	mov	r1, r4
 800212c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002130:	4621      	mov	r1, r4
 8002132:	028a      	lsls	r2, r1, #10
 8002134:	4610      	mov	r0, r2
 8002136:	4619      	mov	r1, r3
 8002138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800213a:	2200      	movs	r2, #0
 800213c:	60bb      	str	r3, [r7, #8]
 800213e:	60fa      	str	r2, [r7, #12]
 8002140:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002144:	f7fe fd38 	bl	8000bb8 <__aeabi_uldivmod>
 8002148:	4602      	mov	r2, r0
 800214a:	460b      	mov	r3, r1
 800214c:	4613      	mov	r3, r2
 800214e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002150:	4b0b      	ldr	r3, [pc, #44]	; (8002180 <HAL_RCC_GetSysClockFreq+0x180>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	0c1b      	lsrs	r3, r3, #16
 8002156:	f003 0303 	and.w	r3, r3, #3
 800215a:	3301      	adds	r3, #1
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002160:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002164:	fbb2 f3f3 	udiv	r3, r2, r3
 8002168:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800216a:	e002      	b.n	8002172 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800216c:	4b05      	ldr	r3, [pc, #20]	; (8002184 <HAL_RCC_GetSysClockFreq+0x184>)
 800216e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002170:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002174:	4618      	mov	r0, r3
 8002176:	3740      	adds	r7, #64	; 0x40
 8002178:	46bd      	mov	sp, r7
 800217a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800217e:	bf00      	nop
 8002180:	40023800 	.word	0x40023800
 8002184:	00f42400 	.word	0x00f42400
 8002188:	017d7840 	.word	0x017d7840

0800218c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f103 0208 	add.w	r2, r3, #8
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f04f 32ff 	mov.w	r2, #4294967295
 80021a4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f103 0208 	add.w	r2, r3, #8
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f103 0208 	add.w	r2, r3, #8
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80021c0:	bf00      	nop
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80021da:	bf00      	nop
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr

080021e6 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80021e6:	b480      	push	{r7}
 80021e8:	b085      	sub	sp, #20
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
 80021ee:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021fc:	d103      	bne.n	8002206 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	691b      	ldr	r3, [r3, #16]
 8002202:	60fb      	str	r3, [r7, #12]
 8002204:	e00c      	b.n	8002220 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	3308      	adds	r3, #8
 800220a:	60fb      	str	r3, [r7, #12]
 800220c:	e002      	b.n	8002214 <vListInsert+0x2e>
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	60fb      	str	r3, [r7, #12]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68ba      	ldr	r2, [r7, #8]
 800221c:	429a      	cmp	r2, r3
 800221e:	d2f6      	bcs.n	800220e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	685a      	ldr	r2, [r3, #4]
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	683a      	ldr	r2, [r7, #0]
 800222e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	68fa      	ldr	r2, [r7, #12]
 8002234:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	683a      	ldr	r2, [r7, #0]
 800223a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	1c5a      	adds	r2, r3, #1
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	601a      	str	r2, [r3, #0]
}
 800224c:	bf00      	nop
 800224e:	3714      	adds	r7, #20
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	691b      	ldr	r3, [r3, #16]
 8002264:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	6892      	ldr	r2, [r2, #8]
 800226e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	6852      	ldr	r2, [r2, #4]
 8002278:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	429a      	cmp	r2, r3
 8002282:	d103      	bne.n	800228c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689a      	ldr	r2, [r3, #8]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	1e5a      	subs	r2, r3, #1
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3714      	adds	r7, #20
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b086      	sub	sp, #24
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80022b6:	2301      	movs	r3, #1
 80022b8:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d10a      	bne.n	80022da <xQueueGenericReset+0x2e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80022c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022c8:	f383 8811 	msr	BASEPRI, r3
 80022cc:	f3bf 8f6f 	isb	sy
 80022d0:	f3bf 8f4f 	dsb	sy
 80022d4:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80022d6:	bf00      	nop
 80022d8:	e7fe      	b.n	80022d8 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d05d      	beq.n	800239c <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d059      	beq.n	800239c <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022f0:	2100      	movs	r1, #0
 80022f2:	fba3 2302 	umull	r2, r3, r3, r2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d000      	beq.n	80022fc <xQueueGenericReset+0x50>
 80022fa:	2101      	movs	r1, #1
 80022fc:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d14c      	bne.n	800239c <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8002302:	f001 fe09 	bl	8003f18 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800230e:	6939      	ldr	r1, [r7, #16]
 8002310:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002312:	fb01 f303 	mul.w	r3, r1, r3
 8002316:	441a      	add	r2, r3
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	2200      	movs	r2, #0
 8002320:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002332:	3b01      	subs	r3, #1
 8002334:	6939      	ldr	r1, [r7, #16]
 8002336:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002338:	fb01 f303 	mul.w	r3, r1, r3
 800233c:	441a      	add	r2, r3
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	22ff      	movs	r2, #255	; 0xff
 8002346:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	22ff      	movs	r2, #255	; 0xff
 800234e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d114      	bne.n	8002382 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	691b      	ldr	r3, [r3, #16]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d01a      	beq.n	8002396 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	3310      	adds	r3, #16
 8002364:	4618      	mov	r0, r3
 8002366:	f000 ff79 	bl	800325c <xTaskRemoveFromEventList>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d012      	beq.n	8002396 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002370:	4b15      	ldr	r3, [pc, #84]	; (80023c8 <xQueueGenericReset+0x11c>)
 8002372:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	f3bf 8f4f 	dsb	sy
 800237c:	f3bf 8f6f 	isb	sy
 8002380:	e009      	b.n	8002396 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	3310      	adds	r3, #16
 8002386:	4618      	mov	r0, r3
 8002388:	f7ff ff00 	bl	800218c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	3324      	adds	r3, #36	; 0x24
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff fefb 	bl	800218c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002396:	f001 fdef 	bl	8003f78 <vPortExitCritical>
 800239a:	e001      	b.n	80023a0 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 800239c:	2300      	movs	r3, #0
 800239e:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d10a      	bne.n	80023bc <xQueueGenericReset+0x110>
        __asm volatile
 80023a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023aa:	f383 8811 	msr	BASEPRI, r3
 80023ae:	f3bf 8f6f 	isb	sy
 80023b2:	f3bf 8f4f 	dsb	sy
 80023b6:	60bb      	str	r3, [r7, #8]
    }
 80023b8:	bf00      	nop
 80023ba:	e7fe      	b.n	80023ba <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80023bc:	697b      	ldr	r3, [r7, #20]
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3718      	adds	r7, #24
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	e000ed04 	.word	0xe000ed04

080023cc <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b08a      	sub	sp, #40	; 0x28
 80023d0:	af02      	add	r7, sp, #8
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	4613      	mov	r3, r2
 80023d8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80023da:	2300      	movs	r3, #0
 80023dc:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d02e      	beq.n	8002442 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80023e4:	2100      	movs	r1, #0
 80023e6:	68ba      	ldr	r2, [r7, #8]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	fba3 2302 	umull	r2, r3, r3, r2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d000      	beq.n	80023f4 <xQueueGenericCreate+0x28>
 80023f2:	2101      	movs	r1, #1
 80023f4:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d123      	bne.n	8002442 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	68ba      	ldr	r2, [r7, #8]
 80023fe:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002402:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002406:	d81c      	bhi.n	8002442 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	68ba      	ldr	r2, [r7, #8]
 800240c:	fb02 f303 	mul.w	r3, r2, r3
 8002410:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	3350      	adds	r3, #80	; 0x50
 8002416:	4618      	mov	r0, r3
 8002418:	f001 fe60 	bl	80040dc <pvPortMalloc>
 800241c:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d01c      	beq.n	800245e <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	3350      	adds	r3, #80	; 0x50
 800242c:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800242e:	79fa      	ldrb	r2, [r7, #7]
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	9300      	str	r3, [sp, #0]
 8002434:	4613      	mov	r3, r2
 8002436:	697a      	ldr	r2, [r7, #20]
 8002438:	68b9      	ldr	r1, [r7, #8]
 800243a:	68f8      	ldr	r0, [r7, #12]
 800243c:	f000 f814 	bl	8002468 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002440:	e00d      	b.n	800245e <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d10a      	bne.n	800245e <xQueueGenericCreate+0x92>
        __asm volatile
 8002448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800244c:	f383 8811 	msr	BASEPRI, r3
 8002450:	f3bf 8f6f 	isb	sy
 8002454:	f3bf 8f4f 	dsb	sy
 8002458:	613b      	str	r3, [r7, #16]
    }
 800245a:	bf00      	nop
 800245c:	e7fe      	b.n	800245c <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800245e:	69fb      	ldr	r3, [r7, #28]
    }
 8002460:	4618      	mov	r0, r3
 8002462:	3720      	adds	r7, #32
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	60b9      	str	r1, [r7, #8]
 8002472:	607a      	str	r2, [r7, #4]
 8002474:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d103      	bne.n	8002484 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	601a      	str	r2, [r3, #0]
 8002482:	e002      	b.n	800248a <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	68fa      	ldr	r2, [r7, #12]
 800248e:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	68ba      	ldr	r2, [r7, #8]
 8002494:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002496:	2101      	movs	r1, #1
 8002498:	69b8      	ldr	r0, [r7, #24]
 800249a:	f7ff ff07 	bl	80022ac <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	78fa      	ldrb	r2, [r7, #3]
 80024a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80024a6:	bf00      	nop
 80024a8:	3710      	adds	r7, #16
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
	...

080024b0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b08c      	sub	sp, #48	; 0x30
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80024bc:	2300      	movs	r3, #0
 80024be:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80024c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d10a      	bne.n	80024e0 <xQueueReceive+0x30>
        __asm volatile
 80024ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024ce:	f383 8811 	msr	BASEPRI, r3
 80024d2:	f3bf 8f6f 	isb	sy
 80024d6:	f3bf 8f4f 	dsb	sy
 80024da:	623b      	str	r3, [r7, #32]
    }
 80024dc:	bf00      	nop
 80024de:	e7fe      	b.n	80024de <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d103      	bne.n	80024ee <xQueueReceive+0x3e>
 80024e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d101      	bne.n	80024f2 <xQueueReceive+0x42>
 80024ee:	2301      	movs	r3, #1
 80024f0:	e000      	b.n	80024f4 <xQueueReceive+0x44>
 80024f2:	2300      	movs	r3, #0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d10a      	bne.n	800250e <xQueueReceive+0x5e>
        __asm volatile
 80024f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024fc:	f383 8811 	msr	BASEPRI, r3
 8002500:	f3bf 8f6f 	isb	sy
 8002504:	f3bf 8f4f 	dsb	sy
 8002508:	61fb      	str	r3, [r7, #28]
    }
 800250a:	bf00      	nop
 800250c:	e7fe      	b.n	800250c <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800250e:	f001 f8b5 	bl	800367c <xTaskGetSchedulerState>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d102      	bne.n	800251e <xQueueReceive+0x6e>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d101      	bne.n	8002522 <xQueueReceive+0x72>
 800251e:	2301      	movs	r3, #1
 8002520:	e000      	b.n	8002524 <xQueueReceive+0x74>
 8002522:	2300      	movs	r3, #0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d10a      	bne.n	800253e <xQueueReceive+0x8e>
        __asm volatile
 8002528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800252c:	f383 8811 	msr	BASEPRI, r3
 8002530:	f3bf 8f6f 	isb	sy
 8002534:	f3bf 8f4f 	dsb	sy
 8002538:	61bb      	str	r3, [r7, #24]
    }
 800253a:	bf00      	nop
 800253c:	e7fe      	b.n	800253c <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800253e:	f001 fceb 	bl	8003f18 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002546:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254a:	2b00      	cmp	r3, #0
 800254c:	d01f      	beq.n	800258e <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800254e:	68b9      	ldr	r1, [r7, #8]
 8002550:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002552:	f000 f88d 	bl	8002670 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002558:	1e5a      	subs	r2, r3, #1
 800255a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800255c:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800255e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00f      	beq.n	8002586 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002568:	3310      	adds	r3, #16
 800256a:	4618      	mov	r0, r3
 800256c:	f000 fe76 	bl	800325c <xTaskRemoveFromEventList>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d007      	beq.n	8002586 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002576:	4b3d      	ldr	r3, [pc, #244]	; (800266c <xQueueReceive+0x1bc>)
 8002578:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800257c:	601a      	str	r2, [r3, #0]
 800257e:	f3bf 8f4f 	dsb	sy
 8002582:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002586:	f001 fcf7 	bl	8003f78 <vPortExitCritical>
                return pdPASS;
 800258a:	2301      	movs	r3, #1
 800258c:	e069      	b.n	8002662 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d103      	bne.n	800259c <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002594:	f001 fcf0 	bl	8003f78 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8002598:	2300      	movs	r3, #0
 800259a:	e062      	b.n	8002662 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 800259c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d106      	bne.n	80025b0 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80025a2:	f107 0310 	add.w	r3, r7, #16
 80025a6:	4618      	mov	r0, r3
 80025a8:	f000 ff2e 	bl	8003408 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80025ac:	2301      	movs	r3, #1
 80025ae:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80025b0:	f001 fce2 	bl	8003f78 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80025b4:	f000 fb5c 	bl	8002c70 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80025b8:	f001 fcae 	bl	8003f18 <vPortEnterCritical>
 80025bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80025c2:	b25b      	sxtb	r3, r3
 80025c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025c8:	d103      	bne.n	80025d2 <xQueueReceive+0x122>
 80025ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80025d8:	b25b      	sxtb	r3, r3
 80025da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025de:	d103      	bne.n	80025e8 <xQueueReceive+0x138>
 80025e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80025e8:	f001 fcc6 	bl	8003f78 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80025ec:	1d3a      	adds	r2, r7, #4
 80025ee:	f107 0310 	add.w	r3, r7, #16
 80025f2:	4611      	mov	r1, r2
 80025f4:	4618      	mov	r0, r3
 80025f6:	f000 ff1d 	bl	8003434 <xTaskCheckForTimeOut>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d123      	bne.n	8002648 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002600:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002602:	f000 f8ad 	bl	8002760 <prvIsQueueEmpty>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d017      	beq.n	800263c <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800260c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800260e:	3324      	adds	r3, #36	; 0x24
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	4611      	mov	r1, r2
 8002614:	4618      	mov	r0, r3
 8002616:	f000 fdb7 	bl	8003188 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800261a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800261c:	f000 f84e 	bl	80026bc <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002620:	f000 fb34 	bl	8002c8c <xTaskResumeAll>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d189      	bne.n	800253e <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 800262a:	4b10      	ldr	r3, [pc, #64]	; (800266c <xQueueReceive+0x1bc>)
 800262c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002630:	601a      	str	r2, [r3, #0]
 8002632:	f3bf 8f4f 	dsb	sy
 8002636:	f3bf 8f6f 	isb	sy
 800263a:	e780      	b.n	800253e <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800263c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800263e:	f000 f83d 	bl	80026bc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002642:	f000 fb23 	bl	8002c8c <xTaskResumeAll>
 8002646:	e77a      	b.n	800253e <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002648:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800264a:	f000 f837 	bl	80026bc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800264e:	f000 fb1d 	bl	8002c8c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002652:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002654:	f000 f884 	bl	8002760 <prvIsQueueEmpty>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	f43f af6f 	beq.w	800253e <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8002660:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002662:	4618      	mov	r0, r3
 8002664:	3730      	adds	r7, #48	; 0x30
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	e000ed04 	.word	0xe000ed04

08002670 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267e:	2b00      	cmp	r3, #0
 8002680:	d018      	beq.n	80026b4 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	68da      	ldr	r2, [r3, #12]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268a:	441a      	add	r2, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	68da      	ldr	r2, [r3, #12]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	429a      	cmp	r2, r3
 800269a:	d303      	bcc.n	80026a4 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	68d9      	ldr	r1, [r3, #12]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ac:	461a      	mov	r2, r3
 80026ae:	6838      	ldr	r0, [r7, #0]
 80026b0:	f002 fcb8 	bl	8005024 <memcpy>
    }
}
 80026b4:	bf00      	nop
 80026b6:	3708      	adds	r7, #8
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80026c4:	f001 fc28 	bl	8003f18 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80026ce:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80026d0:	e011      	b.n	80026f6 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d012      	beq.n	8002700 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	3324      	adds	r3, #36	; 0x24
 80026de:	4618      	mov	r0, r3
 80026e0:	f000 fdbc 	bl	800325c <xTaskRemoveFromEventList>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80026ea:	f000 ff09 	bl	8003500 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80026ee:	7bfb      	ldrb	r3, [r7, #15]
 80026f0:	3b01      	subs	r3, #1
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80026f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	dce9      	bgt.n	80026d2 <prvUnlockQueue+0x16>
 80026fe:	e000      	b.n	8002702 <prvUnlockQueue+0x46>
                    break;
 8002700:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	22ff      	movs	r2, #255	; 0xff
 8002706:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800270a:	f001 fc35 	bl	8003f78 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800270e:	f001 fc03 	bl	8003f18 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002718:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800271a:	e011      	b.n	8002740 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	691b      	ldr	r3, [r3, #16]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d012      	beq.n	800274a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	3310      	adds	r3, #16
 8002728:	4618      	mov	r0, r3
 800272a:	f000 fd97 	bl	800325c <xTaskRemoveFromEventList>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002734:	f000 fee4 	bl	8003500 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002738:	7bbb      	ldrb	r3, [r7, #14]
 800273a:	3b01      	subs	r3, #1
 800273c:	b2db      	uxtb	r3, r3
 800273e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002740:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002744:	2b00      	cmp	r3, #0
 8002746:	dce9      	bgt.n	800271c <prvUnlockQueue+0x60>
 8002748:	e000      	b.n	800274c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800274a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	22ff      	movs	r2, #255	; 0xff
 8002750:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002754:	f001 fc10 	bl	8003f78 <vPortExitCritical>
}
 8002758:	bf00      	nop
 800275a:	3710      	adds	r7, #16
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002768:	f001 fbd6 	bl	8003f18 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002770:	2b00      	cmp	r3, #0
 8002772:	d102      	bne.n	800277a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002774:	2301      	movs	r3, #1
 8002776:	60fb      	str	r3, [r7, #12]
 8002778:	e001      	b.n	800277e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800277a:	2300      	movs	r3, #0
 800277c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800277e:	f001 fbfb 	bl	8003f78 <vPortExitCritical>

    return xReturn;
 8002782:	68fb      	ldr	r3, [r7, #12]
}
 8002784:	4618      	mov	r0, r3
 8002786:	3710      	adds	r7, #16
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800278c:	b480      	push	{r7}
 800278e:	b087      	sub	sp, #28
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8002796:	2300      	movs	r3, #0
 8002798:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d10a      	bne.n	80027b6 <vQueueAddToRegistry+0x2a>
        __asm volatile
 80027a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027a4:	f383 8811 	msr	BASEPRI, r3
 80027a8:	f3bf 8f6f 	isb	sy
 80027ac:	f3bf 8f4f 	dsb	sy
 80027b0:	60fb      	str	r3, [r7, #12]
    }
 80027b2:	bf00      	nop
 80027b4:	e7fe      	b.n	80027b4 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d024      	beq.n	8002806 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80027bc:	2300      	movs	r3, #0
 80027be:	617b      	str	r3, [r7, #20]
 80027c0:	e01e      	b.n	8002800 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80027c2:	4a18      	ldr	r2, [pc, #96]	; (8002824 <vQueueAddToRegistry+0x98>)
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	00db      	lsls	r3, r3, #3
 80027c8:	4413      	add	r3, r2
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d105      	bne.n	80027de <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	00db      	lsls	r3, r3, #3
 80027d6:	4a13      	ldr	r2, [pc, #76]	; (8002824 <vQueueAddToRegistry+0x98>)
 80027d8:	4413      	add	r3, r2
 80027da:	613b      	str	r3, [r7, #16]
                    break;
 80027dc:	e013      	b.n	8002806 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d10a      	bne.n	80027fa <vQueueAddToRegistry+0x6e>
 80027e4:	4a0f      	ldr	r2, [pc, #60]	; (8002824 <vQueueAddToRegistry+0x98>)
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d104      	bne.n	80027fa <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	00db      	lsls	r3, r3, #3
 80027f4:	4a0b      	ldr	r2, [pc, #44]	; (8002824 <vQueueAddToRegistry+0x98>)
 80027f6:	4413      	add	r3, r2
 80027f8:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	3301      	adds	r3, #1
 80027fe:	617b      	str	r3, [r7, #20]
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	2b07      	cmp	r3, #7
 8002804:	d9dd      	bls.n	80027c2 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d005      	beq.n	8002818 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	683a      	ldr	r2, [r7, #0]
 8002810:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8002818:	bf00      	nop
 800281a:	371c      	adds	r7, #28
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr
 8002824:	20000200 	.word	0x20000200

08002828 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002828:	b580      	push	{r7, lr}
 800282a:	b086      	sub	sp, #24
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002838:	f001 fb6e 	bl	8003f18 <vPortEnterCritical>
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002842:	b25b      	sxtb	r3, r3
 8002844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002848:	d103      	bne.n	8002852 <vQueueWaitForMessageRestricted+0x2a>
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002858:	b25b      	sxtb	r3, r3
 800285a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800285e:	d103      	bne.n	8002868 <vQueueWaitForMessageRestricted+0x40>
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	2200      	movs	r2, #0
 8002864:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002868:	f001 fb86 	bl	8003f78 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002870:	2b00      	cmp	r3, #0
 8002872:	d106      	bne.n	8002882 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	3324      	adds	r3, #36	; 0x24
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	68b9      	ldr	r1, [r7, #8]
 800287c:	4618      	mov	r0, r3
 800287e:	f000 fca7 	bl	80031d0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002882:	6978      	ldr	r0, [r7, #20]
 8002884:	f7ff ff1a 	bl	80026bc <prvUnlockQueue>
    }
 8002888:	bf00      	nop
 800288a:	3718      	adds	r7, #24
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002890:	b580      	push	{r7, lr}
 8002892:	b08c      	sub	sp, #48	; 0x30
 8002894:	af04      	add	r7, sp, #16
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	603b      	str	r3, [r7, #0]
 800289c:	4613      	mov	r3, r2
 800289e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80028a0:	88fb      	ldrh	r3, [r7, #6]
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	4618      	mov	r0, r3
 80028a6:	f001 fc19 	bl	80040dc <pvPortMalloc>
 80028aa:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d013      	beq.n	80028da <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80028b2:	2058      	movs	r0, #88	; 0x58
 80028b4:	f001 fc12 	bl	80040dc <pvPortMalloc>
 80028b8:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d008      	beq.n	80028d2 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80028c0:	2258      	movs	r2, #88	; 0x58
 80028c2:	2100      	movs	r1, #0
 80028c4:	69f8      	ldr	r0, [r7, #28]
 80028c6:	f002 fb2e 	bl	8004f26 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	697a      	ldr	r2, [r7, #20]
 80028ce:	631a      	str	r2, [r3, #48]	; 0x30
 80028d0:	e005      	b.n	80028de <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80028d2:	6978      	ldr	r0, [r7, #20]
 80028d4:	f001 fcbc 	bl	8004250 <vPortFree>
 80028d8:	e001      	b.n	80028de <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80028da:	2300      	movs	r3, #0
 80028dc:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d013      	beq.n	800290c <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80028e4:	88fa      	ldrh	r2, [r7, #6]
 80028e6:	2300      	movs	r3, #0
 80028e8:	9303      	str	r3, [sp, #12]
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	9302      	str	r3, [sp, #8]
 80028ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028f0:	9301      	str	r3, [sp, #4]
 80028f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f4:	9300      	str	r3, [sp, #0]
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	68b9      	ldr	r1, [r7, #8]
 80028fa:	68f8      	ldr	r0, [r7, #12]
 80028fc:	f000 f80e 	bl	800291c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002900:	69f8      	ldr	r0, [r7, #28]
 8002902:	f000 f899 	bl	8002a38 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002906:	2301      	movs	r3, #1
 8002908:	61bb      	str	r3, [r7, #24]
 800290a:	e002      	b.n	8002912 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800290c:	f04f 33ff 	mov.w	r3, #4294967295
 8002910:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002912:	69bb      	ldr	r3, [r7, #24]
    }
 8002914:	4618      	mov	r0, r3
 8002916:	3720      	adds	r7, #32
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b088      	sub	sp, #32
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	607a      	str	r2, [r7, #4]
 8002928:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800292a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800292c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	461a      	mov	r2, r3
 8002934:	21a5      	movs	r1, #165	; 0xa5
 8002936:	f002 faf6 	bl	8004f26 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800293a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800293c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002944:	3b01      	subs	r3, #1
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	4413      	add	r3, r2
 800294a:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	f023 0307 	bic.w	r3, r3, #7
 8002952:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	f003 0307 	and.w	r3, r3, #7
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00a      	beq.n	8002974 <prvInitialiseNewTask+0x58>
        __asm volatile
 800295e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002962:	f383 8811 	msr	BASEPRI, r3
 8002966:	f3bf 8f6f 	isb	sy
 800296a:	f3bf 8f4f 	dsb	sy
 800296e:	617b      	str	r3, [r7, #20]
    }
 8002970:	bf00      	nop
 8002972:	e7fe      	b.n	8002972 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d01e      	beq.n	80029b8 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800297a:	2300      	movs	r3, #0
 800297c:	61fb      	str	r3, [r7, #28]
 800297e:	e012      	b.n	80029a6 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002980:	68ba      	ldr	r2, [r7, #8]
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	4413      	add	r3, r2
 8002986:	7819      	ldrb	r1, [r3, #0]
 8002988:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	4413      	add	r3, r2
 800298e:	3334      	adds	r3, #52	; 0x34
 8002990:	460a      	mov	r2, r1
 8002992:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002994:	68ba      	ldr	r2, [r7, #8]
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	4413      	add	r3, r2
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d006      	beq.n	80029ae <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	3301      	adds	r3, #1
 80029a4:	61fb      	str	r3, [r7, #28]
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	2b09      	cmp	r3, #9
 80029aa:	d9e9      	bls.n	8002980 <prvInitialiseNewTask+0x64>
 80029ac:	e000      	b.n	80029b0 <prvInitialiseNewTask+0x94>
            {
                break;
 80029ae:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80029b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80029b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ba:	2b04      	cmp	r3, #4
 80029bc:	d90a      	bls.n	80029d4 <prvInitialiseNewTask+0xb8>
        __asm volatile
 80029be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029c2:	f383 8811 	msr	BASEPRI, r3
 80029c6:	f3bf 8f6f 	isb	sy
 80029ca:	f3bf 8f4f 	dsb	sy
 80029ce:	613b      	str	r3, [r7, #16]
    }
 80029d0:	bf00      	nop
 80029d2:	e7fe      	b.n	80029d2 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80029d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d6:	2b04      	cmp	r3, #4
 80029d8:	d901      	bls.n	80029de <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80029da:	2304      	movs	r3, #4
 80029dc:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80029de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029e2:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80029e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029e8:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80029ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ec:	3304      	adds	r3, #4
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7ff fbec 	bl	80021cc <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80029f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029f6:	3318      	adds	r3, #24
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7ff fbe7 	bl	80021cc <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80029fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a02:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a06:	f1c3 0205 	rsb	r2, r3, #5
 8002a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a0c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a12:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002a14:	683a      	ldr	r2, [r7, #0]
 8002a16:	68f9      	ldr	r1, [r7, #12]
 8002a18:	69b8      	ldr	r0, [r7, #24]
 8002a1a:	f001 f951 	bl	8003cc0 <pxPortInitialiseStack>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a22:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d002      	beq.n	8002a30 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a2e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002a30:	bf00      	nop
 8002a32:	3720      	adds	r7, #32
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002a40:	f001 fa6a 	bl	8003f18 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002a44:	4b40      	ldr	r3, [pc, #256]	; (8002b48 <prvAddNewTaskToReadyList+0x110>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	3301      	adds	r3, #1
 8002a4a:	4a3f      	ldr	r2, [pc, #252]	; (8002b48 <prvAddNewTaskToReadyList+0x110>)
 8002a4c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002a4e:	4b3f      	ldr	r3, [pc, #252]	; (8002b4c <prvAddNewTaskToReadyList+0x114>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d109      	bne.n	8002a6a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002a56:	4a3d      	ldr	r2, [pc, #244]	; (8002b4c <prvAddNewTaskToReadyList+0x114>)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002a5c:	4b3a      	ldr	r3, [pc, #232]	; (8002b48 <prvAddNewTaskToReadyList+0x110>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d110      	bne.n	8002a86 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002a64:	f000 fd70 	bl	8003548 <prvInitialiseTaskLists>
 8002a68:	e00d      	b.n	8002a86 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002a6a:	4b39      	ldr	r3, [pc, #228]	; (8002b50 <prvAddNewTaskToReadyList+0x118>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d109      	bne.n	8002a86 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002a72:	4b36      	ldr	r3, [pc, #216]	; (8002b4c <prvAddNewTaskToReadyList+0x114>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d802      	bhi.n	8002a86 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002a80:	4a32      	ldr	r2, [pc, #200]	; (8002b4c <prvAddNewTaskToReadyList+0x114>)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002a86:	4b33      	ldr	r3, [pc, #204]	; (8002b54 <prvAddNewTaskToReadyList+0x11c>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	4a31      	ldr	r2, [pc, #196]	; (8002b54 <prvAddNewTaskToReadyList+0x11c>)
 8002a8e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002a90:	4b30      	ldr	r3, [pc, #192]	; (8002b54 <prvAddNewTaskToReadyList+0x11c>)
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	409a      	lsls	r2, r3
 8002aa0:	4b2d      	ldr	r3, [pc, #180]	; (8002b58 <prvAddNewTaskToReadyList+0x120>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	4a2c      	ldr	r2, [pc, #176]	; (8002b58 <prvAddNewTaskToReadyList+0x120>)
 8002aa8:	6013      	str	r3, [r2, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002aae:	492b      	ldr	r1, [pc, #172]	; (8002b5c <prvAddNewTaskToReadyList+0x124>)
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	4413      	add	r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	440b      	add	r3, r1
 8002aba:	3304      	adds	r3, #4
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	60fb      	str	r3, [r7, #12]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	609a      	str	r2, [r3, #8]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	689a      	ldr	r2, [r3, #8]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	60da      	str	r2, [r3, #12]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	3204      	adds	r2, #4
 8002ad6:	605a      	str	r2, [r3, #4]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	1d1a      	adds	r2, r3, #4
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	609a      	str	r2, [r3, #8]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	4413      	add	r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	4a1b      	ldr	r2, [pc, #108]	; (8002b5c <prvAddNewTaskToReadyList+0x124>)
 8002aee:	441a      	add	r2, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	615a      	str	r2, [r3, #20]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002af8:	4918      	ldr	r1, [pc, #96]	; (8002b5c <prvAddNewTaskToReadyList+0x124>)
 8002afa:	4613      	mov	r3, r2
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	4413      	add	r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	440b      	add	r3, r1
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	1c59      	adds	r1, r3, #1
 8002b08:	4814      	ldr	r0, [pc, #80]	; (8002b5c <prvAddNewTaskToReadyList+0x124>)
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	4413      	add	r3, r2
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	4403      	add	r3, r0
 8002b14:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002b16:	f001 fa2f 	bl	8003f78 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002b1a:	4b0d      	ldr	r3, [pc, #52]	; (8002b50 <prvAddNewTaskToReadyList+0x118>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d00e      	beq.n	8002b40 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002b22:	4b0a      	ldr	r3, [pc, #40]	; (8002b4c <prvAddNewTaskToReadyList+0x114>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d207      	bcs.n	8002b40 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002b30:	4b0b      	ldr	r3, [pc, #44]	; (8002b60 <prvAddNewTaskToReadyList+0x128>)
 8002b32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b36:	601a      	str	r2, [r3, #0]
 8002b38:	f3bf 8f4f 	dsb	sy
 8002b3c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002b40:	bf00      	nop
 8002b42:	3710      	adds	r7, #16
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	20000318 	.word	0x20000318
 8002b4c:	20000240 	.word	0x20000240
 8002b50:	20000324 	.word	0x20000324
 8002b54:	20000334 	.word	0x20000334
 8002b58:	20000320 	.word	0x20000320
 8002b5c:	20000244 	.word	0x20000244
 8002b60:	e000ed04 	.word	0xe000ed04

08002b64 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d017      	beq.n	8002ba6 <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8002b76:	4b13      	ldr	r3, [pc, #76]	; (8002bc4 <vTaskDelay+0x60>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d00a      	beq.n	8002b94 <vTaskDelay+0x30>
        __asm volatile
 8002b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b82:	f383 8811 	msr	BASEPRI, r3
 8002b86:	f3bf 8f6f 	isb	sy
 8002b8a:	f3bf 8f4f 	dsb	sy
 8002b8e:	60bb      	str	r3, [r7, #8]
    }
 8002b90:	bf00      	nop
 8002b92:	e7fe      	b.n	8002b92 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8002b94:	f000 f86c 	bl	8002c70 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002b98:	2100      	movs	r1, #0
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 fd8c 	bl	80036b8 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002ba0:	f000 f874 	bl	8002c8c <xTaskResumeAll>
 8002ba4:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d107      	bne.n	8002bbc <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 8002bac:	4b06      	ldr	r3, [pc, #24]	; (8002bc8 <vTaskDelay+0x64>)
 8002bae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bb2:	601a      	str	r2, [r3, #0]
 8002bb4:	f3bf 8f4f 	dsb	sy
 8002bb8:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002bbc:	bf00      	nop
 8002bbe:	3710      	adds	r7, #16
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	20000340 	.word	0x20000340
 8002bc8:	e000ed04 	.word	0xe000ed04

08002bcc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b086      	sub	sp, #24
 8002bd0:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8002bd2:	4b20      	ldr	r3, [pc, #128]	; (8002c54 <vTaskStartScheduler+0x88>)
 8002bd4:	9301      	str	r3, [sp, #4]
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	9300      	str	r3, [sp, #0]
 8002bda:	2300      	movs	r3, #0
 8002bdc:	2282      	movs	r2, #130	; 0x82
 8002bde:	491e      	ldr	r1, [pc, #120]	; (8002c58 <vTaskStartScheduler+0x8c>)
 8002be0:	481e      	ldr	r0, [pc, #120]	; (8002c5c <vTaskStartScheduler+0x90>)
 8002be2:	f7ff fe55 	bl	8002890 <xTaskCreate>
 8002be6:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d102      	bne.n	8002bf4 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8002bee:	f000 fde3 	bl	80037b8 <xTimerCreateTimerTask>
 8002bf2:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d116      	bne.n	8002c28 <vTaskStartScheduler+0x5c>
        __asm volatile
 8002bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bfe:	f383 8811 	msr	BASEPRI, r3
 8002c02:	f3bf 8f6f 	isb	sy
 8002c06:	f3bf 8f4f 	dsb	sy
 8002c0a:	60bb      	str	r3, [r7, #8]
    }
 8002c0c:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002c0e:	4b14      	ldr	r3, [pc, #80]	; (8002c60 <vTaskStartScheduler+0x94>)
 8002c10:	f04f 32ff 	mov.w	r2, #4294967295
 8002c14:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002c16:	4b13      	ldr	r3, [pc, #76]	; (8002c64 <vTaskStartScheduler+0x98>)
 8002c18:	2201      	movs	r2, #1
 8002c1a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002c1c:	4b12      	ldr	r3, [pc, #72]	; (8002c68 <vTaskStartScheduler+0x9c>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8002c22:	f001 f8d7 	bl	8003dd4 <xPortStartScheduler>
 8002c26:	e00e      	b.n	8002c46 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c2e:	d10a      	bne.n	8002c46 <vTaskStartScheduler+0x7a>
        __asm volatile
 8002c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c34:	f383 8811 	msr	BASEPRI, r3
 8002c38:	f3bf 8f6f 	isb	sy
 8002c3c:	f3bf 8f4f 	dsb	sy
 8002c40:	607b      	str	r3, [r7, #4]
    }
 8002c42:	bf00      	nop
 8002c44:	e7fe      	b.n	8002c44 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002c46:	4b09      	ldr	r3, [pc, #36]	; (8002c6c <vTaskStartScheduler+0xa0>)
 8002c48:	681b      	ldr	r3, [r3, #0]
}
 8002c4a:	bf00      	nop
 8002c4c:	3710      	adds	r7, #16
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	2000033c 	.word	0x2000033c
 8002c58:	08006df8 	.word	0x08006df8
 8002c5c:	08003519 	.word	0x08003519
 8002c60:	20000338 	.word	0x20000338
 8002c64:	20000324 	.word	0x20000324
 8002c68:	2000031c 	.word	0x2000031c
 8002c6c:	2000000c 	.word	0x2000000c

08002c70 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002c74:	4b04      	ldr	r3, [pc, #16]	; (8002c88 <vTaskSuspendAll+0x18>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	3301      	adds	r3, #1
 8002c7a:	4a03      	ldr	r2, [pc, #12]	; (8002c88 <vTaskSuspendAll+0x18>)
 8002c7c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002c7e:	bf00      	nop
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr
 8002c88:	20000340 	.word	0x20000340

08002c8c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b088      	sub	sp, #32
 8002c90:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002c92:	2300      	movs	r3, #0
 8002c94:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002c96:	2300      	movs	r3, #0
 8002c98:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002c9a:	4b71      	ldr	r3, [pc, #452]	; (8002e60 <xTaskResumeAll+0x1d4>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d10a      	bne.n	8002cb8 <xTaskResumeAll+0x2c>
        __asm volatile
 8002ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ca6:	f383 8811 	msr	BASEPRI, r3
 8002caa:	f3bf 8f6f 	isb	sy
 8002cae:	f3bf 8f4f 	dsb	sy
 8002cb2:	607b      	str	r3, [r7, #4]
    }
 8002cb4:	bf00      	nop
 8002cb6:	e7fe      	b.n	8002cb6 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002cb8:	f001 f92e 	bl	8003f18 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002cbc:	4b68      	ldr	r3, [pc, #416]	; (8002e60 <xTaskResumeAll+0x1d4>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	4a67      	ldr	r2, [pc, #412]	; (8002e60 <xTaskResumeAll+0x1d4>)
 8002cc4:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002cc6:	4b66      	ldr	r3, [pc, #408]	; (8002e60 <xTaskResumeAll+0x1d4>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	f040 80c0 	bne.w	8002e50 <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002cd0:	4b64      	ldr	r3, [pc, #400]	; (8002e64 <xTaskResumeAll+0x1d8>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	f000 80bb 	beq.w	8002e50 <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002cda:	e08a      	b.n	8002df2 <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002cdc:	4b62      	ldr	r3, [pc, #392]	; (8002e68 <xTaskResumeAll+0x1dc>)
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce8:	613b      	str	r3, [r7, #16]
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	69db      	ldr	r3, [r3, #28]
 8002cee:	69fa      	ldr	r2, [r7, #28]
 8002cf0:	6a12      	ldr	r2, [r2, #32]
 8002cf2:	609a      	str	r2, [r3, #8]
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	6a1b      	ldr	r3, [r3, #32]
 8002cf8:	69fa      	ldr	r2, [r7, #28]
 8002cfa:	69d2      	ldr	r2, [r2, #28]
 8002cfc:	605a      	str	r2, [r3, #4]
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	685a      	ldr	r2, [r3, #4]
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	3318      	adds	r3, #24
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d103      	bne.n	8002d12 <xTaskResumeAll+0x86>
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	6a1a      	ldr	r2, [r3, #32]
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	605a      	str	r2, [r3, #4]
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	2200      	movs	r2, #0
 8002d16:	629a      	str	r2, [r3, #40]	; 0x28
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	1e5a      	subs	r2, r3, #1
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	60fb      	str	r3, [r7, #12]
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	69fa      	ldr	r2, [r7, #28]
 8002d2e:	68d2      	ldr	r2, [r2, #12]
 8002d30:	609a      	str	r2, [r3, #8]
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	69fa      	ldr	r2, [r7, #28]
 8002d38:	6892      	ldr	r2, [r2, #8]
 8002d3a:	605a      	str	r2, [r3, #4]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	685a      	ldr	r2, [r3, #4]
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	3304      	adds	r3, #4
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d103      	bne.n	8002d50 <xTaskResumeAll+0xc4>
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	68da      	ldr	r2, [r3, #12]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	605a      	str	r2, [r3, #4]
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	2200      	movs	r2, #0
 8002d54:	615a      	str	r2, [r3, #20]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	1e5a      	subs	r2, r3, #1
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d64:	2201      	movs	r2, #1
 8002d66:	409a      	lsls	r2, r3
 8002d68:	4b40      	ldr	r3, [pc, #256]	; (8002e6c <xTaskResumeAll+0x1e0>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	4a3f      	ldr	r2, [pc, #252]	; (8002e6c <xTaskResumeAll+0x1e0>)
 8002d70:	6013      	str	r3, [r2, #0]
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d76:	493e      	ldr	r1, [pc, #248]	; (8002e70 <xTaskResumeAll+0x1e4>)
 8002d78:	4613      	mov	r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	4413      	add	r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	440b      	add	r3, r1
 8002d82:	3304      	adds	r3, #4
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	60bb      	str	r3, [r7, #8]
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	68ba      	ldr	r2, [r7, #8]
 8002d8c:	609a      	str	r2, [r3, #8]
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	689a      	ldr	r2, [r3, #8]
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	60da      	str	r2, [r3, #12]
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	69fa      	ldr	r2, [r7, #28]
 8002d9c:	3204      	adds	r2, #4
 8002d9e:	605a      	str	r2, [r3, #4]
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	1d1a      	adds	r2, r3, #4
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	609a      	str	r2, [r3, #8]
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dac:	4613      	mov	r3, r2
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	4413      	add	r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	4a2e      	ldr	r2, [pc, #184]	; (8002e70 <xTaskResumeAll+0x1e4>)
 8002db6:	441a      	add	r2, r3
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	615a      	str	r2, [r3, #20]
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dc0:	492b      	ldr	r1, [pc, #172]	; (8002e70 <xTaskResumeAll+0x1e4>)
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	4413      	add	r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	440b      	add	r3, r1
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	1c59      	adds	r1, r3, #1
 8002dd0:	4827      	ldr	r0, [pc, #156]	; (8002e70 <xTaskResumeAll+0x1e4>)
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	4413      	add	r3, r2
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	4403      	add	r3, r0
 8002ddc:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002de2:	4b24      	ldr	r3, [pc, #144]	; (8002e74 <xTaskResumeAll+0x1e8>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d302      	bcc.n	8002df2 <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8002dec:	4b22      	ldr	r3, [pc, #136]	; (8002e78 <xTaskResumeAll+0x1ec>)
 8002dee:	2201      	movs	r2, #1
 8002df0:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002df2:	4b1d      	ldr	r3, [pc, #116]	; (8002e68 <xTaskResumeAll+0x1dc>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	f47f af70 	bne.w	8002cdc <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002e02:	f000 fc1f 	bl	8003644 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002e06:	4b1d      	ldr	r3, [pc, #116]	; (8002e7c <xTaskResumeAll+0x1f0>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d010      	beq.n	8002e34 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002e12:	f000 f847 	bl	8002ea4 <xTaskIncrementTick>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d002      	beq.n	8002e22 <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8002e1c:	4b16      	ldr	r3, [pc, #88]	; (8002e78 <xTaskResumeAll+0x1ec>)
 8002e1e:	2201      	movs	r2, #1
 8002e20:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	3b01      	subs	r3, #1
 8002e26:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d1f1      	bne.n	8002e12 <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8002e2e:	4b13      	ldr	r3, [pc, #76]	; (8002e7c <xTaskResumeAll+0x1f0>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002e34:	4b10      	ldr	r3, [pc, #64]	; (8002e78 <xTaskResumeAll+0x1ec>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d009      	beq.n	8002e50 <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002e40:	4b0f      	ldr	r3, [pc, #60]	; (8002e80 <xTaskResumeAll+0x1f4>)
 8002e42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e46:	601a      	str	r2, [r3, #0]
 8002e48:	f3bf 8f4f 	dsb	sy
 8002e4c:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002e50:	f001 f892 	bl	8003f78 <vPortExitCritical>

    return xAlreadyYielded;
 8002e54:	69bb      	ldr	r3, [r7, #24]
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3720      	adds	r7, #32
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	20000340 	.word	0x20000340
 8002e64:	20000318 	.word	0x20000318
 8002e68:	200002d8 	.word	0x200002d8
 8002e6c:	20000320 	.word	0x20000320
 8002e70:	20000244 	.word	0x20000244
 8002e74:	20000240 	.word	0x20000240
 8002e78:	2000032c 	.word	0x2000032c
 8002e7c:	20000328 	.word	0x20000328
 8002e80:	e000ed04 	.word	0xe000ed04

08002e84 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002e8a:	4b05      	ldr	r3, [pc, #20]	; (8002ea0 <xTaskGetTickCount+0x1c>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002e90:	687b      	ldr	r3, [r7, #4]
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	370c      	adds	r7, #12
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	2000031c 	.word	0x2000031c

08002ea4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b08a      	sub	sp, #40	; 0x28
 8002ea8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002eae:	4b7d      	ldr	r3, [pc, #500]	; (80030a4 <xTaskIncrementTick+0x200>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	f040 80ec 	bne.w	8003090 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002eb8:	4b7b      	ldr	r3, [pc, #492]	; (80030a8 <xTaskIncrementTick+0x204>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002ec0:	4a79      	ldr	r2, [pc, #484]	; (80030a8 <xTaskIncrementTick+0x204>)
 8002ec2:	6a3b      	ldr	r3, [r7, #32]
 8002ec4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002ec6:	6a3b      	ldr	r3, [r7, #32]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d120      	bne.n	8002f0e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002ecc:	4b77      	ldr	r3, [pc, #476]	; (80030ac <xTaskIncrementTick+0x208>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d00a      	beq.n	8002eec <xTaskIncrementTick+0x48>
        __asm volatile
 8002ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eda:	f383 8811 	msr	BASEPRI, r3
 8002ede:	f3bf 8f6f 	isb	sy
 8002ee2:	f3bf 8f4f 	dsb	sy
 8002ee6:	607b      	str	r3, [r7, #4]
    }
 8002ee8:	bf00      	nop
 8002eea:	e7fe      	b.n	8002eea <xTaskIncrementTick+0x46>
 8002eec:	4b6f      	ldr	r3, [pc, #444]	; (80030ac <xTaskIncrementTick+0x208>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	61fb      	str	r3, [r7, #28]
 8002ef2:	4b6f      	ldr	r3, [pc, #444]	; (80030b0 <xTaskIncrementTick+0x20c>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a6d      	ldr	r2, [pc, #436]	; (80030ac <xTaskIncrementTick+0x208>)
 8002ef8:	6013      	str	r3, [r2, #0]
 8002efa:	4a6d      	ldr	r2, [pc, #436]	; (80030b0 <xTaskIncrementTick+0x20c>)
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	6013      	str	r3, [r2, #0]
 8002f00:	4b6c      	ldr	r3, [pc, #432]	; (80030b4 <xTaskIncrementTick+0x210>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	3301      	adds	r3, #1
 8002f06:	4a6b      	ldr	r2, [pc, #428]	; (80030b4 <xTaskIncrementTick+0x210>)
 8002f08:	6013      	str	r3, [r2, #0]
 8002f0a:	f000 fb9b 	bl	8003644 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002f0e:	4b6a      	ldr	r3, [pc, #424]	; (80030b8 <xTaskIncrementTick+0x214>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	6a3a      	ldr	r2, [r7, #32]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	f0c0 80a6 	bcc.w	8003066 <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f1a:	4b64      	ldr	r3, [pc, #400]	; (80030ac <xTaskIncrementTick+0x208>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d104      	bne.n	8002f2e <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f24:	4b64      	ldr	r3, [pc, #400]	; (80030b8 <xTaskIncrementTick+0x214>)
 8002f26:	f04f 32ff 	mov.w	r2, #4294967295
 8002f2a:	601a      	str	r2, [r3, #0]
                    break;
 8002f2c:	e09b      	b.n	8003066 <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f2e:	4b5f      	ldr	r3, [pc, #380]	; (80030ac <xTaskIncrementTick+0x208>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002f3e:	6a3a      	ldr	r2, [r7, #32]
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d203      	bcs.n	8002f4e <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002f46:	4a5c      	ldr	r2, [pc, #368]	; (80030b8 <xTaskIncrementTick+0x214>)
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002f4c:	e08b      	b.n	8003066 <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	695b      	ldr	r3, [r3, #20]
 8002f52:	613b      	str	r3, [r7, #16]
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	69ba      	ldr	r2, [r7, #24]
 8002f5a:	68d2      	ldr	r2, [r2, #12]
 8002f5c:	609a      	str	r2, [r3, #8]
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	69ba      	ldr	r2, [r7, #24]
 8002f64:	6892      	ldr	r2, [r2, #8]
 8002f66:	605a      	str	r2, [r3, #4]
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	685a      	ldr	r2, [r3, #4]
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	3304      	adds	r3, #4
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d103      	bne.n	8002f7c <xTaskIncrementTick+0xd8>
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	68da      	ldr	r2, [r3, #12]
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	605a      	str	r2, [r3, #4]
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	615a      	str	r2, [r3, #20]
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	1e5a      	subs	r2, r3, #1
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d01e      	beq.n	8002fd2 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f98:	60fb      	str	r3, [r7, #12]
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	69db      	ldr	r3, [r3, #28]
 8002f9e:	69ba      	ldr	r2, [r7, #24]
 8002fa0:	6a12      	ldr	r2, [r2, #32]
 8002fa2:	609a      	str	r2, [r3, #8]
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	6a1b      	ldr	r3, [r3, #32]
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	69d2      	ldr	r2, [r2, #28]
 8002fac:	605a      	str	r2, [r3, #4]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	685a      	ldr	r2, [r3, #4]
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	3318      	adds	r3, #24
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d103      	bne.n	8002fc2 <xTaskIncrementTick+0x11e>
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	6a1a      	ldr	r2, [r3, #32]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	605a      	str	r2, [r3, #4]
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	629a      	str	r2, [r3, #40]	; 0x28
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	1e5a      	subs	r2, r3, #1
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	409a      	lsls	r2, r3
 8002fda:	4b38      	ldr	r3, [pc, #224]	; (80030bc <xTaskIncrementTick+0x218>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	4a36      	ldr	r2, [pc, #216]	; (80030bc <xTaskIncrementTick+0x218>)
 8002fe2:	6013      	str	r3, [r2, #0]
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fe8:	4935      	ldr	r1, [pc, #212]	; (80030c0 <xTaskIncrementTick+0x21c>)
 8002fea:	4613      	mov	r3, r2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	4413      	add	r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	440b      	add	r3, r1
 8002ff4:	3304      	adds	r3, #4
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	60bb      	str	r3, [r7, #8]
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	68ba      	ldr	r2, [r7, #8]
 8002ffe:	609a      	str	r2, [r3, #8]
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	689a      	ldr	r2, [r3, #8]
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	60da      	str	r2, [r3, #12]
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	69ba      	ldr	r2, [r7, #24]
 800300e:	3204      	adds	r2, #4
 8003010:	605a      	str	r2, [r3, #4]
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	1d1a      	adds	r2, r3, #4
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	609a      	str	r2, [r3, #8]
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800301e:	4613      	mov	r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	4413      	add	r3, r2
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	4a26      	ldr	r2, [pc, #152]	; (80030c0 <xTaskIncrementTick+0x21c>)
 8003028:	441a      	add	r2, r3
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	615a      	str	r2, [r3, #20]
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003032:	4923      	ldr	r1, [pc, #140]	; (80030c0 <xTaskIncrementTick+0x21c>)
 8003034:	4613      	mov	r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	4413      	add	r3, r2
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	440b      	add	r3, r1
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	1c59      	adds	r1, r3, #1
 8003042:	481f      	ldr	r0, [pc, #124]	; (80030c0 <xTaskIncrementTick+0x21c>)
 8003044:	4613      	mov	r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	4413      	add	r3, r2
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	4403      	add	r3, r0
 800304e:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003054:	4b1b      	ldr	r3, [pc, #108]	; (80030c4 <xTaskIncrementTick+0x220>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800305a:	429a      	cmp	r2, r3
 800305c:	f67f af5d 	bls.w	8002f1a <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8003060:	2301      	movs	r3, #1
 8003062:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003064:	e759      	b.n	8002f1a <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003066:	4b17      	ldr	r3, [pc, #92]	; (80030c4 <xTaskIncrementTick+0x220>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800306c:	4914      	ldr	r1, [pc, #80]	; (80030c0 <xTaskIncrementTick+0x21c>)
 800306e:	4613      	mov	r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	4413      	add	r3, r2
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	440b      	add	r3, r1
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2b01      	cmp	r3, #1
 800307c:	d901      	bls.n	8003082 <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 800307e:	2301      	movs	r3, #1
 8003080:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8003082:	4b11      	ldr	r3, [pc, #68]	; (80030c8 <xTaskIncrementTick+0x224>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d007      	beq.n	800309a <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 800308a:	2301      	movs	r3, #1
 800308c:	627b      	str	r3, [r7, #36]	; 0x24
 800308e:	e004      	b.n	800309a <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003090:	4b0e      	ldr	r3, [pc, #56]	; (80030cc <xTaskIncrementTick+0x228>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	3301      	adds	r3, #1
 8003096:	4a0d      	ldr	r2, [pc, #52]	; (80030cc <xTaskIncrementTick+0x228>)
 8003098:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800309a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800309c:	4618      	mov	r0, r3
 800309e:	3728      	adds	r7, #40	; 0x28
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	20000340 	.word	0x20000340
 80030a8:	2000031c 	.word	0x2000031c
 80030ac:	200002d0 	.word	0x200002d0
 80030b0:	200002d4 	.word	0x200002d4
 80030b4:	20000330 	.word	0x20000330
 80030b8:	20000338 	.word	0x20000338
 80030bc:	20000320 	.word	0x20000320
 80030c0:	20000244 	.word	0x20000244
 80030c4:	20000240 	.word	0x20000240
 80030c8:	2000032c 	.word	0x2000032c
 80030cc:	20000328 	.word	0x20000328

080030d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80030d0:	b480      	push	{r7}
 80030d2:	b087      	sub	sp, #28
 80030d4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80030d6:	4b27      	ldr	r3, [pc, #156]	; (8003174 <vTaskSwitchContext+0xa4>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d003      	beq.n	80030e6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80030de:	4b26      	ldr	r3, [pc, #152]	; (8003178 <vTaskSwitchContext+0xa8>)
 80030e0:	2201      	movs	r2, #1
 80030e2:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80030e4:	e03f      	b.n	8003166 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 80030e6:	4b24      	ldr	r3, [pc, #144]	; (8003178 <vTaskSwitchContext+0xa8>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030ec:	4b23      	ldr	r3, [pc, #140]	; (800317c <vTaskSwitchContext+0xac>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	fab3 f383 	clz	r3, r3
 80030f8:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80030fa:	7afb      	ldrb	r3, [r7, #11]
 80030fc:	f1c3 031f 	rsb	r3, r3, #31
 8003100:	617b      	str	r3, [r7, #20]
 8003102:	491f      	ldr	r1, [pc, #124]	; (8003180 <vTaskSwitchContext+0xb0>)
 8003104:	697a      	ldr	r2, [r7, #20]
 8003106:	4613      	mov	r3, r2
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	4413      	add	r3, r2
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	440b      	add	r3, r1
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d10a      	bne.n	800312c <vTaskSwitchContext+0x5c>
        __asm volatile
 8003116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800311a:	f383 8811 	msr	BASEPRI, r3
 800311e:	f3bf 8f6f 	isb	sy
 8003122:	f3bf 8f4f 	dsb	sy
 8003126:	607b      	str	r3, [r7, #4]
    }
 8003128:	bf00      	nop
 800312a:	e7fe      	b.n	800312a <vTaskSwitchContext+0x5a>
 800312c:	697a      	ldr	r2, [r7, #20]
 800312e:	4613      	mov	r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	4413      	add	r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	4a12      	ldr	r2, [pc, #72]	; (8003180 <vTaskSwitchContext+0xb0>)
 8003138:	4413      	add	r3, r2
 800313a:	613b      	str	r3, [r7, #16]
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	685a      	ldr	r2, [r3, #4]
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	605a      	str	r2, [r3, #4]
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	685a      	ldr	r2, [r3, #4]
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	3308      	adds	r3, #8
 800314e:	429a      	cmp	r2, r3
 8003150:	d104      	bne.n	800315c <vTaskSwitchContext+0x8c>
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	685a      	ldr	r2, [r3, #4]
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	605a      	str	r2, [r3, #4]
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	4a08      	ldr	r2, [pc, #32]	; (8003184 <vTaskSwitchContext+0xb4>)
 8003164:	6013      	str	r3, [r2, #0]
}
 8003166:	bf00      	nop
 8003168:	371c      	adds	r7, #28
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	20000340 	.word	0x20000340
 8003178:	2000032c 	.word	0x2000032c
 800317c:	20000320 	.word	0x20000320
 8003180:	20000244 	.word	0x20000244
 8003184:	20000240 	.word	0x20000240

08003188 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d10a      	bne.n	80031ae <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800319c:	f383 8811 	msr	BASEPRI, r3
 80031a0:	f3bf 8f6f 	isb	sy
 80031a4:	f3bf 8f4f 	dsb	sy
 80031a8:	60fb      	str	r3, [r7, #12]
    }
 80031aa:	bf00      	nop
 80031ac:	e7fe      	b.n	80031ac <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80031ae:	4b07      	ldr	r3, [pc, #28]	; (80031cc <vTaskPlaceOnEventList+0x44>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	3318      	adds	r3, #24
 80031b4:	4619      	mov	r1, r3
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f7ff f815 	bl	80021e6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80031bc:	2101      	movs	r1, #1
 80031be:	6838      	ldr	r0, [r7, #0]
 80031c0:	f000 fa7a 	bl	80036b8 <prvAddCurrentTaskToDelayedList>
}
 80031c4:	bf00      	nop
 80031c6:	3710      	adds	r7, #16
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	20000240 	.word	0x20000240

080031d0 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b086      	sub	sp, #24
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	60b9      	str	r1, [r7, #8]
 80031da:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d10a      	bne.n	80031f8 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80031e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031e6:	f383 8811 	msr	BASEPRI, r3
 80031ea:	f3bf 8f6f 	isb	sy
 80031ee:	f3bf 8f4f 	dsb	sy
 80031f2:	613b      	str	r3, [r7, #16]
    }
 80031f4:	bf00      	nop
 80031f6:	e7fe      	b.n	80031f6 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	617b      	str	r3, [r7, #20]
 80031fe:	4b16      	ldr	r3, [pc, #88]	; (8003258 <vTaskPlaceOnEventListRestricted+0x88>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	697a      	ldr	r2, [r7, #20]
 8003204:	61da      	str	r2, [r3, #28]
 8003206:	4b14      	ldr	r3, [pc, #80]	; (8003258 <vTaskPlaceOnEventListRestricted+0x88>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	697a      	ldr	r2, [r7, #20]
 800320c:	6892      	ldr	r2, [r2, #8]
 800320e:	621a      	str	r2, [r3, #32]
 8003210:	4b11      	ldr	r3, [pc, #68]	; (8003258 <vTaskPlaceOnEventListRestricted+0x88>)
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	3218      	adds	r2, #24
 800321a:	605a      	str	r2, [r3, #4]
 800321c:	4b0e      	ldr	r3, [pc, #56]	; (8003258 <vTaskPlaceOnEventListRestricted+0x88>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f103 0218 	add.w	r2, r3, #24
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	609a      	str	r2, [r3, #8]
 8003228:	4b0b      	ldr	r3, [pc, #44]	; (8003258 <vTaskPlaceOnEventListRestricted+0x88>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	68fa      	ldr	r2, [r7, #12]
 800322e:	629a      	str	r2, [r3, #40]	; 0x28
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	1c5a      	adds	r2, r3, #1
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d002      	beq.n	8003246 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8003240:	f04f 33ff 	mov.w	r3, #4294967295
 8003244:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003246:	6879      	ldr	r1, [r7, #4]
 8003248:	68b8      	ldr	r0, [r7, #8]
 800324a:	f000 fa35 	bl	80036b8 <prvAddCurrentTaskToDelayedList>
    }
 800324e:	bf00      	nop
 8003250:	3718      	adds	r7, #24
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	20000240 	.word	0x20000240

0800325c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800325c:	b480      	push	{r7}
 800325e:	b08b      	sub	sp, #44	; 0x2c
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 800326c:	6a3b      	ldr	r3, [r7, #32]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d10a      	bne.n	8003288 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003276:	f383 8811 	msr	BASEPRI, r3
 800327a:	f3bf 8f6f 	isb	sy
 800327e:	f3bf 8f4f 	dsb	sy
 8003282:	60fb      	str	r3, [r7, #12]
    }
 8003284:	bf00      	nop
 8003286:	e7fe      	b.n	8003286 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003288:	6a3b      	ldr	r3, [r7, #32]
 800328a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328c:	61fb      	str	r3, [r7, #28]
 800328e:	6a3b      	ldr	r3, [r7, #32]
 8003290:	69db      	ldr	r3, [r3, #28]
 8003292:	6a3a      	ldr	r2, [r7, #32]
 8003294:	6a12      	ldr	r2, [r2, #32]
 8003296:	609a      	str	r2, [r3, #8]
 8003298:	6a3b      	ldr	r3, [r7, #32]
 800329a:	6a1b      	ldr	r3, [r3, #32]
 800329c:	6a3a      	ldr	r2, [r7, #32]
 800329e:	69d2      	ldr	r2, [r2, #28]
 80032a0:	605a      	str	r2, [r3, #4]
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	685a      	ldr	r2, [r3, #4]
 80032a6:	6a3b      	ldr	r3, [r7, #32]
 80032a8:	3318      	adds	r3, #24
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d103      	bne.n	80032b6 <xTaskRemoveFromEventList+0x5a>
 80032ae:	6a3b      	ldr	r3, [r7, #32]
 80032b0:	6a1a      	ldr	r2, [r3, #32]
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	605a      	str	r2, [r3, #4]
 80032b6:	6a3b      	ldr	r3, [r7, #32]
 80032b8:	2200      	movs	r2, #0
 80032ba:	629a      	str	r2, [r3, #40]	; 0x28
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	1e5a      	subs	r2, r3, #1
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032c6:	4b4a      	ldr	r3, [pc, #296]	; (80033f0 <xTaskRemoveFromEventList+0x194>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d15e      	bne.n	800338c <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80032ce:	6a3b      	ldr	r3, [r7, #32]
 80032d0:	695b      	ldr	r3, [r3, #20]
 80032d2:	617b      	str	r3, [r7, #20]
 80032d4:	6a3b      	ldr	r3, [r7, #32]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	6a3a      	ldr	r2, [r7, #32]
 80032da:	68d2      	ldr	r2, [r2, #12]
 80032dc:	609a      	str	r2, [r3, #8]
 80032de:	6a3b      	ldr	r3, [r7, #32]
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	6a3a      	ldr	r2, [r7, #32]
 80032e4:	6892      	ldr	r2, [r2, #8]
 80032e6:	605a      	str	r2, [r3, #4]
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	685a      	ldr	r2, [r3, #4]
 80032ec:	6a3b      	ldr	r3, [r7, #32]
 80032ee:	3304      	adds	r3, #4
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d103      	bne.n	80032fc <xTaskRemoveFromEventList+0xa0>
 80032f4:	6a3b      	ldr	r3, [r7, #32]
 80032f6:	68da      	ldr	r2, [r3, #12]
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	605a      	str	r2, [r3, #4]
 80032fc:	6a3b      	ldr	r3, [r7, #32]
 80032fe:	2200      	movs	r2, #0
 8003300:	615a      	str	r2, [r3, #20]
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	1e5a      	subs	r2, r3, #1
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800330c:	6a3b      	ldr	r3, [r7, #32]
 800330e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003310:	2201      	movs	r2, #1
 8003312:	409a      	lsls	r2, r3
 8003314:	4b37      	ldr	r3, [pc, #220]	; (80033f4 <xTaskRemoveFromEventList+0x198>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4313      	orrs	r3, r2
 800331a:	4a36      	ldr	r2, [pc, #216]	; (80033f4 <xTaskRemoveFromEventList+0x198>)
 800331c:	6013      	str	r3, [r2, #0]
 800331e:	6a3b      	ldr	r3, [r7, #32]
 8003320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003322:	4935      	ldr	r1, [pc, #212]	; (80033f8 <xTaskRemoveFromEventList+0x19c>)
 8003324:	4613      	mov	r3, r2
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	4413      	add	r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	440b      	add	r3, r1
 800332e:	3304      	adds	r3, #4
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	613b      	str	r3, [r7, #16]
 8003334:	6a3b      	ldr	r3, [r7, #32]
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	609a      	str	r2, [r3, #8]
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	689a      	ldr	r2, [r3, #8]
 800333e:	6a3b      	ldr	r3, [r7, #32]
 8003340:	60da      	str	r2, [r3, #12]
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	6a3a      	ldr	r2, [r7, #32]
 8003348:	3204      	adds	r2, #4
 800334a:	605a      	str	r2, [r3, #4]
 800334c:	6a3b      	ldr	r3, [r7, #32]
 800334e:	1d1a      	adds	r2, r3, #4
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	609a      	str	r2, [r3, #8]
 8003354:	6a3b      	ldr	r3, [r7, #32]
 8003356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003358:	4613      	mov	r3, r2
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	4413      	add	r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	4a25      	ldr	r2, [pc, #148]	; (80033f8 <xTaskRemoveFromEventList+0x19c>)
 8003362:	441a      	add	r2, r3
 8003364:	6a3b      	ldr	r3, [r7, #32]
 8003366:	615a      	str	r2, [r3, #20]
 8003368:	6a3b      	ldr	r3, [r7, #32]
 800336a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800336c:	4922      	ldr	r1, [pc, #136]	; (80033f8 <xTaskRemoveFromEventList+0x19c>)
 800336e:	4613      	mov	r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	4413      	add	r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	440b      	add	r3, r1
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	1c59      	adds	r1, r3, #1
 800337c:	481e      	ldr	r0, [pc, #120]	; (80033f8 <xTaskRemoveFromEventList+0x19c>)
 800337e:	4613      	mov	r3, r2
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	4413      	add	r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	4403      	add	r3, r0
 8003388:	6019      	str	r1, [r3, #0]
 800338a:	e01b      	b.n	80033c4 <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800338c:	4b1b      	ldr	r3, [pc, #108]	; (80033fc <xTaskRemoveFromEventList+0x1a0>)
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	61bb      	str	r3, [r7, #24]
 8003392:	6a3b      	ldr	r3, [r7, #32]
 8003394:	69ba      	ldr	r2, [r7, #24]
 8003396:	61da      	str	r2, [r3, #28]
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	689a      	ldr	r2, [r3, #8]
 800339c:	6a3b      	ldr	r3, [r7, #32]
 800339e:	621a      	str	r2, [r3, #32]
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	6a3a      	ldr	r2, [r7, #32]
 80033a6:	3218      	adds	r2, #24
 80033a8:	605a      	str	r2, [r3, #4]
 80033aa:	6a3b      	ldr	r3, [r7, #32]
 80033ac:	f103 0218 	add.w	r2, r3, #24
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	609a      	str	r2, [r3, #8]
 80033b4:	6a3b      	ldr	r3, [r7, #32]
 80033b6:	4a11      	ldr	r2, [pc, #68]	; (80033fc <xTaskRemoveFromEventList+0x1a0>)
 80033b8:	629a      	str	r2, [r3, #40]	; 0x28
 80033ba:	4b10      	ldr	r3, [pc, #64]	; (80033fc <xTaskRemoveFromEventList+0x1a0>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	3301      	adds	r3, #1
 80033c0:	4a0e      	ldr	r2, [pc, #56]	; (80033fc <xTaskRemoveFromEventList+0x1a0>)
 80033c2:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80033c4:	6a3b      	ldr	r3, [r7, #32]
 80033c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033c8:	4b0d      	ldr	r3, [pc, #52]	; (8003400 <xTaskRemoveFromEventList+0x1a4>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d905      	bls.n	80033de <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80033d2:	2301      	movs	r3, #1
 80033d4:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80033d6:	4b0b      	ldr	r3, [pc, #44]	; (8003404 <xTaskRemoveFromEventList+0x1a8>)
 80033d8:	2201      	movs	r2, #1
 80033da:	601a      	str	r2, [r3, #0]
 80033dc:	e001      	b.n	80033e2 <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 80033de:	2300      	movs	r3, #0
 80033e0:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 80033e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	372c      	adds	r7, #44	; 0x2c
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr
 80033f0:	20000340 	.word	0x20000340
 80033f4:	20000320 	.word	0x20000320
 80033f8:	20000244 	.word	0x20000244
 80033fc:	200002d8 	.word	0x200002d8
 8003400:	20000240 	.word	0x20000240
 8003404:	2000032c 	.word	0x2000032c

08003408 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003410:	4b06      	ldr	r3, [pc, #24]	; (800342c <vTaskInternalSetTimeOutState+0x24>)
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003418:	4b05      	ldr	r3, [pc, #20]	; (8003430 <vTaskInternalSetTimeOutState+0x28>)
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	605a      	str	r2, [r3, #4]
}
 8003420:	bf00      	nop
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr
 800342c:	20000330 	.word	0x20000330
 8003430:	2000031c 	.word	0x2000031c

08003434 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b088      	sub	sp, #32
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d10a      	bne.n	800345a <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003448:	f383 8811 	msr	BASEPRI, r3
 800344c:	f3bf 8f6f 	isb	sy
 8003450:	f3bf 8f4f 	dsb	sy
 8003454:	613b      	str	r3, [r7, #16]
    }
 8003456:	bf00      	nop
 8003458:	e7fe      	b.n	8003458 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d10a      	bne.n	8003476 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003464:	f383 8811 	msr	BASEPRI, r3
 8003468:	f3bf 8f6f 	isb	sy
 800346c:	f3bf 8f4f 	dsb	sy
 8003470:	60fb      	str	r3, [r7, #12]
    }
 8003472:	bf00      	nop
 8003474:	e7fe      	b.n	8003474 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003476:	f000 fd4f 	bl	8003f18 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800347a:	4b1f      	ldr	r3, [pc, #124]	; (80034f8 <xTaskCheckForTimeOut+0xc4>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	69ba      	ldr	r2, [r7, #24]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003492:	d102      	bne.n	800349a <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003494:	2300      	movs	r3, #0
 8003496:	61fb      	str	r3, [r7, #28]
 8003498:	e026      	b.n	80034e8 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	4b17      	ldr	r3, [pc, #92]	; (80034fc <xTaskCheckForTimeOut+0xc8>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d00a      	beq.n	80034bc <xTaskCheckForTimeOut+0x88>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	69ba      	ldr	r2, [r7, #24]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d305      	bcc.n	80034bc <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80034b0:	2301      	movs	r3, #1
 80034b2:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	2200      	movs	r2, #0
 80034b8:	601a      	str	r2, [r3, #0]
 80034ba:	e015      	b.n	80034e8 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	697a      	ldr	r2, [r7, #20]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d20b      	bcs.n	80034de <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	1ad2      	subs	r2, r2, r3
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f7ff ff98 	bl	8003408 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80034d8:	2300      	movs	r3, #0
 80034da:	61fb      	str	r3, [r7, #28]
 80034dc:	e004      	b.n	80034e8 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	2200      	movs	r2, #0
 80034e2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80034e4:	2301      	movs	r3, #1
 80034e6:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80034e8:	f000 fd46 	bl	8003f78 <vPortExitCritical>

    return xReturn;
 80034ec:	69fb      	ldr	r3, [r7, #28]
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3720      	adds	r7, #32
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	2000031c 	.word	0x2000031c
 80034fc:	20000330 	.word	0x20000330

08003500 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003500:	b480      	push	{r7}
 8003502:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003504:	4b03      	ldr	r3, [pc, #12]	; (8003514 <vTaskMissedYield+0x14>)
 8003506:	2201      	movs	r2, #1
 8003508:	601a      	str	r2, [r3, #0]
}
 800350a:	bf00      	nop
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr
 8003514:	2000032c 	.word	0x2000032c

08003518 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003520:	f000 f852 	bl	80035c8 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003524:	4b06      	ldr	r3, [pc, #24]	; (8003540 <prvIdleTask+0x28>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2b01      	cmp	r3, #1
 800352a:	d9f9      	bls.n	8003520 <prvIdleTask+0x8>
            {
                taskYIELD();
 800352c:	4b05      	ldr	r3, [pc, #20]	; (8003544 <prvIdleTask+0x2c>)
 800352e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003532:	601a      	str	r2, [r3, #0]
 8003534:	f3bf 8f4f 	dsb	sy
 8003538:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800353c:	e7f0      	b.n	8003520 <prvIdleTask+0x8>
 800353e:	bf00      	nop
 8003540:	20000244 	.word	0x20000244
 8003544:	e000ed04 	.word	0xe000ed04

08003548 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800354e:	2300      	movs	r3, #0
 8003550:	607b      	str	r3, [r7, #4]
 8003552:	e00c      	b.n	800356e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	4613      	mov	r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	4413      	add	r3, r2
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	4a12      	ldr	r2, [pc, #72]	; (80035a8 <prvInitialiseTaskLists+0x60>)
 8003560:	4413      	add	r3, r2
 8003562:	4618      	mov	r0, r3
 8003564:	f7fe fe12 	bl	800218c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	3301      	adds	r3, #1
 800356c:	607b      	str	r3, [r7, #4]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2b04      	cmp	r3, #4
 8003572:	d9ef      	bls.n	8003554 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003574:	480d      	ldr	r0, [pc, #52]	; (80035ac <prvInitialiseTaskLists+0x64>)
 8003576:	f7fe fe09 	bl	800218c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800357a:	480d      	ldr	r0, [pc, #52]	; (80035b0 <prvInitialiseTaskLists+0x68>)
 800357c:	f7fe fe06 	bl	800218c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003580:	480c      	ldr	r0, [pc, #48]	; (80035b4 <prvInitialiseTaskLists+0x6c>)
 8003582:	f7fe fe03 	bl	800218c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003586:	480c      	ldr	r0, [pc, #48]	; (80035b8 <prvInitialiseTaskLists+0x70>)
 8003588:	f7fe fe00 	bl	800218c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800358c:	480b      	ldr	r0, [pc, #44]	; (80035bc <prvInitialiseTaskLists+0x74>)
 800358e:	f7fe fdfd 	bl	800218c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003592:	4b0b      	ldr	r3, [pc, #44]	; (80035c0 <prvInitialiseTaskLists+0x78>)
 8003594:	4a05      	ldr	r2, [pc, #20]	; (80035ac <prvInitialiseTaskLists+0x64>)
 8003596:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003598:	4b0a      	ldr	r3, [pc, #40]	; (80035c4 <prvInitialiseTaskLists+0x7c>)
 800359a:	4a05      	ldr	r2, [pc, #20]	; (80035b0 <prvInitialiseTaskLists+0x68>)
 800359c:	601a      	str	r2, [r3, #0]
}
 800359e:	bf00      	nop
 80035a0:	3708      	adds	r7, #8
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	20000244 	.word	0x20000244
 80035ac:	200002a8 	.word	0x200002a8
 80035b0:	200002bc 	.word	0x200002bc
 80035b4:	200002d8 	.word	0x200002d8
 80035b8:	200002ec 	.word	0x200002ec
 80035bc:	20000304 	.word	0x20000304
 80035c0:	200002d0 	.word	0x200002d0
 80035c4:	200002d4 	.word	0x200002d4

080035c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80035ce:	e019      	b.n	8003604 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80035d0:	f000 fca2 	bl	8003f18 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035d4:	4b10      	ldr	r3, [pc, #64]	; (8003618 <prvCheckTasksWaitingTermination+0x50>)
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	3304      	adds	r3, #4
 80035e0:	4618      	mov	r0, r3
 80035e2:	f7fe fe39 	bl	8002258 <uxListRemove>
                --uxCurrentNumberOfTasks;
 80035e6:	4b0d      	ldr	r3, [pc, #52]	; (800361c <prvCheckTasksWaitingTermination+0x54>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	3b01      	subs	r3, #1
 80035ec:	4a0b      	ldr	r2, [pc, #44]	; (800361c <prvCheckTasksWaitingTermination+0x54>)
 80035ee:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80035f0:	4b0b      	ldr	r3, [pc, #44]	; (8003620 <prvCheckTasksWaitingTermination+0x58>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	3b01      	subs	r3, #1
 80035f6:	4a0a      	ldr	r2, [pc, #40]	; (8003620 <prvCheckTasksWaitingTermination+0x58>)
 80035f8:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 80035fa:	f000 fcbd 	bl	8003f78 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 f810 	bl	8003624 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003604:	4b06      	ldr	r3, [pc, #24]	; (8003620 <prvCheckTasksWaitingTermination+0x58>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d1e1      	bne.n	80035d0 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800360c:	bf00      	nop
 800360e:	bf00      	nop
 8003610:	3708      	adds	r7, #8
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	200002ec 	.word	0x200002ec
 800361c:	20000318 	.word	0x20000318
 8003620:	20000300 	.word	0x20000300

08003624 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003630:	4618      	mov	r0, r3
 8003632:	f000 fe0d 	bl	8004250 <vPortFree>
            vPortFree( pxTCB );
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 fe0a 	bl	8004250 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800363c:	bf00      	nop
 800363e:	3708      	adds	r7, #8
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003644:	b480      	push	{r7}
 8003646:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003648:	4b0a      	ldr	r3, [pc, #40]	; (8003674 <prvResetNextTaskUnblockTime+0x30>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d104      	bne.n	800365c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003652:	4b09      	ldr	r3, [pc, #36]	; (8003678 <prvResetNextTaskUnblockTime+0x34>)
 8003654:	f04f 32ff 	mov.w	r2, #4294967295
 8003658:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800365a:	e005      	b.n	8003668 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800365c:	4b05      	ldr	r3, [pc, #20]	; (8003674 <prvResetNextTaskUnblockTime+0x30>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a04      	ldr	r2, [pc, #16]	; (8003678 <prvResetNextTaskUnblockTime+0x34>)
 8003666:	6013      	str	r3, [r2, #0]
}
 8003668:	bf00      	nop
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	200002d0 	.word	0x200002d0
 8003678:	20000338 	.word	0x20000338

0800367c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003682:	4b0b      	ldr	r3, [pc, #44]	; (80036b0 <xTaskGetSchedulerState+0x34>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d102      	bne.n	8003690 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800368a:	2301      	movs	r3, #1
 800368c:	607b      	str	r3, [r7, #4]
 800368e:	e008      	b.n	80036a2 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003690:	4b08      	ldr	r3, [pc, #32]	; (80036b4 <xTaskGetSchedulerState+0x38>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d102      	bne.n	800369e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003698:	2302      	movs	r3, #2
 800369a:	607b      	str	r3, [r7, #4]
 800369c:	e001      	b.n	80036a2 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800369e:	2300      	movs	r3, #0
 80036a0:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80036a2:	687b      	ldr	r3, [r7, #4]
    }
 80036a4:	4618      	mov	r0, r3
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr
 80036b0:	20000324 	.word	0x20000324
 80036b4:	20000340 	.word	0x20000340

080036b8 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b086      	sub	sp, #24
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80036c2:	4b36      	ldr	r3, [pc, #216]	; (800379c <prvAddCurrentTaskToDelayedList+0xe4>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80036c8:	4b35      	ldr	r3, [pc, #212]	; (80037a0 <prvAddCurrentTaskToDelayedList+0xe8>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	3304      	adds	r3, #4
 80036ce:	4618      	mov	r0, r3
 80036d0:	f7fe fdc2 	bl	8002258 <uxListRemove>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10b      	bne.n	80036f2 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80036da:	4b31      	ldr	r3, [pc, #196]	; (80037a0 <prvAddCurrentTaskToDelayedList+0xe8>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e0:	2201      	movs	r2, #1
 80036e2:	fa02 f303 	lsl.w	r3, r2, r3
 80036e6:	43da      	mvns	r2, r3
 80036e8:	4b2e      	ldr	r3, [pc, #184]	; (80037a4 <prvAddCurrentTaskToDelayedList+0xec>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4013      	ands	r3, r2
 80036ee:	4a2d      	ldr	r2, [pc, #180]	; (80037a4 <prvAddCurrentTaskToDelayedList+0xec>)
 80036f0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036f8:	d124      	bne.n	8003744 <prvAddCurrentTaskToDelayedList+0x8c>
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d021      	beq.n	8003744 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003700:	4b29      	ldr	r3, [pc, #164]	; (80037a8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	613b      	str	r3, [r7, #16]
 8003706:	4b26      	ldr	r3, [pc, #152]	; (80037a0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	609a      	str	r2, [r3, #8]
 800370e:	4b24      	ldr	r3, [pc, #144]	; (80037a0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	693a      	ldr	r2, [r7, #16]
 8003714:	6892      	ldr	r2, [r2, #8]
 8003716:	60da      	str	r2, [r3, #12]
 8003718:	4b21      	ldr	r3, [pc, #132]	; (80037a0 <prvAddCurrentTaskToDelayedList+0xe8>)
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	3204      	adds	r2, #4
 8003722:	605a      	str	r2, [r3, #4]
 8003724:	4b1e      	ldr	r3, [pc, #120]	; (80037a0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	1d1a      	adds	r2, r3, #4
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	609a      	str	r2, [r3, #8]
 800372e:	4b1c      	ldr	r3, [pc, #112]	; (80037a0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a1d      	ldr	r2, [pc, #116]	; (80037a8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003734:	615a      	str	r2, [r3, #20]
 8003736:	4b1c      	ldr	r3, [pc, #112]	; (80037a8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	3301      	adds	r3, #1
 800373c:	4a1a      	ldr	r2, [pc, #104]	; (80037a8 <prvAddCurrentTaskToDelayedList+0xf0>)
 800373e:	6013      	str	r3, [r2, #0]
 8003740:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003742:	e026      	b.n	8003792 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003744:	697a      	ldr	r2, [r7, #20]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4413      	add	r3, r2
 800374a:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800374c:	4b14      	ldr	r3, [pc, #80]	; (80037a0 <prvAddCurrentTaskToDelayedList+0xe8>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	68fa      	ldr	r2, [r7, #12]
 8003752:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003754:	68fa      	ldr	r2, [r7, #12]
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	429a      	cmp	r2, r3
 800375a:	d209      	bcs.n	8003770 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800375c:	4b13      	ldr	r3, [pc, #76]	; (80037ac <prvAddCurrentTaskToDelayedList+0xf4>)
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	4b0f      	ldr	r3, [pc, #60]	; (80037a0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	3304      	adds	r3, #4
 8003766:	4619      	mov	r1, r3
 8003768:	4610      	mov	r0, r2
 800376a:	f7fe fd3c 	bl	80021e6 <vListInsert>
}
 800376e:	e010      	b.n	8003792 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003770:	4b0f      	ldr	r3, [pc, #60]	; (80037b0 <prvAddCurrentTaskToDelayedList+0xf8>)
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	4b0a      	ldr	r3, [pc, #40]	; (80037a0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	3304      	adds	r3, #4
 800377a:	4619      	mov	r1, r3
 800377c:	4610      	mov	r0, r2
 800377e:	f7fe fd32 	bl	80021e6 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003782:	4b0c      	ldr	r3, [pc, #48]	; (80037b4 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	429a      	cmp	r2, r3
 800378a:	d202      	bcs.n	8003792 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 800378c:	4a09      	ldr	r2, [pc, #36]	; (80037b4 <prvAddCurrentTaskToDelayedList+0xfc>)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6013      	str	r3, [r2, #0]
}
 8003792:	bf00      	nop
 8003794:	3718      	adds	r7, #24
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	2000031c 	.word	0x2000031c
 80037a0:	20000240 	.word	0x20000240
 80037a4:	20000320 	.word	0x20000320
 80037a8:	20000304 	.word	0x20000304
 80037ac:	200002d4 	.word	0x200002d4
 80037b0:	200002d0 	.word	0x200002d0
 80037b4:	20000338 	.word	0x20000338

080037b8 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80037be:	2300      	movs	r3, #0
 80037c0:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80037c2:	f000 fa47 	bl	8003c54 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80037c6:	4b11      	ldr	r3, [pc, #68]	; (800380c <xTimerCreateTimerTask+0x54>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d00b      	beq.n	80037e6 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 80037ce:	4b10      	ldr	r3, [pc, #64]	; (8003810 <xTimerCreateTimerTask+0x58>)
 80037d0:	9301      	str	r3, [sp, #4]
 80037d2:	2302      	movs	r3, #2
 80037d4:	9300      	str	r3, [sp, #0]
 80037d6:	2300      	movs	r3, #0
 80037d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80037dc:	490d      	ldr	r1, [pc, #52]	; (8003814 <xTimerCreateTimerTask+0x5c>)
 80037de:	480e      	ldr	r0, [pc, #56]	; (8003818 <xTimerCreateTimerTask+0x60>)
 80037e0:	f7ff f856 	bl	8002890 <xTaskCreate>
 80037e4:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d10a      	bne.n	8003802 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80037ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f0:	f383 8811 	msr	BASEPRI, r3
 80037f4:	f3bf 8f6f 	isb	sy
 80037f8:	f3bf 8f4f 	dsb	sy
 80037fc:	603b      	str	r3, [r7, #0]
    }
 80037fe:	bf00      	nop
 8003800:	e7fe      	b.n	8003800 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003802:	687b      	ldr	r3, [r7, #4]
    }
 8003804:	4618      	mov	r0, r3
 8003806:	3708      	adds	r7, #8
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	20000374 	.word	0x20000374
 8003810:	20000378 	.word	0x20000378
 8003814:	08006e00 	.word	0x08006e00
 8003818:	080038c1 	.word	0x080038c1

0800381c <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003828:	e008      	b.n	800383c <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	699b      	ldr	r3, [r3, #24]
 800382e:	68ba      	ldr	r2, [r7, #8]
 8003830:	4413      	add	r3, r2
 8003832:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6a1b      	ldr	r3, [r3, #32]
 8003838:	68f8      	ldr	r0, [r7, #12]
 800383a:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	699a      	ldr	r2, [r3, #24]
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	18d1      	adds	r1, r2, r3
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	68f8      	ldr	r0, [r7, #12]
 800384a:	f000 f8dd 	bl	8003a08 <prvInsertTimerInActiveList>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d1ea      	bne.n	800382a <prvReloadTimer+0xe>
        }
    }
 8003854:	bf00      	nop
 8003856:	bf00      	nop
 8003858:	3710      	adds	r7, #16
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
	...

08003860 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800386a:	4b14      	ldr	r3, [pc, #80]	; (80038bc <prvProcessExpiredTimer+0x5c>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	3304      	adds	r3, #4
 8003878:	4618      	mov	r0, r3
 800387a:	f7fe fced 	bl	8002258 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003884:	f003 0304 	and.w	r3, r3, #4
 8003888:	2b00      	cmp	r3, #0
 800388a:	d005      	beq.n	8003898 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800388c:	683a      	ldr	r2, [r7, #0]
 800388e:	6879      	ldr	r1, [r7, #4]
 8003890:	68f8      	ldr	r0, [r7, #12]
 8003892:	f7ff ffc3 	bl	800381c <prvReloadTimer>
 8003896:	e008      	b.n	80038aa <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800389e:	f023 0301 	bic.w	r3, r3, #1
 80038a2:	b2da      	uxtb	r2, r3
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6a1b      	ldr	r3, [r3, #32]
 80038ae:	68f8      	ldr	r0, [r7, #12]
 80038b0:	4798      	blx	r3
    }
 80038b2:	bf00      	nop
 80038b4:	3710      	adds	r7, #16
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	2000036c 	.word	0x2000036c

080038c0 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80038c8:	f107 0308 	add.w	r3, r7, #8
 80038cc:	4618      	mov	r0, r3
 80038ce:	f000 f857 	bl	8003980 <prvGetNextExpireTime>
 80038d2:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	4619      	mov	r1, r3
 80038d8:	68f8      	ldr	r0, [r7, #12]
 80038da:	f000 f803 	bl	80038e4 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80038de:	f000 f8d5 	bl	8003a8c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80038e2:	e7f1      	b.n	80038c8 <prvTimerTask+0x8>

080038e4 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80038ee:	f7ff f9bf 	bl	8002c70 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80038f2:	f107 0308 	add.w	r3, r7, #8
 80038f6:	4618      	mov	r0, r3
 80038f8:	f000 f866 	bl	80039c8 <prvSampleTimeNow>
 80038fc:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d130      	bne.n	8003966 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d10a      	bne.n	8003920 <prvProcessTimerOrBlockTask+0x3c>
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	429a      	cmp	r2, r3
 8003910:	d806      	bhi.n	8003920 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003912:	f7ff f9bb 	bl	8002c8c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003916:	68f9      	ldr	r1, [r7, #12]
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f7ff ffa1 	bl	8003860 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800391e:	e024      	b.n	800396a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d008      	beq.n	8003938 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003926:	4b13      	ldr	r3, [pc, #76]	; (8003974 <prvProcessTimerOrBlockTask+0x90>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d101      	bne.n	8003934 <prvProcessTimerOrBlockTask+0x50>
 8003930:	2301      	movs	r3, #1
 8003932:	e000      	b.n	8003936 <prvProcessTimerOrBlockTask+0x52>
 8003934:	2300      	movs	r3, #0
 8003936:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003938:	4b0f      	ldr	r3, [pc, #60]	; (8003978 <prvProcessTimerOrBlockTask+0x94>)
 800393a:	6818      	ldr	r0, [r3, #0]
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	683a      	ldr	r2, [r7, #0]
 8003944:	4619      	mov	r1, r3
 8003946:	f7fe ff6f 	bl	8002828 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800394a:	f7ff f99f 	bl	8002c8c <xTaskResumeAll>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d10a      	bne.n	800396a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003954:	4b09      	ldr	r3, [pc, #36]	; (800397c <prvProcessTimerOrBlockTask+0x98>)
 8003956:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800395a:	601a      	str	r2, [r3, #0]
 800395c:	f3bf 8f4f 	dsb	sy
 8003960:	f3bf 8f6f 	isb	sy
    }
 8003964:	e001      	b.n	800396a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003966:	f7ff f991 	bl	8002c8c <xTaskResumeAll>
    }
 800396a:	bf00      	nop
 800396c:	3710      	adds	r7, #16
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	20000370 	.word	0x20000370
 8003978:	20000374 	.word	0x20000374
 800397c:	e000ed04 	.word	0xe000ed04

08003980 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003980:	b480      	push	{r7}
 8003982:	b085      	sub	sp, #20
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003988:	4b0e      	ldr	r3, [pc, #56]	; (80039c4 <prvGetNextExpireTime+0x44>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d101      	bne.n	8003996 <prvGetNextExpireTime+0x16>
 8003992:	2201      	movs	r2, #1
 8003994:	e000      	b.n	8003998 <prvGetNextExpireTime+0x18>
 8003996:	2200      	movs	r2, #0
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d105      	bne.n	80039b0 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80039a4:	4b07      	ldr	r3, [pc, #28]	; (80039c4 <prvGetNextExpireTime+0x44>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	60fb      	str	r3, [r7, #12]
 80039ae:	e001      	b.n	80039b4 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80039b0:	2300      	movs	r3, #0
 80039b2:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80039b4:	68fb      	ldr	r3, [r7, #12]
    }
 80039b6:	4618      	mov	r0, r3
 80039b8:	3714      	adds	r7, #20
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr
 80039c2:	bf00      	nop
 80039c4:	2000036c 	.word	0x2000036c

080039c8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80039d0:	f7ff fa58 	bl	8002e84 <xTaskGetTickCount>
 80039d4:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80039d6:	4b0b      	ldr	r3, [pc, #44]	; (8003a04 <prvSampleTimeNow+0x3c>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	68fa      	ldr	r2, [r7, #12]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d205      	bcs.n	80039ec <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80039e0:	f000 f912 	bl	8003c08 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	601a      	str	r2, [r3, #0]
 80039ea:	e002      	b.n	80039f2 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80039f2:	4a04      	ldr	r2, [pc, #16]	; (8003a04 <prvSampleTimeNow+0x3c>)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80039f8:	68fb      	ldr	r3, [r7, #12]
    }
 80039fa:	4618      	mov	r0, r3
 80039fc:	3710      	adds	r7, #16
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	2000037c 	.word	0x2000037c

08003a08 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b086      	sub	sp, #24
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	607a      	str	r2, [r7, #4]
 8003a14:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003a16:	2300      	movs	r3, #0
 8003a18:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	68ba      	ldr	r2, [r7, #8]
 8003a1e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	68fa      	ldr	r2, [r7, #12]
 8003a24:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003a26:	68ba      	ldr	r2, [r7, #8]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d812      	bhi.n	8003a54 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	1ad2      	subs	r2, r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	699b      	ldr	r3, [r3, #24]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d302      	bcc.n	8003a42 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	617b      	str	r3, [r7, #20]
 8003a40:	e01b      	b.n	8003a7a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003a42:	4b10      	ldr	r3, [pc, #64]	; (8003a84 <prvInsertTimerInActiveList+0x7c>)
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	3304      	adds	r3, #4
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	4610      	mov	r0, r2
 8003a4e:	f7fe fbca 	bl	80021e6 <vListInsert>
 8003a52:	e012      	b.n	8003a7a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d206      	bcs.n	8003a6a <prvInsertTimerInActiveList+0x62>
 8003a5c:	68ba      	ldr	r2, [r7, #8]
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d302      	bcc.n	8003a6a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003a64:	2301      	movs	r3, #1
 8003a66:	617b      	str	r3, [r7, #20]
 8003a68:	e007      	b.n	8003a7a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003a6a:	4b07      	ldr	r3, [pc, #28]	; (8003a88 <prvInsertTimerInActiveList+0x80>)
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	3304      	adds	r3, #4
 8003a72:	4619      	mov	r1, r3
 8003a74:	4610      	mov	r0, r2
 8003a76:	f7fe fbb6 	bl	80021e6 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003a7a:	697b      	ldr	r3, [r7, #20]
    }
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3718      	adds	r7, #24
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	20000370 	.word	0x20000370
 8003a88:	2000036c 	.word	0x2000036c

08003a8c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b088      	sub	sp, #32
 8003a90:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003a92:	e0a6      	b.n	8003be2 <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	f2c0 80a3 	blt.w	8003be2 <prvProcessReceivedCommands+0x156>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	695b      	ldr	r3, [r3, #20]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d004      	beq.n	8003ab2 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	3304      	adds	r3, #4
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7fe fbd3 	bl	8002258 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003ab2:	1d3b      	adds	r3, r7, #4
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7ff ff87 	bl	80039c8 <prvSampleTimeNow>
 8003aba:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	2b08      	cmp	r3, #8
 8003ac2:	f200 808d 	bhi.w	8003be0 <prvProcessReceivedCommands+0x154>
 8003ac6:	a201      	add	r2, pc, #4	; (adr r2, 8003acc <prvProcessReceivedCommands+0x40>)
 8003ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003acc:	08003af1 	.word	0x08003af1
 8003ad0:	08003af1 	.word	0x08003af1
 8003ad4:	08003b59 	.word	0x08003b59
 8003ad8:	08003b6d 	.word	0x08003b6d
 8003adc:	08003bb7 	.word	0x08003bb7
 8003ae0:	08003af1 	.word	0x08003af1
 8003ae4:	08003af1 	.word	0x08003af1
 8003ae8:	08003b59 	.word	0x08003b59
 8003aec:	08003b6d 	.word	0x08003b6d
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003af6:	f043 0301 	orr.w	r3, r3, #1
 8003afa:	b2da      	uxtb	r2, r3
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003b02:	68fa      	ldr	r2, [r7, #12]
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	699b      	ldr	r3, [r3, #24]
 8003b08:	18d1      	adds	r1, r2, r3
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	69ba      	ldr	r2, [r7, #24]
 8003b0e:	69f8      	ldr	r0, [r7, #28]
 8003b10:	f7ff ff7a 	bl	8003a08 <prvInsertTimerInActiveList>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d063      	beq.n	8003be2 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b20:	f003 0304 	and.w	r3, r3, #4
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d009      	beq.n	8003b3c <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003b28:	68fa      	ldr	r2, [r7, #12]
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	699b      	ldr	r3, [r3, #24]
 8003b2e:	4413      	add	r3, r2
 8003b30:	69ba      	ldr	r2, [r7, #24]
 8003b32:	4619      	mov	r1, r3
 8003b34:	69f8      	ldr	r0, [r7, #28]
 8003b36:	f7ff fe71 	bl	800381c <prvReloadTimer>
 8003b3a:	e008      	b.n	8003b4e <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b42:	f023 0301 	bic.w	r3, r3, #1
 8003b46:	b2da      	uxtb	r2, r3
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	6a1b      	ldr	r3, [r3, #32]
 8003b52:	69f8      	ldr	r0, [r7, #28]
 8003b54:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8003b56:	e044      	b.n	8003be2 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b5e:	f023 0301 	bic.w	r3, r3, #1
 8003b62:	b2da      	uxtb	r2, r3
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003b6a:	e03a      	b.n	8003be2 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b72:	f043 0301 	orr.w	r3, r3, #1
 8003b76:	b2da      	uxtb	r2, r3
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003b7e:	68fa      	ldr	r2, [r7, #12]
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	699b      	ldr	r3, [r3, #24]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d10a      	bne.n	8003ba2 <prvProcessReceivedCommands+0x116>
        __asm volatile
 8003b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b90:	f383 8811 	msr	BASEPRI, r3
 8003b94:	f3bf 8f6f 	isb	sy
 8003b98:	f3bf 8f4f 	dsb	sy
 8003b9c:	617b      	str	r3, [r7, #20]
    }
 8003b9e:	bf00      	nop
 8003ba0:	e7fe      	b.n	8003ba0 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	699a      	ldr	r2, [r3, #24]
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	18d1      	adds	r1, r2, r3
 8003baa:	69bb      	ldr	r3, [r7, #24]
 8003bac:	69ba      	ldr	r2, [r7, #24]
 8003bae:	69f8      	ldr	r0, [r7, #28]
 8003bb0:	f7ff ff2a 	bl	8003a08 <prvInsertTimerInActiveList>
                        break;
 8003bb4:	e015      	b.n	8003be2 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003bbc:	f003 0302 	and.w	r3, r3, #2
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d103      	bne.n	8003bcc <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8003bc4:	69f8      	ldr	r0, [r7, #28]
 8003bc6:	f000 fb43 	bl	8004250 <vPortFree>
 8003bca:	e00a      	b.n	8003be2 <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003bd2:	f023 0301 	bic.w	r3, r3, #1
 8003bd6:	b2da      	uxtb	r2, r3
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003bde:	e000      	b.n	8003be2 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
 8003be0:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003be2:	4b08      	ldr	r3, [pc, #32]	; (8003c04 <prvProcessReceivedCommands+0x178>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f107 0108 	add.w	r1, r7, #8
 8003bea:	2200      	movs	r2, #0
 8003bec:	4618      	mov	r0, r3
 8003bee:	f7fe fc5f 	bl	80024b0 <xQueueReceive>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	f47f af4d 	bne.w	8003a94 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8003bfa:	bf00      	nop
 8003bfc:	bf00      	nop
 8003bfe:	3720      	adds	r7, #32
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	20000374 	.word	0x20000374

08003c08 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003c0e:	e009      	b.n	8003c24 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003c10:	4b0e      	ldr	r3, [pc, #56]	; (8003c4c <prvSwitchTimerLists+0x44>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003c1a:	f04f 31ff 	mov.w	r1, #4294967295
 8003c1e:	6838      	ldr	r0, [r7, #0]
 8003c20:	f7ff fe1e 	bl	8003860 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003c24:	4b09      	ldr	r3, [pc, #36]	; (8003c4c <prvSwitchTimerLists+0x44>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d1f0      	bne.n	8003c10 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003c2e:	4b07      	ldr	r3, [pc, #28]	; (8003c4c <prvSwitchTimerLists+0x44>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003c34:	4b06      	ldr	r3, [pc, #24]	; (8003c50 <prvSwitchTimerLists+0x48>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a04      	ldr	r2, [pc, #16]	; (8003c4c <prvSwitchTimerLists+0x44>)
 8003c3a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003c3c:	4a04      	ldr	r2, [pc, #16]	; (8003c50 <prvSwitchTimerLists+0x48>)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6013      	str	r3, [r2, #0]
    }
 8003c42:	bf00      	nop
 8003c44:	3708      	adds	r7, #8
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	2000036c 	.word	0x2000036c
 8003c50:	20000370 	.word	0x20000370

08003c54 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003c54:	b580      	push	{r7, lr}
 8003c56:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003c58:	f000 f95e 	bl	8003f18 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003c5c:	4b12      	ldr	r3, [pc, #72]	; (8003ca8 <prvCheckForValidListAndQueue+0x54>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d11d      	bne.n	8003ca0 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003c64:	4811      	ldr	r0, [pc, #68]	; (8003cac <prvCheckForValidListAndQueue+0x58>)
 8003c66:	f7fe fa91 	bl	800218c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003c6a:	4811      	ldr	r0, [pc, #68]	; (8003cb0 <prvCheckForValidListAndQueue+0x5c>)
 8003c6c:	f7fe fa8e 	bl	800218c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003c70:	4b10      	ldr	r3, [pc, #64]	; (8003cb4 <prvCheckForValidListAndQueue+0x60>)
 8003c72:	4a0e      	ldr	r2, [pc, #56]	; (8003cac <prvCheckForValidListAndQueue+0x58>)
 8003c74:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003c76:	4b10      	ldr	r3, [pc, #64]	; (8003cb8 <prvCheckForValidListAndQueue+0x64>)
 8003c78:	4a0d      	ldr	r2, [pc, #52]	; (8003cb0 <prvCheckForValidListAndQueue+0x5c>)
 8003c7a:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	210c      	movs	r1, #12
 8003c80:	200a      	movs	r0, #10
 8003c82:	f7fe fba3 	bl	80023cc <xQueueGenericCreate>
 8003c86:	4603      	mov	r3, r0
 8003c88:	4a07      	ldr	r2, [pc, #28]	; (8003ca8 <prvCheckForValidListAndQueue+0x54>)
 8003c8a:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8003c8c:	4b06      	ldr	r3, [pc, #24]	; (8003ca8 <prvCheckForValidListAndQueue+0x54>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d005      	beq.n	8003ca0 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003c94:	4b04      	ldr	r3, [pc, #16]	; (8003ca8 <prvCheckForValidListAndQueue+0x54>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4908      	ldr	r1, [pc, #32]	; (8003cbc <prvCheckForValidListAndQueue+0x68>)
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7fe fd76 	bl	800278c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003ca0:	f000 f96a 	bl	8003f78 <vPortExitCritical>
    }
 8003ca4:	bf00      	nop
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	20000374 	.word	0x20000374
 8003cac:	20000344 	.word	0x20000344
 8003cb0:	20000358 	.word	0x20000358
 8003cb4:	2000036c 	.word	0x2000036c
 8003cb8:	20000370 	.word	0x20000370
 8003cbc:	08006e08 	.word	0x08006e08

08003cc0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b085      	sub	sp, #20
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	3b04      	subs	r3, #4
 8003cd0:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003cd8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	3b04      	subs	r3, #4
 8003cde:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	f023 0201 	bic.w	r2, r3, #1
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	3b04      	subs	r3, #4
 8003cee:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003cf0:	4a0c      	ldr	r2, [pc, #48]	; (8003d24 <pxPortInitialiseStack+0x64>)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	3b14      	subs	r3, #20
 8003cfa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	3b04      	subs	r3, #4
 8003d06:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f06f 0202 	mvn.w	r2, #2
 8003d0e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	3b20      	subs	r3, #32
 8003d14:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003d16:	68fb      	ldr	r3, [r7, #12]
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3714      	adds	r7, #20
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr
 8003d24:	08003d29 	.word	0x08003d29

08003d28 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b085      	sub	sp, #20
 8003d2c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003d32:	4b12      	ldr	r3, [pc, #72]	; (8003d7c <prvTaskExitError+0x54>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d3a:	d00a      	beq.n	8003d52 <prvTaskExitError+0x2a>
        __asm volatile
 8003d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d40:	f383 8811 	msr	BASEPRI, r3
 8003d44:	f3bf 8f6f 	isb	sy
 8003d48:	f3bf 8f4f 	dsb	sy
 8003d4c:	60fb      	str	r3, [r7, #12]
    }
 8003d4e:	bf00      	nop
 8003d50:	e7fe      	b.n	8003d50 <prvTaskExitError+0x28>
        __asm volatile
 8003d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d56:	f383 8811 	msr	BASEPRI, r3
 8003d5a:	f3bf 8f6f 	isb	sy
 8003d5e:	f3bf 8f4f 	dsb	sy
 8003d62:	60bb      	str	r3, [r7, #8]
    }
 8003d64:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003d66:	bf00      	nop
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d0fc      	beq.n	8003d68 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003d6e:	bf00      	nop
 8003d70:	bf00      	nop
 8003d72:	3714      	adds	r7, #20
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr
 8003d7c:	20000010 	.word	0x20000010

08003d80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003d80:	4b07      	ldr	r3, [pc, #28]	; (8003da0 <pxCurrentTCBConst2>)
 8003d82:	6819      	ldr	r1, [r3, #0]
 8003d84:	6808      	ldr	r0, [r1, #0]
 8003d86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d8a:	f380 8809 	msr	PSP, r0
 8003d8e:	f3bf 8f6f 	isb	sy
 8003d92:	f04f 0000 	mov.w	r0, #0
 8003d96:	f380 8811 	msr	BASEPRI, r0
 8003d9a:	4770      	bx	lr
 8003d9c:	f3af 8000 	nop.w

08003da0 <pxCurrentTCBConst2>:
 8003da0:	20000240 	.word	0x20000240
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003da4:	bf00      	nop
 8003da6:	bf00      	nop

08003da8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003da8:	4808      	ldr	r0, [pc, #32]	; (8003dcc <prvPortStartFirstTask+0x24>)
 8003daa:	6800      	ldr	r0, [r0, #0]
 8003dac:	6800      	ldr	r0, [r0, #0]
 8003dae:	f380 8808 	msr	MSP, r0
 8003db2:	f04f 0000 	mov.w	r0, #0
 8003db6:	f380 8814 	msr	CONTROL, r0
 8003dba:	b662      	cpsie	i
 8003dbc:	b661      	cpsie	f
 8003dbe:	f3bf 8f4f 	dsb	sy
 8003dc2:	f3bf 8f6f 	isb	sy
 8003dc6:	df00      	svc	0
 8003dc8:	bf00      	nop
 8003dca:	0000      	.short	0x0000
 8003dcc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003dd0:	bf00      	nop
 8003dd2:	bf00      	nop

08003dd4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b086      	sub	sp, #24
 8003dd8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003dda:	4b46      	ldr	r3, [pc, #280]	; (8003ef4 <xPortStartScheduler+0x120>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a46      	ldr	r2, [pc, #280]	; (8003ef8 <xPortStartScheduler+0x124>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d10a      	bne.n	8003dfa <xPortStartScheduler+0x26>
        __asm volatile
 8003de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de8:	f383 8811 	msr	BASEPRI, r3
 8003dec:	f3bf 8f6f 	isb	sy
 8003df0:	f3bf 8f4f 	dsb	sy
 8003df4:	613b      	str	r3, [r7, #16]
    }
 8003df6:	bf00      	nop
 8003df8:	e7fe      	b.n	8003df8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003dfa:	4b3e      	ldr	r3, [pc, #248]	; (8003ef4 <xPortStartScheduler+0x120>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a3f      	ldr	r2, [pc, #252]	; (8003efc <xPortStartScheduler+0x128>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d10a      	bne.n	8003e1a <xPortStartScheduler+0x46>
        __asm volatile
 8003e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e08:	f383 8811 	msr	BASEPRI, r3
 8003e0c:	f3bf 8f6f 	isb	sy
 8003e10:	f3bf 8f4f 	dsb	sy
 8003e14:	60fb      	str	r3, [r7, #12]
    }
 8003e16:	bf00      	nop
 8003e18:	e7fe      	b.n	8003e18 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003e1a:	4b39      	ldr	r3, [pc, #228]	; (8003f00 <xPortStartScheduler+0x12c>)
 8003e1c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	22ff      	movs	r2, #255	; 0xff
 8003e2a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003e34:	78fb      	ldrb	r3, [r7, #3]
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003e3c:	b2da      	uxtb	r2, r3
 8003e3e:	4b31      	ldr	r3, [pc, #196]	; (8003f04 <xPortStartScheduler+0x130>)
 8003e40:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003e42:	4b31      	ldr	r3, [pc, #196]	; (8003f08 <xPortStartScheduler+0x134>)
 8003e44:	2207      	movs	r2, #7
 8003e46:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003e48:	e009      	b.n	8003e5e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 8003e4a:	4b2f      	ldr	r3, [pc, #188]	; (8003f08 <xPortStartScheduler+0x134>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	4a2d      	ldr	r2, [pc, #180]	; (8003f08 <xPortStartScheduler+0x134>)
 8003e52:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003e54:	78fb      	ldrb	r3, [r7, #3]
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	005b      	lsls	r3, r3, #1
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003e5e:	78fb      	ldrb	r3, [r7, #3]
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e66:	2b80      	cmp	r3, #128	; 0x80
 8003e68:	d0ef      	beq.n	8003e4a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003e6a:	4b27      	ldr	r3, [pc, #156]	; (8003f08 <xPortStartScheduler+0x134>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f1c3 0307 	rsb	r3, r3, #7
 8003e72:	2b04      	cmp	r3, #4
 8003e74:	d00a      	beq.n	8003e8c <xPortStartScheduler+0xb8>
        __asm volatile
 8003e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e7a:	f383 8811 	msr	BASEPRI, r3
 8003e7e:	f3bf 8f6f 	isb	sy
 8003e82:	f3bf 8f4f 	dsb	sy
 8003e86:	60bb      	str	r3, [r7, #8]
    }
 8003e88:	bf00      	nop
 8003e8a:	e7fe      	b.n	8003e8a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003e8c:	4b1e      	ldr	r3, [pc, #120]	; (8003f08 <xPortStartScheduler+0x134>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	021b      	lsls	r3, r3, #8
 8003e92:	4a1d      	ldr	r2, [pc, #116]	; (8003f08 <xPortStartScheduler+0x134>)
 8003e94:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003e96:	4b1c      	ldr	r3, [pc, #112]	; (8003f08 <xPortStartScheduler+0x134>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e9e:	4a1a      	ldr	r2, [pc, #104]	; (8003f08 <xPortStartScheduler+0x134>)
 8003ea0:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	b2da      	uxtb	r2, r3
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003eaa:	4b18      	ldr	r3, [pc, #96]	; (8003f0c <xPortStartScheduler+0x138>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a17      	ldr	r2, [pc, #92]	; (8003f0c <xPortStartScheduler+0x138>)
 8003eb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003eb4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003eb6:	4b15      	ldr	r3, [pc, #84]	; (8003f0c <xPortStartScheduler+0x138>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a14      	ldr	r2, [pc, #80]	; (8003f0c <xPortStartScheduler+0x138>)
 8003ebc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003ec0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003ec2:	f000 f8db 	bl	800407c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003ec6:	4b12      	ldr	r3, [pc, #72]	; (8003f10 <xPortStartScheduler+0x13c>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003ecc:	f000 f8fa 	bl	80040c4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003ed0:	4b10      	ldr	r3, [pc, #64]	; (8003f14 <xPortStartScheduler+0x140>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a0f      	ldr	r2, [pc, #60]	; (8003f14 <xPortStartScheduler+0x140>)
 8003ed6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003eda:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003edc:	f7ff ff64 	bl	8003da8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003ee0:	f7ff f8f6 	bl	80030d0 <vTaskSwitchContext>
    prvTaskExitError();
 8003ee4:	f7ff ff20 	bl	8003d28 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3718      	adds	r7, #24
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	e000ed00 	.word	0xe000ed00
 8003ef8:	410fc271 	.word	0x410fc271
 8003efc:	410fc270 	.word	0x410fc270
 8003f00:	e000e400 	.word	0xe000e400
 8003f04:	20000380 	.word	0x20000380
 8003f08:	20000384 	.word	0x20000384
 8003f0c:	e000ed20 	.word	0xe000ed20
 8003f10:	20000010 	.word	0x20000010
 8003f14:	e000ef34 	.word	0xe000ef34

08003f18 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
        __asm volatile
 8003f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f22:	f383 8811 	msr	BASEPRI, r3
 8003f26:	f3bf 8f6f 	isb	sy
 8003f2a:	f3bf 8f4f 	dsb	sy
 8003f2e:	607b      	str	r3, [r7, #4]
    }
 8003f30:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003f32:	4b0f      	ldr	r3, [pc, #60]	; (8003f70 <vPortEnterCritical+0x58>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	3301      	adds	r3, #1
 8003f38:	4a0d      	ldr	r2, [pc, #52]	; (8003f70 <vPortEnterCritical+0x58>)
 8003f3a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003f3c:	4b0c      	ldr	r3, [pc, #48]	; (8003f70 <vPortEnterCritical+0x58>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d10f      	bne.n	8003f64 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003f44:	4b0b      	ldr	r3, [pc, #44]	; (8003f74 <vPortEnterCritical+0x5c>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d00a      	beq.n	8003f64 <vPortEnterCritical+0x4c>
        __asm volatile
 8003f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f52:	f383 8811 	msr	BASEPRI, r3
 8003f56:	f3bf 8f6f 	isb	sy
 8003f5a:	f3bf 8f4f 	dsb	sy
 8003f5e:	603b      	str	r3, [r7, #0]
    }
 8003f60:	bf00      	nop
 8003f62:	e7fe      	b.n	8003f62 <vPortEnterCritical+0x4a>
    }
}
 8003f64:	bf00      	nop
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr
 8003f70:	20000010 	.word	0x20000010
 8003f74:	e000ed04 	.word	0xe000ed04

08003f78 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003f7e:	4b12      	ldr	r3, [pc, #72]	; (8003fc8 <vPortExitCritical+0x50>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d10a      	bne.n	8003f9c <vPortExitCritical+0x24>
        __asm volatile
 8003f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f8a:	f383 8811 	msr	BASEPRI, r3
 8003f8e:	f3bf 8f6f 	isb	sy
 8003f92:	f3bf 8f4f 	dsb	sy
 8003f96:	607b      	str	r3, [r7, #4]
    }
 8003f98:	bf00      	nop
 8003f9a:	e7fe      	b.n	8003f9a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003f9c:	4b0a      	ldr	r3, [pc, #40]	; (8003fc8 <vPortExitCritical+0x50>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	3b01      	subs	r3, #1
 8003fa2:	4a09      	ldr	r2, [pc, #36]	; (8003fc8 <vPortExitCritical+0x50>)
 8003fa4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003fa6:	4b08      	ldr	r3, [pc, #32]	; (8003fc8 <vPortExitCritical+0x50>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d105      	bne.n	8003fba <vPortExitCritical+0x42>
 8003fae:	2300      	movs	r3, #0
 8003fb0:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003fb8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003fba:	bf00      	nop
 8003fbc:	370c      	adds	r7, #12
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr
 8003fc6:	bf00      	nop
 8003fc8:	20000010 	.word	0x20000010
 8003fcc:	00000000 	.word	0x00000000

08003fd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003fd0:	f3ef 8009 	mrs	r0, PSP
 8003fd4:	f3bf 8f6f 	isb	sy
 8003fd8:	4b15      	ldr	r3, [pc, #84]	; (8004030 <pxCurrentTCBConst>)
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	f01e 0f10 	tst.w	lr, #16
 8003fe0:	bf08      	it	eq
 8003fe2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003fe6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fea:	6010      	str	r0, [r2, #0]
 8003fec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003ff0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003ff4:	f380 8811 	msr	BASEPRI, r0
 8003ff8:	f3bf 8f4f 	dsb	sy
 8003ffc:	f3bf 8f6f 	isb	sy
 8004000:	f7ff f866 	bl	80030d0 <vTaskSwitchContext>
 8004004:	f04f 0000 	mov.w	r0, #0
 8004008:	f380 8811 	msr	BASEPRI, r0
 800400c:	bc09      	pop	{r0, r3}
 800400e:	6819      	ldr	r1, [r3, #0]
 8004010:	6808      	ldr	r0, [r1, #0]
 8004012:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004016:	f01e 0f10 	tst.w	lr, #16
 800401a:	bf08      	it	eq
 800401c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004020:	f380 8809 	msr	PSP, r0
 8004024:	f3bf 8f6f 	isb	sy
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	f3af 8000 	nop.w

08004030 <pxCurrentTCBConst>:
 8004030:	20000240 	.word	0x20000240
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004034:	bf00      	nop
 8004036:	bf00      	nop

08004038 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b082      	sub	sp, #8
 800403c:	af00      	add	r7, sp, #0
        __asm volatile
 800403e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004042:	f383 8811 	msr	BASEPRI, r3
 8004046:	f3bf 8f6f 	isb	sy
 800404a:	f3bf 8f4f 	dsb	sy
 800404e:	607b      	str	r3, [r7, #4]
    }
 8004050:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004052:	f7fe ff27 	bl	8002ea4 <xTaskIncrementTick>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d003      	beq.n	8004064 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800405c:	4b06      	ldr	r3, [pc, #24]	; (8004078 <SysTick_Handler+0x40>)
 800405e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004062:	601a      	str	r2, [r3, #0]
 8004064:	2300      	movs	r3, #0
 8004066:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	f383 8811 	msr	BASEPRI, r3
    }
 800406e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8004070:	bf00      	nop
 8004072:	3708      	adds	r7, #8
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	e000ed04 	.word	0xe000ed04

0800407c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800407c:	b480      	push	{r7}
 800407e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004080:	4b0b      	ldr	r3, [pc, #44]	; (80040b0 <vPortSetupTimerInterrupt+0x34>)
 8004082:	2200      	movs	r2, #0
 8004084:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004086:	4b0b      	ldr	r3, [pc, #44]	; (80040b4 <vPortSetupTimerInterrupt+0x38>)
 8004088:	2200      	movs	r2, #0
 800408a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800408c:	4b0a      	ldr	r3, [pc, #40]	; (80040b8 <vPortSetupTimerInterrupt+0x3c>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a0a      	ldr	r2, [pc, #40]	; (80040bc <vPortSetupTimerInterrupt+0x40>)
 8004092:	fba2 2303 	umull	r2, r3, r2, r3
 8004096:	099b      	lsrs	r3, r3, #6
 8004098:	4a09      	ldr	r2, [pc, #36]	; (80040c0 <vPortSetupTimerInterrupt+0x44>)
 800409a:	3b01      	subs	r3, #1
 800409c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800409e:	4b04      	ldr	r3, [pc, #16]	; (80040b0 <vPortSetupTimerInterrupt+0x34>)
 80040a0:	2207      	movs	r2, #7
 80040a2:	601a      	str	r2, [r3, #0]
}
 80040a4:	bf00      	nop
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	e000e010 	.word	0xe000e010
 80040b4:	e000e018 	.word	0xe000e018
 80040b8:	20000000 	.word	0x20000000
 80040bc:	10624dd3 	.word	0x10624dd3
 80040c0:	e000e014 	.word	0xe000e014

080040c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80040c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80040d4 <vPortEnableVFP+0x10>
 80040c8:	6801      	ldr	r1, [r0, #0]
 80040ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80040ce:	6001      	str	r1, [r0, #0]
 80040d0:	4770      	bx	lr
 80040d2:	0000      	.short	0x0000
 80040d4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80040d8:	bf00      	nop
 80040da:	bf00      	nop

080040dc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b08a      	sub	sp, #40	; 0x28
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80040e4:	2300      	movs	r3, #0
 80040e6:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 80040e8:	f7fe fdc2 	bl	8002c70 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80040ec:	4b53      	ldr	r3, [pc, #332]	; (800423c <pvPortMalloc+0x160>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d101      	bne.n	80040f8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80040f4:	f000 f908 	bl	8004308 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d012      	beq.n	8004124 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80040fe:	2208      	movs	r2, #8
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f003 0307 	and.w	r3, r3, #7
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	3308      	adds	r3, #8
 800410a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	43db      	mvns	r3, r3
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	429a      	cmp	r2, r3
 8004114:	d804      	bhi.n	8004120 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	69bb      	ldr	r3, [r7, #24]
 800411a:	4413      	add	r3, r2
 800411c:	607b      	str	r3, [r7, #4]
 800411e:	e001      	b.n	8004124 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8004120:	2300      	movs	r3, #0
 8004122:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2b00      	cmp	r3, #0
 8004128:	db70      	blt.n	800420c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d06d      	beq.n	800420c <pvPortMalloc+0x130>
 8004130:	4b43      	ldr	r3, [pc, #268]	; (8004240 <pvPortMalloc+0x164>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	429a      	cmp	r2, r3
 8004138:	d868      	bhi.n	800420c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800413a:	4b42      	ldr	r3, [pc, #264]	; (8004244 <pvPortMalloc+0x168>)
 800413c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800413e:	4b41      	ldr	r3, [pc, #260]	; (8004244 <pvPortMalloc+0x168>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004144:	e004      	b.n	8004150 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8004146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004148:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800414a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	429a      	cmp	r2, r3
 8004158:	d903      	bls.n	8004162 <pvPortMalloc+0x86>
 800415a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d1f1      	bne.n	8004146 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004162:	4b36      	ldr	r3, [pc, #216]	; (800423c <pvPortMalloc+0x160>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004168:	429a      	cmp	r2, r3
 800416a:	d04f      	beq.n	800420c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800416c:	6a3b      	ldr	r3, [r7, #32]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2208      	movs	r2, #8
 8004172:	4413      	add	r3, r2
 8004174:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	6a3b      	ldr	r3, [r7, #32]
 800417c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800417e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004180:	685a      	ldr	r2, [r3, #4]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	1ad2      	subs	r2, r2, r3
 8004186:	2308      	movs	r3, #8
 8004188:	005b      	lsls	r3, r3, #1
 800418a:	429a      	cmp	r2, r3
 800418c:	d91f      	bls.n	80041ce <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800418e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4413      	add	r3, r2
 8004194:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	f003 0307 	and.w	r3, r3, #7
 800419c:	2b00      	cmp	r3, #0
 800419e:	d00a      	beq.n	80041b6 <pvPortMalloc+0xda>
        __asm volatile
 80041a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a4:	f383 8811 	msr	BASEPRI, r3
 80041a8:	f3bf 8f6f 	isb	sy
 80041ac:	f3bf 8f4f 	dsb	sy
 80041b0:	613b      	str	r3, [r7, #16]
    }
 80041b2:	bf00      	nop
 80041b4:	e7fe      	b.n	80041b4 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80041b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b8:	685a      	ldr	r2, [r3, #4]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	1ad2      	subs	r2, r2, r3
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80041c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80041c8:	6978      	ldr	r0, [r7, #20]
 80041ca:	f000 f8f9 	bl	80043c0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80041ce:	4b1c      	ldr	r3, [pc, #112]	; (8004240 <pvPortMalloc+0x164>)
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	4a19      	ldr	r2, [pc, #100]	; (8004240 <pvPortMalloc+0x164>)
 80041da:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80041dc:	4b18      	ldr	r3, [pc, #96]	; (8004240 <pvPortMalloc+0x164>)
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	4b19      	ldr	r3, [pc, #100]	; (8004248 <pvPortMalloc+0x16c>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d203      	bcs.n	80041f0 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80041e8:	4b15      	ldr	r3, [pc, #84]	; (8004240 <pvPortMalloc+0x164>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a16      	ldr	r2, [pc, #88]	; (8004248 <pvPortMalloc+0x16c>)
 80041ee:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80041f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80041f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fa:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80041fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fe:	2200      	movs	r2, #0
 8004200:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004202:	4b12      	ldr	r3, [pc, #72]	; (800424c <pvPortMalloc+0x170>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	3301      	adds	r3, #1
 8004208:	4a10      	ldr	r2, [pc, #64]	; (800424c <pvPortMalloc+0x170>)
 800420a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800420c:	f7fe fd3e 	bl	8002c8c <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004210:	69fb      	ldr	r3, [r7, #28]
 8004212:	f003 0307 	and.w	r3, r3, #7
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00a      	beq.n	8004230 <pvPortMalloc+0x154>
        __asm volatile
 800421a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800421e:	f383 8811 	msr	BASEPRI, r3
 8004222:	f3bf 8f6f 	isb	sy
 8004226:	f3bf 8f4f 	dsb	sy
 800422a:	60fb      	str	r3, [r7, #12]
    }
 800422c:	bf00      	nop
 800422e:	e7fe      	b.n	800422e <pvPortMalloc+0x152>
    return pvReturn;
 8004230:	69fb      	ldr	r3, [r7, #28]
}
 8004232:	4618      	mov	r0, r3
 8004234:	3728      	adds	r7, #40	; 0x28
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	20003f90 	.word	0x20003f90
 8004240:	20003f94 	.word	0x20003f94
 8004244:	20003f88 	.word	0x20003f88
 8004248:	20003f98 	.word	0x20003f98
 800424c:	20003f9c 	.word	0x20003f9c

08004250 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b086      	sub	sp, #24
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d049      	beq.n	80042f6 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004262:	2308      	movs	r3, #8
 8004264:	425b      	negs	r3, r3
 8004266:	697a      	ldr	r2, [r7, #20]
 8004268:	4413      	add	r3, r2
 800426a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	2b00      	cmp	r3, #0
 8004276:	db0a      	blt.n	800428e <vPortFree+0x3e>
        __asm volatile
 8004278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800427c:	f383 8811 	msr	BASEPRI, r3
 8004280:	f3bf 8f6f 	isb	sy
 8004284:	f3bf 8f4f 	dsb	sy
 8004288:	60fb      	str	r3, [r7, #12]
    }
 800428a:	bf00      	nop
 800428c:	e7fe      	b.n	800428c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00a      	beq.n	80042ac <vPortFree+0x5c>
        __asm volatile
 8004296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800429a:	f383 8811 	msr	BASEPRI, r3
 800429e:	f3bf 8f6f 	isb	sy
 80042a2:	f3bf 8f4f 	dsb	sy
 80042a6:	60bb      	str	r3, [r7, #8]
    }
 80042a8:	bf00      	nop
 80042aa:	e7fe      	b.n	80042aa <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	0fdb      	lsrs	r3, r3, #31
 80042b2:	f003 0301 	and.w	r3, r3, #1
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d01c      	beq.n	80042f6 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d118      	bne.n	80042f6 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 80042d0:	f7fe fcce 	bl	8002c70 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	685a      	ldr	r2, [r3, #4]
 80042d8:	4b09      	ldr	r3, [pc, #36]	; (8004300 <vPortFree+0xb0>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4413      	add	r3, r2
 80042de:	4a08      	ldr	r2, [pc, #32]	; (8004300 <vPortFree+0xb0>)
 80042e0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80042e2:	6938      	ldr	r0, [r7, #16]
 80042e4:	f000 f86c 	bl	80043c0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80042e8:	4b06      	ldr	r3, [pc, #24]	; (8004304 <vPortFree+0xb4>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	3301      	adds	r3, #1
 80042ee:	4a05      	ldr	r2, [pc, #20]	; (8004304 <vPortFree+0xb4>)
 80042f0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80042f2:	f7fe fccb 	bl	8002c8c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80042f6:	bf00      	nop
 80042f8:	3718      	adds	r7, #24
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	20003f94 	.word	0x20003f94
 8004304:	20003fa0 	.word	0x20003fa0

08004308 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004308:	b480      	push	{r7}
 800430a:	b085      	sub	sp, #20
 800430c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800430e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004312:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004314:	4b25      	ldr	r3, [pc, #148]	; (80043ac <prvHeapInit+0xa4>)
 8004316:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f003 0307 	and.w	r3, r3, #7
 800431e:	2b00      	cmp	r3, #0
 8004320:	d00c      	beq.n	800433c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	3307      	adds	r3, #7
 8004326:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f023 0307 	bic.w	r3, r3, #7
 800432e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004330:	68ba      	ldr	r2, [r7, #8]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	4a1d      	ldr	r2, [pc, #116]	; (80043ac <prvHeapInit+0xa4>)
 8004338:	4413      	add	r3, r2
 800433a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004340:	4a1b      	ldr	r2, [pc, #108]	; (80043b0 <prvHeapInit+0xa8>)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004346:	4b1a      	ldr	r3, [pc, #104]	; (80043b0 <prvHeapInit+0xa8>)
 8004348:	2200      	movs	r2, #0
 800434a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	68ba      	ldr	r2, [r7, #8]
 8004350:	4413      	add	r3, r2
 8004352:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004354:	2208      	movs	r2, #8
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	1a9b      	subs	r3, r3, r2
 800435a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f023 0307 	bic.w	r3, r3, #7
 8004362:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	4a13      	ldr	r2, [pc, #76]	; (80043b4 <prvHeapInit+0xac>)
 8004368:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800436a:	4b12      	ldr	r3, [pc, #72]	; (80043b4 <prvHeapInit+0xac>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2200      	movs	r2, #0
 8004370:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004372:	4b10      	ldr	r3, [pc, #64]	; (80043b4 <prvHeapInit+0xac>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2200      	movs	r2, #0
 8004378:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	68fa      	ldr	r2, [r7, #12]
 8004382:	1ad2      	subs	r2, r2, r3
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004388:	4b0a      	ldr	r3, [pc, #40]	; (80043b4 <prvHeapInit+0xac>)
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	4a08      	ldr	r2, [pc, #32]	; (80043b8 <prvHeapInit+0xb0>)
 8004396:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	4a07      	ldr	r2, [pc, #28]	; (80043bc <prvHeapInit+0xb4>)
 800439e:	6013      	str	r3, [r2, #0]
}
 80043a0:	bf00      	nop
 80043a2:	3714      	adds	r7, #20
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr
 80043ac:	20000388 	.word	0x20000388
 80043b0:	20003f88 	.word	0x20003f88
 80043b4:	20003f90 	.word	0x20003f90
 80043b8:	20003f98 	.word	0x20003f98
 80043bc:	20003f94 	.word	0x20003f94

080043c0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80043c0:	b480      	push	{r7}
 80043c2:	b085      	sub	sp, #20
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80043c8:	4b28      	ldr	r3, [pc, #160]	; (800446c <prvInsertBlockIntoFreeList+0xac>)
 80043ca:	60fb      	str	r3, [r7, #12]
 80043cc:	e002      	b.n	80043d4 <prvInsertBlockIntoFreeList+0x14>
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	60fb      	str	r3, [r7, #12]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d8f7      	bhi.n	80043ce <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	68ba      	ldr	r2, [r7, #8]
 80043e8:	4413      	add	r3, r2
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d108      	bne.n	8004402 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	685a      	ldr	r2, [r3, #4]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	441a      	add	r2, r3
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	68ba      	ldr	r2, [r7, #8]
 800440c:	441a      	add	r2, r3
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	429a      	cmp	r2, r3
 8004414:	d118      	bne.n	8004448 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	4b15      	ldr	r3, [pc, #84]	; (8004470 <prvInsertBlockIntoFreeList+0xb0>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	429a      	cmp	r2, r3
 8004420:	d00d      	beq.n	800443e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	685a      	ldr	r2, [r3, #4]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	441a      	add	r2, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	601a      	str	r2, [r3, #0]
 800443c:	e008      	b.n	8004450 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800443e:	4b0c      	ldr	r3, [pc, #48]	; (8004470 <prvInsertBlockIntoFreeList+0xb0>)
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	601a      	str	r2, [r3, #0]
 8004446:	e003      	b.n	8004450 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004450:	68fa      	ldr	r2, [r7, #12]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	429a      	cmp	r2, r3
 8004456:	d002      	beq.n	800445e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800445e:	bf00      	nop
 8004460:	3714      	adds	r7, #20
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop
 800446c:	20003f88 	.word	0x20003f88
 8004470:	20003f90 	.word	0x20003f90

08004474 <__cvt>:
 8004474:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004478:	ec55 4b10 	vmov	r4, r5, d0
 800447c:	2d00      	cmp	r5, #0
 800447e:	460e      	mov	r6, r1
 8004480:	4619      	mov	r1, r3
 8004482:	462b      	mov	r3, r5
 8004484:	bfbb      	ittet	lt
 8004486:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800448a:	461d      	movlt	r5, r3
 800448c:	2300      	movge	r3, #0
 800448e:	232d      	movlt	r3, #45	; 0x2d
 8004490:	700b      	strb	r3, [r1, #0]
 8004492:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004494:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004498:	4691      	mov	r9, r2
 800449a:	f023 0820 	bic.w	r8, r3, #32
 800449e:	bfbc      	itt	lt
 80044a0:	4622      	movlt	r2, r4
 80044a2:	4614      	movlt	r4, r2
 80044a4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80044a8:	d005      	beq.n	80044b6 <__cvt+0x42>
 80044aa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80044ae:	d100      	bne.n	80044b2 <__cvt+0x3e>
 80044b0:	3601      	adds	r6, #1
 80044b2:	2102      	movs	r1, #2
 80044b4:	e000      	b.n	80044b8 <__cvt+0x44>
 80044b6:	2103      	movs	r1, #3
 80044b8:	ab03      	add	r3, sp, #12
 80044ba:	9301      	str	r3, [sp, #4]
 80044bc:	ab02      	add	r3, sp, #8
 80044be:	9300      	str	r3, [sp, #0]
 80044c0:	ec45 4b10 	vmov	d0, r4, r5
 80044c4:	4653      	mov	r3, sl
 80044c6:	4632      	mov	r2, r6
 80044c8:	f000 fe42 	bl	8005150 <_dtoa_r>
 80044cc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80044d0:	4607      	mov	r7, r0
 80044d2:	d102      	bne.n	80044da <__cvt+0x66>
 80044d4:	f019 0f01 	tst.w	r9, #1
 80044d8:	d022      	beq.n	8004520 <__cvt+0xac>
 80044da:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80044de:	eb07 0906 	add.w	r9, r7, r6
 80044e2:	d110      	bne.n	8004506 <__cvt+0x92>
 80044e4:	783b      	ldrb	r3, [r7, #0]
 80044e6:	2b30      	cmp	r3, #48	; 0x30
 80044e8:	d10a      	bne.n	8004500 <__cvt+0x8c>
 80044ea:	2200      	movs	r2, #0
 80044ec:	2300      	movs	r3, #0
 80044ee:	4620      	mov	r0, r4
 80044f0:	4629      	mov	r1, r5
 80044f2:	f7fc faf1 	bl	8000ad8 <__aeabi_dcmpeq>
 80044f6:	b918      	cbnz	r0, 8004500 <__cvt+0x8c>
 80044f8:	f1c6 0601 	rsb	r6, r6, #1
 80044fc:	f8ca 6000 	str.w	r6, [sl]
 8004500:	f8da 3000 	ldr.w	r3, [sl]
 8004504:	4499      	add	r9, r3
 8004506:	2200      	movs	r2, #0
 8004508:	2300      	movs	r3, #0
 800450a:	4620      	mov	r0, r4
 800450c:	4629      	mov	r1, r5
 800450e:	f7fc fae3 	bl	8000ad8 <__aeabi_dcmpeq>
 8004512:	b108      	cbz	r0, 8004518 <__cvt+0xa4>
 8004514:	f8cd 900c 	str.w	r9, [sp, #12]
 8004518:	2230      	movs	r2, #48	; 0x30
 800451a:	9b03      	ldr	r3, [sp, #12]
 800451c:	454b      	cmp	r3, r9
 800451e:	d307      	bcc.n	8004530 <__cvt+0xbc>
 8004520:	9b03      	ldr	r3, [sp, #12]
 8004522:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004524:	1bdb      	subs	r3, r3, r7
 8004526:	4638      	mov	r0, r7
 8004528:	6013      	str	r3, [r2, #0]
 800452a:	b004      	add	sp, #16
 800452c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004530:	1c59      	adds	r1, r3, #1
 8004532:	9103      	str	r1, [sp, #12]
 8004534:	701a      	strb	r2, [r3, #0]
 8004536:	e7f0      	b.n	800451a <__cvt+0xa6>

08004538 <__exponent>:
 8004538:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800453a:	4603      	mov	r3, r0
 800453c:	2900      	cmp	r1, #0
 800453e:	bfb8      	it	lt
 8004540:	4249      	neglt	r1, r1
 8004542:	f803 2b02 	strb.w	r2, [r3], #2
 8004546:	bfb4      	ite	lt
 8004548:	222d      	movlt	r2, #45	; 0x2d
 800454a:	222b      	movge	r2, #43	; 0x2b
 800454c:	2909      	cmp	r1, #9
 800454e:	7042      	strb	r2, [r0, #1]
 8004550:	dd2a      	ble.n	80045a8 <__exponent+0x70>
 8004552:	f10d 0207 	add.w	r2, sp, #7
 8004556:	4617      	mov	r7, r2
 8004558:	260a      	movs	r6, #10
 800455a:	4694      	mov	ip, r2
 800455c:	fb91 f5f6 	sdiv	r5, r1, r6
 8004560:	fb06 1415 	mls	r4, r6, r5, r1
 8004564:	3430      	adds	r4, #48	; 0x30
 8004566:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800456a:	460c      	mov	r4, r1
 800456c:	2c63      	cmp	r4, #99	; 0x63
 800456e:	f102 32ff 	add.w	r2, r2, #4294967295
 8004572:	4629      	mov	r1, r5
 8004574:	dcf1      	bgt.n	800455a <__exponent+0x22>
 8004576:	3130      	adds	r1, #48	; 0x30
 8004578:	f1ac 0402 	sub.w	r4, ip, #2
 800457c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004580:	1c41      	adds	r1, r0, #1
 8004582:	4622      	mov	r2, r4
 8004584:	42ba      	cmp	r2, r7
 8004586:	d30a      	bcc.n	800459e <__exponent+0x66>
 8004588:	f10d 0209 	add.w	r2, sp, #9
 800458c:	eba2 020c 	sub.w	r2, r2, ip
 8004590:	42bc      	cmp	r4, r7
 8004592:	bf88      	it	hi
 8004594:	2200      	movhi	r2, #0
 8004596:	4413      	add	r3, r2
 8004598:	1a18      	subs	r0, r3, r0
 800459a:	b003      	add	sp, #12
 800459c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800459e:	f812 5b01 	ldrb.w	r5, [r2], #1
 80045a2:	f801 5f01 	strb.w	r5, [r1, #1]!
 80045a6:	e7ed      	b.n	8004584 <__exponent+0x4c>
 80045a8:	2330      	movs	r3, #48	; 0x30
 80045aa:	3130      	adds	r1, #48	; 0x30
 80045ac:	7083      	strb	r3, [r0, #2]
 80045ae:	70c1      	strb	r1, [r0, #3]
 80045b0:	1d03      	adds	r3, r0, #4
 80045b2:	e7f1      	b.n	8004598 <__exponent+0x60>

080045b4 <_printf_float>:
 80045b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045b8:	ed2d 8b02 	vpush	{d8}
 80045bc:	b08d      	sub	sp, #52	; 0x34
 80045be:	460c      	mov	r4, r1
 80045c0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80045c4:	4616      	mov	r6, r2
 80045c6:	461f      	mov	r7, r3
 80045c8:	4605      	mov	r5, r0
 80045ca:	f000 fcb5 	bl	8004f38 <_localeconv_r>
 80045ce:	f8d0 a000 	ldr.w	sl, [r0]
 80045d2:	4650      	mov	r0, sl
 80045d4:	f7fb fe54 	bl	8000280 <strlen>
 80045d8:	2300      	movs	r3, #0
 80045da:	930a      	str	r3, [sp, #40]	; 0x28
 80045dc:	6823      	ldr	r3, [r4, #0]
 80045de:	9305      	str	r3, [sp, #20]
 80045e0:	f8d8 3000 	ldr.w	r3, [r8]
 80045e4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80045e8:	3307      	adds	r3, #7
 80045ea:	f023 0307 	bic.w	r3, r3, #7
 80045ee:	f103 0208 	add.w	r2, r3, #8
 80045f2:	f8c8 2000 	str.w	r2, [r8]
 80045f6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80045fa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80045fe:	9307      	str	r3, [sp, #28]
 8004600:	f8cd 8018 	str.w	r8, [sp, #24]
 8004604:	ee08 0a10 	vmov	s16, r0
 8004608:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800460c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004610:	4b9e      	ldr	r3, [pc, #632]	; (800488c <_printf_float+0x2d8>)
 8004612:	f04f 32ff 	mov.w	r2, #4294967295
 8004616:	f7fc fa91 	bl	8000b3c <__aeabi_dcmpun>
 800461a:	bb88      	cbnz	r0, 8004680 <_printf_float+0xcc>
 800461c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004620:	4b9a      	ldr	r3, [pc, #616]	; (800488c <_printf_float+0x2d8>)
 8004622:	f04f 32ff 	mov.w	r2, #4294967295
 8004626:	f7fc fa6b 	bl	8000b00 <__aeabi_dcmple>
 800462a:	bb48      	cbnz	r0, 8004680 <_printf_float+0xcc>
 800462c:	2200      	movs	r2, #0
 800462e:	2300      	movs	r3, #0
 8004630:	4640      	mov	r0, r8
 8004632:	4649      	mov	r1, r9
 8004634:	f7fc fa5a 	bl	8000aec <__aeabi_dcmplt>
 8004638:	b110      	cbz	r0, 8004640 <_printf_float+0x8c>
 800463a:	232d      	movs	r3, #45	; 0x2d
 800463c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004640:	4a93      	ldr	r2, [pc, #588]	; (8004890 <_printf_float+0x2dc>)
 8004642:	4b94      	ldr	r3, [pc, #592]	; (8004894 <_printf_float+0x2e0>)
 8004644:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004648:	bf94      	ite	ls
 800464a:	4690      	movls	r8, r2
 800464c:	4698      	movhi	r8, r3
 800464e:	2303      	movs	r3, #3
 8004650:	6123      	str	r3, [r4, #16]
 8004652:	9b05      	ldr	r3, [sp, #20]
 8004654:	f023 0304 	bic.w	r3, r3, #4
 8004658:	6023      	str	r3, [r4, #0]
 800465a:	f04f 0900 	mov.w	r9, #0
 800465e:	9700      	str	r7, [sp, #0]
 8004660:	4633      	mov	r3, r6
 8004662:	aa0b      	add	r2, sp, #44	; 0x2c
 8004664:	4621      	mov	r1, r4
 8004666:	4628      	mov	r0, r5
 8004668:	f000 f9da 	bl	8004a20 <_printf_common>
 800466c:	3001      	adds	r0, #1
 800466e:	f040 8090 	bne.w	8004792 <_printf_float+0x1de>
 8004672:	f04f 30ff 	mov.w	r0, #4294967295
 8004676:	b00d      	add	sp, #52	; 0x34
 8004678:	ecbd 8b02 	vpop	{d8}
 800467c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004680:	4642      	mov	r2, r8
 8004682:	464b      	mov	r3, r9
 8004684:	4640      	mov	r0, r8
 8004686:	4649      	mov	r1, r9
 8004688:	f7fc fa58 	bl	8000b3c <__aeabi_dcmpun>
 800468c:	b140      	cbz	r0, 80046a0 <_printf_float+0xec>
 800468e:	464b      	mov	r3, r9
 8004690:	2b00      	cmp	r3, #0
 8004692:	bfbc      	itt	lt
 8004694:	232d      	movlt	r3, #45	; 0x2d
 8004696:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800469a:	4a7f      	ldr	r2, [pc, #508]	; (8004898 <_printf_float+0x2e4>)
 800469c:	4b7f      	ldr	r3, [pc, #508]	; (800489c <_printf_float+0x2e8>)
 800469e:	e7d1      	b.n	8004644 <_printf_float+0x90>
 80046a0:	6863      	ldr	r3, [r4, #4]
 80046a2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80046a6:	9206      	str	r2, [sp, #24]
 80046a8:	1c5a      	adds	r2, r3, #1
 80046aa:	d13f      	bne.n	800472c <_printf_float+0x178>
 80046ac:	2306      	movs	r3, #6
 80046ae:	6063      	str	r3, [r4, #4]
 80046b0:	9b05      	ldr	r3, [sp, #20]
 80046b2:	6861      	ldr	r1, [r4, #4]
 80046b4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80046b8:	2300      	movs	r3, #0
 80046ba:	9303      	str	r3, [sp, #12]
 80046bc:	ab0a      	add	r3, sp, #40	; 0x28
 80046be:	e9cd b301 	strd	fp, r3, [sp, #4]
 80046c2:	ab09      	add	r3, sp, #36	; 0x24
 80046c4:	ec49 8b10 	vmov	d0, r8, r9
 80046c8:	9300      	str	r3, [sp, #0]
 80046ca:	6022      	str	r2, [r4, #0]
 80046cc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80046d0:	4628      	mov	r0, r5
 80046d2:	f7ff fecf 	bl	8004474 <__cvt>
 80046d6:	9b06      	ldr	r3, [sp, #24]
 80046d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80046da:	2b47      	cmp	r3, #71	; 0x47
 80046dc:	4680      	mov	r8, r0
 80046de:	d108      	bne.n	80046f2 <_printf_float+0x13e>
 80046e0:	1cc8      	adds	r0, r1, #3
 80046e2:	db02      	blt.n	80046ea <_printf_float+0x136>
 80046e4:	6863      	ldr	r3, [r4, #4]
 80046e6:	4299      	cmp	r1, r3
 80046e8:	dd41      	ble.n	800476e <_printf_float+0x1ba>
 80046ea:	f1ab 0302 	sub.w	r3, fp, #2
 80046ee:	fa5f fb83 	uxtb.w	fp, r3
 80046f2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80046f6:	d820      	bhi.n	800473a <_printf_float+0x186>
 80046f8:	3901      	subs	r1, #1
 80046fa:	465a      	mov	r2, fp
 80046fc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004700:	9109      	str	r1, [sp, #36]	; 0x24
 8004702:	f7ff ff19 	bl	8004538 <__exponent>
 8004706:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004708:	1813      	adds	r3, r2, r0
 800470a:	2a01      	cmp	r2, #1
 800470c:	4681      	mov	r9, r0
 800470e:	6123      	str	r3, [r4, #16]
 8004710:	dc02      	bgt.n	8004718 <_printf_float+0x164>
 8004712:	6822      	ldr	r2, [r4, #0]
 8004714:	07d2      	lsls	r2, r2, #31
 8004716:	d501      	bpl.n	800471c <_printf_float+0x168>
 8004718:	3301      	adds	r3, #1
 800471a:	6123      	str	r3, [r4, #16]
 800471c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004720:	2b00      	cmp	r3, #0
 8004722:	d09c      	beq.n	800465e <_printf_float+0xaa>
 8004724:	232d      	movs	r3, #45	; 0x2d
 8004726:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800472a:	e798      	b.n	800465e <_printf_float+0xaa>
 800472c:	9a06      	ldr	r2, [sp, #24]
 800472e:	2a47      	cmp	r2, #71	; 0x47
 8004730:	d1be      	bne.n	80046b0 <_printf_float+0xfc>
 8004732:	2b00      	cmp	r3, #0
 8004734:	d1bc      	bne.n	80046b0 <_printf_float+0xfc>
 8004736:	2301      	movs	r3, #1
 8004738:	e7b9      	b.n	80046ae <_printf_float+0xfa>
 800473a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800473e:	d118      	bne.n	8004772 <_printf_float+0x1be>
 8004740:	2900      	cmp	r1, #0
 8004742:	6863      	ldr	r3, [r4, #4]
 8004744:	dd0b      	ble.n	800475e <_printf_float+0x1aa>
 8004746:	6121      	str	r1, [r4, #16]
 8004748:	b913      	cbnz	r3, 8004750 <_printf_float+0x19c>
 800474a:	6822      	ldr	r2, [r4, #0]
 800474c:	07d0      	lsls	r0, r2, #31
 800474e:	d502      	bpl.n	8004756 <_printf_float+0x1a2>
 8004750:	3301      	adds	r3, #1
 8004752:	440b      	add	r3, r1
 8004754:	6123      	str	r3, [r4, #16]
 8004756:	65a1      	str	r1, [r4, #88]	; 0x58
 8004758:	f04f 0900 	mov.w	r9, #0
 800475c:	e7de      	b.n	800471c <_printf_float+0x168>
 800475e:	b913      	cbnz	r3, 8004766 <_printf_float+0x1b2>
 8004760:	6822      	ldr	r2, [r4, #0]
 8004762:	07d2      	lsls	r2, r2, #31
 8004764:	d501      	bpl.n	800476a <_printf_float+0x1b6>
 8004766:	3302      	adds	r3, #2
 8004768:	e7f4      	b.n	8004754 <_printf_float+0x1a0>
 800476a:	2301      	movs	r3, #1
 800476c:	e7f2      	b.n	8004754 <_printf_float+0x1a0>
 800476e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004772:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004774:	4299      	cmp	r1, r3
 8004776:	db05      	blt.n	8004784 <_printf_float+0x1d0>
 8004778:	6823      	ldr	r3, [r4, #0]
 800477a:	6121      	str	r1, [r4, #16]
 800477c:	07d8      	lsls	r0, r3, #31
 800477e:	d5ea      	bpl.n	8004756 <_printf_float+0x1a2>
 8004780:	1c4b      	adds	r3, r1, #1
 8004782:	e7e7      	b.n	8004754 <_printf_float+0x1a0>
 8004784:	2900      	cmp	r1, #0
 8004786:	bfd4      	ite	le
 8004788:	f1c1 0202 	rsble	r2, r1, #2
 800478c:	2201      	movgt	r2, #1
 800478e:	4413      	add	r3, r2
 8004790:	e7e0      	b.n	8004754 <_printf_float+0x1a0>
 8004792:	6823      	ldr	r3, [r4, #0]
 8004794:	055a      	lsls	r2, r3, #21
 8004796:	d407      	bmi.n	80047a8 <_printf_float+0x1f4>
 8004798:	6923      	ldr	r3, [r4, #16]
 800479a:	4642      	mov	r2, r8
 800479c:	4631      	mov	r1, r6
 800479e:	4628      	mov	r0, r5
 80047a0:	47b8      	blx	r7
 80047a2:	3001      	adds	r0, #1
 80047a4:	d12c      	bne.n	8004800 <_printf_float+0x24c>
 80047a6:	e764      	b.n	8004672 <_printf_float+0xbe>
 80047a8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80047ac:	f240 80e0 	bls.w	8004970 <_printf_float+0x3bc>
 80047b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80047b4:	2200      	movs	r2, #0
 80047b6:	2300      	movs	r3, #0
 80047b8:	f7fc f98e 	bl	8000ad8 <__aeabi_dcmpeq>
 80047bc:	2800      	cmp	r0, #0
 80047be:	d034      	beq.n	800482a <_printf_float+0x276>
 80047c0:	4a37      	ldr	r2, [pc, #220]	; (80048a0 <_printf_float+0x2ec>)
 80047c2:	2301      	movs	r3, #1
 80047c4:	4631      	mov	r1, r6
 80047c6:	4628      	mov	r0, r5
 80047c8:	47b8      	blx	r7
 80047ca:	3001      	adds	r0, #1
 80047cc:	f43f af51 	beq.w	8004672 <_printf_float+0xbe>
 80047d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80047d4:	429a      	cmp	r2, r3
 80047d6:	db02      	blt.n	80047de <_printf_float+0x22a>
 80047d8:	6823      	ldr	r3, [r4, #0]
 80047da:	07d8      	lsls	r0, r3, #31
 80047dc:	d510      	bpl.n	8004800 <_printf_float+0x24c>
 80047de:	ee18 3a10 	vmov	r3, s16
 80047e2:	4652      	mov	r2, sl
 80047e4:	4631      	mov	r1, r6
 80047e6:	4628      	mov	r0, r5
 80047e8:	47b8      	blx	r7
 80047ea:	3001      	adds	r0, #1
 80047ec:	f43f af41 	beq.w	8004672 <_printf_float+0xbe>
 80047f0:	f04f 0800 	mov.w	r8, #0
 80047f4:	f104 091a 	add.w	r9, r4, #26
 80047f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047fa:	3b01      	subs	r3, #1
 80047fc:	4543      	cmp	r3, r8
 80047fe:	dc09      	bgt.n	8004814 <_printf_float+0x260>
 8004800:	6823      	ldr	r3, [r4, #0]
 8004802:	079b      	lsls	r3, r3, #30
 8004804:	f100 8107 	bmi.w	8004a16 <_printf_float+0x462>
 8004808:	68e0      	ldr	r0, [r4, #12]
 800480a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800480c:	4298      	cmp	r0, r3
 800480e:	bfb8      	it	lt
 8004810:	4618      	movlt	r0, r3
 8004812:	e730      	b.n	8004676 <_printf_float+0xc2>
 8004814:	2301      	movs	r3, #1
 8004816:	464a      	mov	r2, r9
 8004818:	4631      	mov	r1, r6
 800481a:	4628      	mov	r0, r5
 800481c:	47b8      	blx	r7
 800481e:	3001      	adds	r0, #1
 8004820:	f43f af27 	beq.w	8004672 <_printf_float+0xbe>
 8004824:	f108 0801 	add.w	r8, r8, #1
 8004828:	e7e6      	b.n	80047f8 <_printf_float+0x244>
 800482a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800482c:	2b00      	cmp	r3, #0
 800482e:	dc39      	bgt.n	80048a4 <_printf_float+0x2f0>
 8004830:	4a1b      	ldr	r2, [pc, #108]	; (80048a0 <_printf_float+0x2ec>)
 8004832:	2301      	movs	r3, #1
 8004834:	4631      	mov	r1, r6
 8004836:	4628      	mov	r0, r5
 8004838:	47b8      	blx	r7
 800483a:	3001      	adds	r0, #1
 800483c:	f43f af19 	beq.w	8004672 <_printf_float+0xbe>
 8004840:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004844:	4313      	orrs	r3, r2
 8004846:	d102      	bne.n	800484e <_printf_float+0x29a>
 8004848:	6823      	ldr	r3, [r4, #0]
 800484a:	07d9      	lsls	r1, r3, #31
 800484c:	d5d8      	bpl.n	8004800 <_printf_float+0x24c>
 800484e:	ee18 3a10 	vmov	r3, s16
 8004852:	4652      	mov	r2, sl
 8004854:	4631      	mov	r1, r6
 8004856:	4628      	mov	r0, r5
 8004858:	47b8      	blx	r7
 800485a:	3001      	adds	r0, #1
 800485c:	f43f af09 	beq.w	8004672 <_printf_float+0xbe>
 8004860:	f04f 0900 	mov.w	r9, #0
 8004864:	f104 0a1a 	add.w	sl, r4, #26
 8004868:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800486a:	425b      	negs	r3, r3
 800486c:	454b      	cmp	r3, r9
 800486e:	dc01      	bgt.n	8004874 <_printf_float+0x2c0>
 8004870:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004872:	e792      	b.n	800479a <_printf_float+0x1e6>
 8004874:	2301      	movs	r3, #1
 8004876:	4652      	mov	r2, sl
 8004878:	4631      	mov	r1, r6
 800487a:	4628      	mov	r0, r5
 800487c:	47b8      	blx	r7
 800487e:	3001      	adds	r0, #1
 8004880:	f43f aef7 	beq.w	8004672 <_printf_float+0xbe>
 8004884:	f109 0901 	add.w	r9, r9, #1
 8004888:	e7ee      	b.n	8004868 <_printf_float+0x2b4>
 800488a:	bf00      	nop
 800488c:	7fefffff 	.word	0x7fefffff
 8004890:	08006e20 	.word	0x08006e20
 8004894:	08006e24 	.word	0x08006e24
 8004898:	08006e28 	.word	0x08006e28
 800489c:	08006e2c 	.word	0x08006e2c
 80048a0:	08006e30 	.word	0x08006e30
 80048a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80048a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80048a8:	429a      	cmp	r2, r3
 80048aa:	bfa8      	it	ge
 80048ac:	461a      	movge	r2, r3
 80048ae:	2a00      	cmp	r2, #0
 80048b0:	4691      	mov	r9, r2
 80048b2:	dc37      	bgt.n	8004924 <_printf_float+0x370>
 80048b4:	f04f 0b00 	mov.w	fp, #0
 80048b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80048bc:	f104 021a 	add.w	r2, r4, #26
 80048c0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80048c2:	9305      	str	r3, [sp, #20]
 80048c4:	eba3 0309 	sub.w	r3, r3, r9
 80048c8:	455b      	cmp	r3, fp
 80048ca:	dc33      	bgt.n	8004934 <_printf_float+0x380>
 80048cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80048d0:	429a      	cmp	r2, r3
 80048d2:	db3b      	blt.n	800494c <_printf_float+0x398>
 80048d4:	6823      	ldr	r3, [r4, #0]
 80048d6:	07da      	lsls	r2, r3, #31
 80048d8:	d438      	bmi.n	800494c <_printf_float+0x398>
 80048da:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80048de:	eba2 0903 	sub.w	r9, r2, r3
 80048e2:	9b05      	ldr	r3, [sp, #20]
 80048e4:	1ad2      	subs	r2, r2, r3
 80048e6:	4591      	cmp	r9, r2
 80048e8:	bfa8      	it	ge
 80048ea:	4691      	movge	r9, r2
 80048ec:	f1b9 0f00 	cmp.w	r9, #0
 80048f0:	dc35      	bgt.n	800495e <_printf_float+0x3aa>
 80048f2:	f04f 0800 	mov.w	r8, #0
 80048f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80048fa:	f104 0a1a 	add.w	sl, r4, #26
 80048fe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004902:	1a9b      	subs	r3, r3, r2
 8004904:	eba3 0309 	sub.w	r3, r3, r9
 8004908:	4543      	cmp	r3, r8
 800490a:	f77f af79 	ble.w	8004800 <_printf_float+0x24c>
 800490e:	2301      	movs	r3, #1
 8004910:	4652      	mov	r2, sl
 8004912:	4631      	mov	r1, r6
 8004914:	4628      	mov	r0, r5
 8004916:	47b8      	blx	r7
 8004918:	3001      	adds	r0, #1
 800491a:	f43f aeaa 	beq.w	8004672 <_printf_float+0xbe>
 800491e:	f108 0801 	add.w	r8, r8, #1
 8004922:	e7ec      	b.n	80048fe <_printf_float+0x34a>
 8004924:	4613      	mov	r3, r2
 8004926:	4631      	mov	r1, r6
 8004928:	4642      	mov	r2, r8
 800492a:	4628      	mov	r0, r5
 800492c:	47b8      	blx	r7
 800492e:	3001      	adds	r0, #1
 8004930:	d1c0      	bne.n	80048b4 <_printf_float+0x300>
 8004932:	e69e      	b.n	8004672 <_printf_float+0xbe>
 8004934:	2301      	movs	r3, #1
 8004936:	4631      	mov	r1, r6
 8004938:	4628      	mov	r0, r5
 800493a:	9205      	str	r2, [sp, #20]
 800493c:	47b8      	blx	r7
 800493e:	3001      	adds	r0, #1
 8004940:	f43f ae97 	beq.w	8004672 <_printf_float+0xbe>
 8004944:	9a05      	ldr	r2, [sp, #20]
 8004946:	f10b 0b01 	add.w	fp, fp, #1
 800494a:	e7b9      	b.n	80048c0 <_printf_float+0x30c>
 800494c:	ee18 3a10 	vmov	r3, s16
 8004950:	4652      	mov	r2, sl
 8004952:	4631      	mov	r1, r6
 8004954:	4628      	mov	r0, r5
 8004956:	47b8      	blx	r7
 8004958:	3001      	adds	r0, #1
 800495a:	d1be      	bne.n	80048da <_printf_float+0x326>
 800495c:	e689      	b.n	8004672 <_printf_float+0xbe>
 800495e:	9a05      	ldr	r2, [sp, #20]
 8004960:	464b      	mov	r3, r9
 8004962:	4442      	add	r2, r8
 8004964:	4631      	mov	r1, r6
 8004966:	4628      	mov	r0, r5
 8004968:	47b8      	blx	r7
 800496a:	3001      	adds	r0, #1
 800496c:	d1c1      	bne.n	80048f2 <_printf_float+0x33e>
 800496e:	e680      	b.n	8004672 <_printf_float+0xbe>
 8004970:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004972:	2a01      	cmp	r2, #1
 8004974:	dc01      	bgt.n	800497a <_printf_float+0x3c6>
 8004976:	07db      	lsls	r3, r3, #31
 8004978:	d53a      	bpl.n	80049f0 <_printf_float+0x43c>
 800497a:	2301      	movs	r3, #1
 800497c:	4642      	mov	r2, r8
 800497e:	4631      	mov	r1, r6
 8004980:	4628      	mov	r0, r5
 8004982:	47b8      	blx	r7
 8004984:	3001      	adds	r0, #1
 8004986:	f43f ae74 	beq.w	8004672 <_printf_float+0xbe>
 800498a:	ee18 3a10 	vmov	r3, s16
 800498e:	4652      	mov	r2, sl
 8004990:	4631      	mov	r1, r6
 8004992:	4628      	mov	r0, r5
 8004994:	47b8      	blx	r7
 8004996:	3001      	adds	r0, #1
 8004998:	f43f ae6b 	beq.w	8004672 <_printf_float+0xbe>
 800499c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80049a0:	2200      	movs	r2, #0
 80049a2:	2300      	movs	r3, #0
 80049a4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80049a8:	f7fc f896 	bl	8000ad8 <__aeabi_dcmpeq>
 80049ac:	b9d8      	cbnz	r0, 80049e6 <_printf_float+0x432>
 80049ae:	f10a 33ff 	add.w	r3, sl, #4294967295
 80049b2:	f108 0201 	add.w	r2, r8, #1
 80049b6:	4631      	mov	r1, r6
 80049b8:	4628      	mov	r0, r5
 80049ba:	47b8      	blx	r7
 80049bc:	3001      	adds	r0, #1
 80049be:	d10e      	bne.n	80049de <_printf_float+0x42a>
 80049c0:	e657      	b.n	8004672 <_printf_float+0xbe>
 80049c2:	2301      	movs	r3, #1
 80049c4:	4652      	mov	r2, sl
 80049c6:	4631      	mov	r1, r6
 80049c8:	4628      	mov	r0, r5
 80049ca:	47b8      	blx	r7
 80049cc:	3001      	adds	r0, #1
 80049ce:	f43f ae50 	beq.w	8004672 <_printf_float+0xbe>
 80049d2:	f108 0801 	add.w	r8, r8, #1
 80049d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049d8:	3b01      	subs	r3, #1
 80049da:	4543      	cmp	r3, r8
 80049dc:	dcf1      	bgt.n	80049c2 <_printf_float+0x40e>
 80049de:	464b      	mov	r3, r9
 80049e0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80049e4:	e6da      	b.n	800479c <_printf_float+0x1e8>
 80049e6:	f04f 0800 	mov.w	r8, #0
 80049ea:	f104 0a1a 	add.w	sl, r4, #26
 80049ee:	e7f2      	b.n	80049d6 <_printf_float+0x422>
 80049f0:	2301      	movs	r3, #1
 80049f2:	4642      	mov	r2, r8
 80049f4:	e7df      	b.n	80049b6 <_printf_float+0x402>
 80049f6:	2301      	movs	r3, #1
 80049f8:	464a      	mov	r2, r9
 80049fa:	4631      	mov	r1, r6
 80049fc:	4628      	mov	r0, r5
 80049fe:	47b8      	blx	r7
 8004a00:	3001      	adds	r0, #1
 8004a02:	f43f ae36 	beq.w	8004672 <_printf_float+0xbe>
 8004a06:	f108 0801 	add.w	r8, r8, #1
 8004a0a:	68e3      	ldr	r3, [r4, #12]
 8004a0c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004a0e:	1a5b      	subs	r3, r3, r1
 8004a10:	4543      	cmp	r3, r8
 8004a12:	dcf0      	bgt.n	80049f6 <_printf_float+0x442>
 8004a14:	e6f8      	b.n	8004808 <_printf_float+0x254>
 8004a16:	f04f 0800 	mov.w	r8, #0
 8004a1a:	f104 0919 	add.w	r9, r4, #25
 8004a1e:	e7f4      	b.n	8004a0a <_printf_float+0x456>

08004a20 <_printf_common>:
 8004a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a24:	4616      	mov	r6, r2
 8004a26:	4699      	mov	r9, r3
 8004a28:	688a      	ldr	r2, [r1, #8]
 8004a2a:	690b      	ldr	r3, [r1, #16]
 8004a2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a30:	4293      	cmp	r3, r2
 8004a32:	bfb8      	it	lt
 8004a34:	4613      	movlt	r3, r2
 8004a36:	6033      	str	r3, [r6, #0]
 8004a38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a3c:	4607      	mov	r7, r0
 8004a3e:	460c      	mov	r4, r1
 8004a40:	b10a      	cbz	r2, 8004a46 <_printf_common+0x26>
 8004a42:	3301      	adds	r3, #1
 8004a44:	6033      	str	r3, [r6, #0]
 8004a46:	6823      	ldr	r3, [r4, #0]
 8004a48:	0699      	lsls	r1, r3, #26
 8004a4a:	bf42      	ittt	mi
 8004a4c:	6833      	ldrmi	r3, [r6, #0]
 8004a4e:	3302      	addmi	r3, #2
 8004a50:	6033      	strmi	r3, [r6, #0]
 8004a52:	6825      	ldr	r5, [r4, #0]
 8004a54:	f015 0506 	ands.w	r5, r5, #6
 8004a58:	d106      	bne.n	8004a68 <_printf_common+0x48>
 8004a5a:	f104 0a19 	add.w	sl, r4, #25
 8004a5e:	68e3      	ldr	r3, [r4, #12]
 8004a60:	6832      	ldr	r2, [r6, #0]
 8004a62:	1a9b      	subs	r3, r3, r2
 8004a64:	42ab      	cmp	r3, r5
 8004a66:	dc26      	bgt.n	8004ab6 <_printf_common+0x96>
 8004a68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004a6c:	1e13      	subs	r3, r2, #0
 8004a6e:	6822      	ldr	r2, [r4, #0]
 8004a70:	bf18      	it	ne
 8004a72:	2301      	movne	r3, #1
 8004a74:	0692      	lsls	r2, r2, #26
 8004a76:	d42b      	bmi.n	8004ad0 <_printf_common+0xb0>
 8004a78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a7c:	4649      	mov	r1, r9
 8004a7e:	4638      	mov	r0, r7
 8004a80:	47c0      	blx	r8
 8004a82:	3001      	adds	r0, #1
 8004a84:	d01e      	beq.n	8004ac4 <_printf_common+0xa4>
 8004a86:	6823      	ldr	r3, [r4, #0]
 8004a88:	6922      	ldr	r2, [r4, #16]
 8004a8a:	f003 0306 	and.w	r3, r3, #6
 8004a8e:	2b04      	cmp	r3, #4
 8004a90:	bf02      	ittt	eq
 8004a92:	68e5      	ldreq	r5, [r4, #12]
 8004a94:	6833      	ldreq	r3, [r6, #0]
 8004a96:	1aed      	subeq	r5, r5, r3
 8004a98:	68a3      	ldr	r3, [r4, #8]
 8004a9a:	bf0c      	ite	eq
 8004a9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004aa0:	2500      	movne	r5, #0
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	bfc4      	itt	gt
 8004aa6:	1a9b      	subgt	r3, r3, r2
 8004aa8:	18ed      	addgt	r5, r5, r3
 8004aaa:	2600      	movs	r6, #0
 8004aac:	341a      	adds	r4, #26
 8004aae:	42b5      	cmp	r5, r6
 8004ab0:	d11a      	bne.n	8004ae8 <_printf_common+0xc8>
 8004ab2:	2000      	movs	r0, #0
 8004ab4:	e008      	b.n	8004ac8 <_printf_common+0xa8>
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	4652      	mov	r2, sl
 8004aba:	4649      	mov	r1, r9
 8004abc:	4638      	mov	r0, r7
 8004abe:	47c0      	blx	r8
 8004ac0:	3001      	adds	r0, #1
 8004ac2:	d103      	bne.n	8004acc <_printf_common+0xac>
 8004ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004acc:	3501      	adds	r5, #1
 8004ace:	e7c6      	b.n	8004a5e <_printf_common+0x3e>
 8004ad0:	18e1      	adds	r1, r4, r3
 8004ad2:	1c5a      	adds	r2, r3, #1
 8004ad4:	2030      	movs	r0, #48	; 0x30
 8004ad6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004ada:	4422      	add	r2, r4
 8004adc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ae0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ae4:	3302      	adds	r3, #2
 8004ae6:	e7c7      	b.n	8004a78 <_printf_common+0x58>
 8004ae8:	2301      	movs	r3, #1
 8004aea:	4622      	mov	r2, r4
 8004aec:	4649      	mov	r1, r9
 8004aee:	4638      	mov	r0, r7
 8004af0:	47c0      	blx	r8
 8004af2:	3001      	adds	r0, #1
 8004af4:	d0e6      	beq.n	8004ac4 <_printf_common+0xa4>
 8004af6:	3601      	adds	r6, #1
 8004af8:	e7d9      	b.n	8004aae <_printf_common+0x8e>
	...

08004afc <_printf_i>:
 8004afc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b00:	7e0f      	ldrb	r7, [r1, #24]
 8004b02:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004b04:	2f78      	cmp	r7, #120	; 0x78
 8004b06:	4691      	mov	r9, r2
 8004b08:	4680      	mov	r8, r0
 8004b0a:	460c      	mov	r4, r1
 8004b0c:	469a      	mov	sl, r3
 8004b0e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004b12:	d807      	bhi.n	8004b24 <_printf_i+0x28>
 8004b14:	2f62      	cmp	r7, #98	; 0x62
 8004b16:	d80a      	bhi.n	8004b2e <_printf_i+0x32>
 8004b18:	2f00      	cmp	r7, #0
 8004b1a:	f000 80d4 	beq.w	8004cc6 <_printf_i+0x1ca>
 8004b1e:	2f58      	cmp	r7, #88	; 0x58
 8004b20:	f000 80c0 	beq.w	8004ca4 <_printf_i+0x1a8>
 8004b24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004b2c:	e03a      	b.n	8004ba4 <_printf_i+0xa8>
 8004b2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004b32:	2b15      	cmp	r3, #21
 8004b34:	d8f6      	bhi.n	8004b24 <_printf_i+0x28>
 8004b36:	a101      	add	r1, pc, #4	; (adr r1, 8004b3c <_printf_i+0x40>)
 8004b38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b3c:	08004b95 	.word	0x08004b95
 8004b40:	08004ba9 	.word	0x08004ba9
 8004b44:	08004b25 	.word	0x08004b25
 8004b48:	08004b25 	.word	0x08004b25
 8004b4c:	08004b25 	.word	0x08004b25
 8004b50:	08004b25 	.word	0x08004b25
 8004b54:	08004ba9 	.word	0x08004ba9
 8004b58:	08004b25 	.word	0x08004b25
 8004b5c:	08004b25 	.word	0x08004b25
 8004b60:	08004b25 	.word	0x08004b25
 8004b64:	08004b25 	.word	0x08004b25
 8004b68:	08004cad 	.word	0x08004cad
 8004b6c:	08004bd5 	.word	0x08004bd5
 8004b70:	08004c67 	.word	0x08004c67
 8004b74:	08004b25 	.word	0x08004b25
 8004b78:	08004b25 	.word	0x08004b25
 8004b7c:	08004ccf 	.word	0x08004ccf
 8004b80:	08004b25 	.word	0x08004b25
 8004b84:	08004bd5 	.word	0x08004bd5
 8004b88:	08004b25 	.word	0x08004b25
 8004b8c:	08004b25 	.word	0x08004b25
 8004b90:	08004c6f 	.word	0x08004c6f
 8004b94:	682b      	ldr	r3, [r5, #0]
 8004b96:	1d1a      	adds	r2, r3, #4
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	602a      	str	r2, [r5, #0]
 8004b9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ba0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e09f      	b.n	8004ce8 <_printf_i+0x1ec>
 8004ba8:	6820      	ldr	r0, [r4, #0]
 8004baa:	682b      	ldr	r3, [r5, #0]
 8004bac:	0607      	lsls	r7, r0, #24
 8004bae:	f103 0104 	add.w	r1, r3, #4
 8004bb2:	6029      	str	r1, [r5, #0]
 8004bb4:	d501      	bpl.n	8004bba <_printf_i+0xbe>
 8004bb6:	681e      	ldr	r6, [r3, #0]
 8004bb8:	e003      	b.n	8004bc2 <_printf_i+0xc6>
 8004bba:	0646      	lsls	r6, r0, #25
 8004bbc:	d5fb      	bpl.n	8004bb6 <_printf_i+0xba>
 8004bbe:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004bc2:	2e00      	cmp	r6, #0
 8004bc4:	da03      	bge.n	8004bce <_printf_i+0xd2>
 8004bc6:	232d      	movs	r3, #45	; 0x2d
 8004bc8:	4276      	negs	r6, r6
 8004bca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bce:	485a      	ldr	r0, [pc, #360]	; (8004d38 <_printf_i+0x23c>)
 8004bd0:	230a      	movs	r3, #10
 8004bd2:	e012      	b.n	8004bfa <_printf_i+0xfe>
 8004bd4:	682b      	ldr	r3, [r5, #0]
 8004bd6:	6820      	ldr	r0, [r4, #0]
 8004bd8:	1d19      	adds	r1, r3, #4
 8004bda:	6029      	str	r1, [r5, #0]
 8004bdc:	0605      	lsls	r5, r0, #24
 8004bde:	d501      	bpl.n	8004be4 <_printf_i+0xe8>
 8004be0:	681e      	ldr	r6, [r3, #0]
 8004be2:	e002      	b.n	8004bea <_printf_i+0xee>
 8004be4:	0641      	lsls	r1, r0, #25
 8004be6:	d5fb      	bpl.n	8004be0 <_printf_i+0xe4>
 8004be8:	881e      	ldrh	r6, [r3, #0]
 8004bea:	4853      	ldr	r0, [pc, #332]	; (8004d38 <_printf_i+0x23c>)
 8004bec:	2f6f      	cmp	r7, #111	; 0x6f
 8004bee:	bf0c      	ite	eq
 8004bf0:	2308      	moveq	r3, #8
 8004bf2:	230a      	movne	r3, #10
 8004bf4:	2100      	movs	r1, #0
 8004bf6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004bfa:	6865      	ldr	r5, [r4, #4]
 8004bfc:	60a5      	str	r5, [r4, #8]
 8004bfe:	2d00      	cmp	r5, #0
 8004c00:	bfa2      	ittt	ge
 8004c02:	6821      	ldrge	r1, [r4, #0]
 8004c04:	f021 0104 	bicge.w	r1, r1, #4
 8004c08:	6021      	strge	r1, [r4, #0]
 8004c0a:	b90e      	cbnz	r6, 8004c10 <_printf_i+0x114>
 8004c0c:	2d00      	cmp	r5, #0
 8004c0e:	d04b      	beq.n	8004ca8 <_printf_i+0x1ac>
 8004c10:	4615      	mov	r5, r2
 8004c12:	fbb6 f1f3 	udiv	r1, r6, r3
 8004c16:	fb03 6711 	mls	r7, r3, r1, r6
 8004c1a:	5dc7      	ldrb	r7, [r0, r7]
 8004c1c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004c20:	4637      	mov	r7, r6
 8004c22:	42bb      	cmp	r3, r7
 8004c24:	460e      	mov	r6, r1
 8004c26:	d9f4      	bls.n	8004c12 <_printf_i+0x116>
 8004c28:	2b08      	cmp	r3, #8
 8004c2a:	d10b      	bne.n	8004c44 <_printf_i+0x148>
 8004c2c:	6823      	ldr	r3, [r4, #0]
 8004c2e:	07de      	lsls	r6, r3, #31
 8004c30:	d508      	bpl.n	8004c44 <_printf_i+0x148>
 8004c32:	6923      	ldr	r3, [r4, #16]
 8004c34:	6861      	ldr	r1, [r4, #4]
 8004c36:	4299      	cmp	r1, r3
 8004c38:	bfde      	ittt	le
 8004c3a:	2330      	movle	r3, #48	; 0x30
 8004c3c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004c40:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004c44:	1b52      	subs	r2, r2, r5
 8004c46:	6122      	str	r2, [r4, #16]
 8004c48:	f8cd a000 	str.w	sl, [sp]
 8004c4c:	464b      	mov	r3, r9
 8004c4e:	aa03      	add	r2, sp, #12
 8004c50:	4621      	mov	r1, r4
 8004c52:	4640      	mov	r0, r8
 8004c54:	f7ff fee4 	bl	8004a20 <_printf_common>
 8004c58:	3001      	adds	r0, #1
 8004c5a:	d14a      	bne.n	8004cf2 <_printf_i+0x1f6>
 8004c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c60:	b004      	add	sp, #16
 8004c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c66:	6823      	ldr	r3, [r4, #0]
 8004c68:	f043 0320 	orr.w	r3, r3, #32
 8004c6c:	6023      	str	r3, [r4, #0]
 8004c6e:	4833      	ldr	r0, [pc, #204]	; (8004d3c <_printf_i+0x240>)
 8004c70:	2778      	movs	r7, #120	; 0x78
 8004c72:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004c76:	6823      	ldr	r3, [r4, #0]
 8004c78:	6829      	ldr	r1, [r5, #0]
 8004c7a:	061f      	lsls	r7, r3, #24
 8004c7c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004c80:	d402      	bmi.n	8004c88 <_printf_i+0x18c>
 8004c82:	065f      	lsls	r7, r3, #25
 8004c84:	bf48      	it	mi
 8004c86:	b2b6      	uxthmi	r6, r6
 8004c88:	07df      	lsls	r7, r3, #31
 8004c8a:	bf48      	it	mi
 8004c8c:	f043 0320 	orrmi.w	r3, r3, #32
 8004c90:	6029      	str	r1, [r5, #0]
 8004c92:	bf48      	it	mi
 8004c94:	6023      	strmi	r3, [r4, #0]
 8004c96:	b91e      	cbnz	r6, 8004ca0 <_printf_i+0x1a4>
 8004c98:	6823      	ldr	r3, [r4, #0]
 8004c9a:	f023 0320 	bic.w	r3, r3, #32
 8004c9e:	6023      	str	r3, [r4, #0]
 8004ca0:	2310      	movs	r3, #16
 8004ca2:	e7a7      	b.n	8004bf4 <_printf_i+0xf8>
 8004ca4:	4824      	ldr	r0, [pc, #144]	; (8004d38 <_printf_i+0x23c>)
 8004ca6:	e7e4      	b.n	8004c72 <_printf_i+0x176>
 8004ca8:	4615      	mov	r5, r2
 8004caa:	e7bd      	b.n	8004c28 <_printf_i+0x12c>
 8004cac:	682b      	ldr	r3, [r5, #0]
 8004cae:	6826      	ldr	r6, [r4, #0]
 8004cb0:	6961      	ldr	r1, [r4, #20]
 8004cb2:	1d18      	adds	r0, r3, #4
 8004cb4:	6028      	str	r0, [r5, #0]
 8004cb6:	0635      	lsls	r5, r6, #24
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	d501      	bpl.n	8004cc0 <_printf_i+0x1c4>
 8004cbc:	6019      	str	r1, [r3, #0]
 8004cbe:	e002      	b.n	8004cc6 <_printf_i+0x1ca>
 8004cc0:	0670      	lsls	r0, r6, #25
 8004cc2:	d5fb      	bpl.n	8004cbc <_printf_i+0x1c0>
 8004cc4:	8019      	strh	r1, [r3, #0]
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	6123      	str	r3, [r4, #16]
 8004cca:	4615      	mov	r5, r2
 8004ccc:	e7bc      	b.n	8004c48 <_printf_i+0x14c>
 8004cce:	682b      	ldr	r3, [r5, #0]
 8004cd0:	1d1a      	adds	r2, r3, #4
 8004cd2:	602a      	str	r2, [r5, #0]
 8004cd4:	681d      	ldr	r5, [r3, #0]
 8004cd6:	6862      	ldr	r2, [r4, #4]
 8004cd8:	2100      	movs	r1, #0
 8004cda:	4628      	mov	r0, r5
 8004cdc:	f7fb fa80 	bl	80001e0 <memchr>
 8004ce0:	b108      	cbz	r0, 8004ce6 <_printf_i+0x1ea>
 8004ce2:	1b40      	subs	r0, r0, r5
 8004ce4:	6060      	str	r0, [r4, #4]
 8004ce6:	6863      	ldr	r3, [r4, #4]
 8004ce8:	6123      	str	r3, [r4, #16]
 8004cea:	2300      	movs	r3, #0
 8004cec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cf0:	e7aa      	b.n	8004c48 <_printf_i+0x14c>
 8004cf2:	6923      	ldr	r3, [r4, #16]
 8004cf4:	462a      	mov	r2, r5
 8004cf6:	4649      	mov	r1, r9
 8004cf8:	4640      	mov	r0, r8
 8004cfa:	47d0      	blx	sl
 8004cfc:	3001      	adds	r0, #1
 8004cfe:	d0ad      	beq.n	8004c5c <_printf_i+0x160>
 8004d00:	6823      	ldr	r3, [r4, #0]
 8004d02:	079b      	lsls	r3, r3, #30
 8004d04:	d413      	bmi.n	8004d2e <_printf_i+0x232>
 8004d06:	68e0      	ldr	r0, [r4, #12]
 8004d08:	9b03      	ldr	r3, [sp, #12]
 8004d0a:	4298      	cmp	r0, r3
 8004d0c:	bfb8      	it	lt
 8004d0e:	4618      	movlt	r0, r3
 8004d10:	e7a6      	b.n	8004c60 <_printf_i+0x164>
 8004d12:	2301      	movs	r3, #1
 8004d14:	4632      	mov	r2, r6
 8004d16:	4649      	mov	r1, r9
 8004d18:	4640      	mov	r0, r8
 8004d1a:	47d0      	blx	sl
 8004d1c:	3001      	adds	r0, #1
 8004d1e:	d09d      	beq.n	8004c5c <_printf_i+0x160>
 8004d20:	3501      	adds	r5, #1
 8004d22:	68e3      	ldr	r3, [r4, #12]
 8004d24:	9903      	ldr	r1, [sp, #12]
 8004d26:	1a5b      	subs	r3, r3, r1
 8004d28:	42ab      	cmp	r3, r5
 8004d2a:	dcf2      	bgt.n	8004d12 <_printf_i+0x216>
 8004d2c:	e7eb      	b.n	8004d06 <_printf_i+0x20a>
 8004d2e:	2500      	movs	r5, #0
 8004d30:	f104 0619 	add.w	r6, r4, #25
 8004d34:	e7f5      	b.n	8004d22 <_printf_i+0x226>
 8004d36:	bf00      	nop
 8004d38:	08006e32 	.word	0x08006e32
 8004d3c:	08006e43 	.word	0x08006e43

08004d40 <std>:
 8004d40:	2300      	movs	r3, #0
 8004d42:	b510      	push	{r4, lr}
 8004d44:	4604      	mov	r4, r0
 8004d46:	e9c0 3300 	strd	r3, r3, [r0]
 8004d4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004d4e:	6083      	str	r3, [r0, #8]
 8004d50:	8181      	strh	r1, [r0, #12]
 8004d52:	6643      	str	r3, [r0, #100]	; 0x64
 8004d54:	81c2      	strh	r2, [r0, #14]
 8004d56:	6183      	str	r3, [r0, #24]
 8004d58:	4619      	mov	r1, r3
 8004d5a:	2208      	movs	r2, #8
 8004d5c:	305c      	adds	r0, #92	; 0x5c
 8004d5e:	f000 f8e2 	bl	8004f26 <memset>
 8004d62:	4b05      	ldr	r3, [pc, #20]	; (8004d78 <std+0x38>)
 8004d64:	6263      	str	r3, [r4, #36]	; 0x24
 8004d66:	4b05      	ldr	r3, [pc, #20]	; (8004d7c <std+0x3c>)
 8004d68:	62a3      	str	r3, [r4, #40]	; 0x28
 8004d6a:	4b05      	ldr	r3, [pc, #20]	; (8004d80 <std+0x40>)
 8004d6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004d6e:	4b05      	ldr	r3, [pc, #20]	; (8004d84 <std+0x44>)
 8004d70:	6224      	str	r4, [r4, #32]
 8004d72:	6323      	str	r3, [r4, #48]	; 0x30
 8004d74:	bd10      	pop	{r4, pc}
 8004d76:	bf00      	nop
 8004d78:	08004ea1 	.word	0x08004ea1
 8004d7c:	08004ec3 	.word	0x08004ec3
 8004d80:	08004efb 	.word	0x08004efb
 8004d84:	08004f1f 	.word	0x08004f1f

08004d88 <stdio_exit_handler>:
 8004d88:	4a02      	ldr	r2, [pc, #8]	; (8004d94 <stdio_exit_handler+0xc>)
 8004d8a:	4903      	ldr	r1, [pc, #12]	; (8004d98 <stdio_exit_handler+0x10>)
 8004d8c:	4803      	ldr	r0, [pc, #12]	; (8004d9c <stdio_exit_handler+0x14>)
 8004d8e:	f000 b869 	b.w	8004e64 <_fwalk_sglue>
 8004d92:	bf00      	nop
 8004d94:	20000014 	.word	0x20000014
 8004d98:	08006739 	.word	0x08006739
 8004d9c:	20000020 	.word	0x20000020

08004da0 <cleanup_stdio>:
 8004da0:	6841      	ldr	r1, [r0, #4]
 8004da2:	4b0c      	ldr	r3, [pc, #48]	; (8004dd4 <cleanup_stdio+0x34>)
 8004da4:	4299      	cmp	r1, r3
 8004da6:	b510      	push	{r4, lr}
 8004da8:	4604      	mov	r4, r0
 8004daa:	d001      	beq.n	8004db0 <cleanup_stdio+0x10>
 8004dac:	f001 fcc4 	bl	8006738 <_fflush_r>
 8004db0:	68a1      	ldr	r1, [r4, #8]
 8004db2:	4b09      	ldr	r3, [pc, #36]	; (8004dd8 <cleanup_stdio+0x38>)
 8004db4:	4299      	cmp	r1, r3
 8004db6:	d002      	beq.n	8004dbe <cleanup_stdio+0x1e>
 8004db8:	4620      	mov	r0, r4
 8004dba:	f001 fcbd 	bl	8006738 <_fflush_r>
 8004dbe:	68e1      	ldr	r1, [r4, #12]
 8004dc0:	4b06      	ldr	r3, [pc, #24]	; (8004ddc <cleanup_stdio+0x3c>)
 8004dc2:	4299      	cmp	r1, r3
 8004dc4:	d004      	beq.n	8004dd0 <cleanup_stdio+0x30>
 8004dc6:	4620      	mov	r0, r4
 8004dc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004dcc:	f001 bcb4 	b.w	8006738 <_fflush_r>
 8004dd0:	bd10      	pop	{r4, pc}
 8004dd2:	bf00      	nop
 8004dd4:	20003fa4 	.word	0x20003fa4
 8004dd8:	2000400c 	.word	0x2000400c
 8004ddc:	20004074 	.word	0x20004074

08004de0 <global_stdio_init.part.0>:
 8004de0:	b510      	push	{r4, lr}
 8004de2:	4b0b      	ldr	r3, [pc, #44]	; (8004e10 <global_stdio_init.part.0+0x30>)
 8004de4:	4c0b      	ldr	r4, [pc, #44]	; (8004e14 <global_stdio_init.part.0+0x34>)
 8004de6:	4a0c      	ldr	r2, [pc, #48]	; (8004e18 <global_stdio_init.part.0+0x38>)
 8004de8:	601a      	str	r2, [r3, #0]
 8004dea:	4620      	mov	r0, r4
 8004dec:	2200      	movs	r2, #0
 8004dee:	2104      	movs	r1, #4
 8004df0:	f7ff ffa6 	bl	8004d40 <std>
 8004df4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004df8:	2201      	movs	r2, #1
 8004dfa:	2109      	movs	r1, #9
 8004dfc:	f7ff ffa0 	bl	8004d40 <std>
 8004e00:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004e04:	2202      	movs	r2, #2
 8004e06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e0a:	2112      	movs	r1, #18
 8004e0c:	f7ff bf98 	b.w	8004d40 <std>
 8004e10:	200040dc 	.word	0x200040dc
 8004e14:	20003fa4 	.word	0x20003fa4
 8004e18:	08004d89 	.word	0x08004d89

08004e1c <__sfp_lock_acquire>:
 8004e1c:	4801      	ldr	r0, [pc, #4]	; (8004e24 <__sfp_lock_acquire+0x8>)
 8004e1e:	f000 b8ff 	b.w	8005020 <__retarget_lock_acquire_recursive>
 8004e22:	bf00      	nop
 8004e24:	200040e5 	.word	0x200040e5

08004e28 <__sfp_lock_release>:
 8004e28:	4801      	ldr	r0, [pc, #4]	; (8004e30 <__sfp_lock_release+0x8>)
 8004e2a:	f000 b8fa 	b.w	8005022 <__retarget_lock_release_recursive>
 8004e2e:	bf00      	nop
 8004e30:	200040e5 	.word	0x200040e5

08004e34 <__sinit>:
 8004e34:	b510      	push	{r4, lr}
 8004e36:	4604      	mov	r4, r0
 8004e38:	f7ff fff0 	bl	8004e1c <__sfp_lock_acquire>
 8004e3c:	6a23      	ldr	r3, [r4, #32]
 8004e3e:	b11b      	cbz	r3, 8004e48 <__sinit+0x14>
 8004e40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e44:	f7ff bff0 	b.w	8004e28 <__sfp_lock_release>
 8004e48:	4b04      	ldr	r3, [pc, #16]	; (8004e5c <__sinit+0x28>)
 8004e4a:	6223      	str	r3, [r4, #32]
 8004e4c:	4b04      	ldr	r3, [pc, #16]	; (8004e60 <__sinit+0x2c>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d1f5      	bne.n	8004e40 <__sinit+0xc>
 8004e54:	f7ff ffc4 	bl	8004de0 <global_stdio_init.part.0>
 8004e58:	e7f2      	b.n	8004e40 <__sinit+0xc>
 8004e5a:	bf00      	nop
 8004e5c:	08004da1 	.word	0x08004da1
 8004e60:	200040dc 	.word	0x200040dc

08004e64 <_fwalk_sglue>:
 8004e64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e68:	4607      	mov	r7, r0
 8004e6a:	4688      	mov	r8, r1
 8004e6c:	4614      	mov	r4, r2
 8004e6e:	2600      	movs	r6, #0
 8004e70:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004e74:	f1b9 0901 	subs.w	r9, r9, #1
 8004e78:	d505      	bpl.n	8004e86 <_fwalk_sglue+0x22>
 8004e7a:	6824      	ldr	r4, [r4, #0]
 8004e7c:	2c00      	cmp	r4, #0
 8004e7e:	d1f7      	bne.n	8004e70 <_fwalk_sglue+0xc>
 8004e80:	4630      	mov	r0, r6
 8004e82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e86:	89ab      	ldrh	r3, [r5, #12]
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d907      	bls.n	8004e9c <_fwalk_sglue+0x38>
 8004e8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004e90:	3301      	adds	r3, #1
 8004e92:	d003      	beq.n	8004e9c <_fwalk_sglue+0x38>
 8004e94:	4629      	mov	r1, r5
 8004e96:	4638      	mov	r0, r7
 8004e98:	47c0      	blx	r8
 8004e9a:	4306      	orrs	r6, r0
 8004e9c:	3568      	adds	r5, #104	; 0x68
 8004e9e:	e7e9      	b.n	8004e74 <_fwalk_sglue+0x10>

08004ea0 <__sread>:
 8004ea0:	b510      	push	{r4, lr}
 8004ea2:	460c      	mov	r4, r1
 8004ea4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ea8:	f000 f86c 	bl	8004f84 <_read_r>
 8004eac:	2800      	cmp	r0, #0
 8004eae:	bfab      	itete	ge
 8004eb0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004eb2:	89a3      	ldrhlt	r3, [r4, #12]
 8004eb4:	181b      	addge	r3, r3, r0
 8004eb6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004eba:	bfac      	ite	ge
 8004ebc:	6563      	strge	r3, [r4, #84]	; 0x54
 8004ebe:	81a3      	strhlt	r3, [r4, #12]
 8004ec0:	bd10      	pop	{r4, pc}

08004ec2 <__swrite>:
 8004ec2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ec6:	461f      	mov	r7, r3
 8004ec8:	898b      	ldrh	r3, [r1, #12]
 8004eca:	05db      	lsls	r3, r3, #23
 8004ecc:	4605      	mov	r5, r0
 8004ece:	460c      	mov	r4, r1
 8004ed0:	4616      	mov	r6, r2
 8004ed2:	d505      	bpl.n	8004ee0 <__swrite+0x1e>
 8004ed4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ed8:	2302      	movs	r3, #2
 8004eda:	2200      	movs	r2, #0
 8004edc:	f000 f840 	bl	8004f60 <_lseek_r>
 8004ee0:	89a3      	ldrh	r3, [r4, #12]
 8004ee2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ee6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004eea:	81a3      	strh	r3, [r4, #12]
 8004eec:	4632      	mov	r2, r6
 8004eee:	463b      	mov	r3, r7
 8004ef0:	4628      	mov	r0, r5
 8004ef2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ef6:	f000 b857 	b.w	8004fa8 <_write_r>

08004efa <__sseek>:
 8004efa:	b510      	push	{r4, lr}
 8004efc:	460c      	mov	r4, r1
 8004efe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f02:	f000 f82d 	bl	8004f60 <_lseek_r>
 8004f06:	1c43      	adds	r3, r0, #1
 8004f08:	89a3      	ldrh	r3, [r4, #12]
 8004f0a:	bf15      	itete	ne
 8004f0c:	6560      	strne	r0, [r4, #84]	; 0x54
 8004f0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004f12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004f16:	81a3      	strheq	r3, [r4, #12]
 8004f18:	bf18      	it	ne
 8004f1a:	81a3      	strhne	r3, [r4, #12]
 8004f1c:	bd10      	pop	{r4, pc}

08004f1e <__sclose>:
 8004f1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f22:	f000 b80d 	b.w	8004f40 <_close_r>

08004f26 <memset>:
 8004f26:	4402      	add	r2, r0
 8004f28:	4603      	mov	r3, r0
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d100      	bne.n	8004f30 <memset+0xa>
 8004f2e:	4770      	bx	lr
 8004f30:	f803 1b01 	strb.w	r1, [r3], #1
 8004f34:	e7f9      	b.n	8004f2a <memset+0x4>
	...

08004f38 <_localeconv_r>:
 8004f38:	4800      	ldr	r0, [pc, #0]	; (8004f3c <_localeconv_r+0x4>)
 8004f3a:	4770      	bx	lr
 8004f3c:	20000160 	.word	0x20000160

08004f40 <_close_r>:
 8004f40:	b538      	push	{r3, r4, r5, lr}
 8004f42:	4d06      	ldr	r5, [pc, #24]	; (8004f5c <_close_r+0x1c>)
 8004f44:	2300      	movs	r3, #0
 8004f46:	4604      	mov	r4, r0
 8004f48:	4608      	mov	r0, r1
 8004f4a:	602b      	str	r3, [r5, #0]
 8004f4c:	f7fc f957 	bl	80011fe <_close>
 8004f50:	1c43      	adds	r3, r0, #1
 8004f52:	d102      	bne.n	8004f5a <_close_r+0x1a>
 8004f54:	682b      	ldr	r3, [r5, #0]
 8004f56:	b103      	cbz	r3, 8004f5a <_close_r+0x1a>
 8004f58:	6023      	str	r3, [r4, #0]
 8004f5a:	bd38      	pop	{r3, r4, r5, pc}
 8004f5c:	200040e0 	.word	0x200040e0

08004f60 <_lseek_r>:
 8004f60:	b538      	push	{r3, r4, r5, lr}
 8004f62:	4d07      	ldr	r5, [pc, #28]	; (8004f80 <_lseek_r+0x20>)
 8004f64:	4604      	mov	r4, r0
 8004f66:	4608      	mov	r0, r1
 8004f68:	4611      	mov	r1, r2
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	602a      	str	r2, [r5, #0]
 8004f6e:	461a      	mov	r2, r3
 8004f70:	f7fc f96c 	bl	800124c <_lseek>
 8004f74:	1c43      	adds	r3, r0, #1
 8004f76:	d102      	bne.n	8004f7e <_lseek_r+0x1e>
 8004f78:	682b      	ldr	r3, [r5, #0]
 8004f7a:	b103      	cbz	r3, 8004f7e <_lseek_r+0x1e>
 8004f7c:	6023      	str	r3, [r4, #0]
 8004f7e:	bd38      	pop	{r3, r4, r5, pc}
 8004f80:	200040e0 	.word	0x200040e0

08004f84 <_read_r>:
 8004f84:	b538      	push	{r3, r4, r5, lr}
 8004f86:	4d07      	ldr	r5, [pc, #28]	; (8004fa4 <_read_r+0x20>)
 8004f88:	4604      	mov	r4, r0
 8004f8a:	4608      	mov	r0, r1
 8004f8c:	4611      	mov	r1, r2
 8004f8e:	2200      	movs	r2, #0
 8004f90:	602a      	str	r2, [r5, #0]
 8004f92:	461a      	mov	r2, r3
 8004f94:	f7fc f8fa 	bl	800118c <_read>
 8004f98:	1c43      	adds	r3, r0, #1
 8004f9a:	d102      	bne.n	8004fa2 <_read_r+0x1e>
 8004f9c:	682b      	ldr	r3, [r5, #0]
 8004f9e:	b103      	cbz	r3, 8004fa2 <_read_r+0x1e>
 8004fa0:	6023      	str	r3, [r4, #0]
 8004fa2:	bd38      	pop	{r3, r4, r5, pc}
 8004fa4:	200040e0 	.word	0x200040e0

08004fa8 <_write_r>:
 8004fa8:	b538      	push	{r3, r4, r5, lr}
 8004faa:	4d07      	ldr	r5, [pc, #28]	; (8004fc8 <_write_r+0x20>)
 8004fac:	4604      	mov	r4, r0
 8004fae:	4608      	mov	r0, r1
 8004fb0:	4611      	mov	r1, r2
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	602a      	str	r2, [r5, #0]
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	f7fc f905 	bl	80011c6 <_write>
 8004fbc:	1c43      	adds	r3, r0, #1
 8004fbe:	d102      	bne.n	8004fc6 <_write_r+0x1e>
 8004fc0:	682b      	ldr	r3, [r5, #0]
 8004fc2:	b103      	cbz	r3, 8004fc6 <_write_r+0x1e>
 8004fc4:	6023      	str	r3, [r4, #0]
 8004fc6:	bd38      	pop	{r3, r4, r5, pc}
 8004fc8:	200040e0 	.word	0x200040e0

08004fcc <__errno>:
 8004fcc:	4b01      	ldr	r3, [pc, #4]	; (8004fd4 <__errno+0x8>)
 8004fce:	6818      	ldr	r0, [r3, #0]
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop
 8004fd4:	2000006c 	.word	0x2000006c

08004fd8 <__libc_init_array>:
 8004fd8:	b570      	push	{r4, r5, r6, lr}
 8004fda:	4d0d      	ldr	r5, [pc, #52]	; (8005010 <__libc_init_array+0x38>)
 8004fdc:	4c0d      	ldr	r4, [pc, #52]	; (8005014 <__libc_init_array+0x3c>)
 8004fde:	1b64      	subs	r4, r4, r5
 8004fe0:	10a4      	asrs	r4, r4, #2
 8004fe2:	2600      	movs	r6, #0
 8004fe4:	42a6      	cmp	r6, r4
 8004fe6:	d109      	bne.n	8004ffc <__libc_init_array+0x24>
 8004fe8:	4d0b      	ldr	r5, [pc, #44]	; (8005018 <__libc_init_array+0x40>)
 8004fea:	4c0c      	ldr	r4, [pc, #48]	; (800501c <__libc_init_array+0x44>)
 8004fec:	f001 feea 	bl	8006dc4 <_init>
 8004ff0:	1b64      	subs	r4, r4, r5
 8004ff2:	10a4      	asrs	r4, r4, #2
 8004ff4:	2600      	movs	r6, #0
 8004ff6:	42a6      	cmp	r6, r4
 8004ff8:	d105      	bne.n	8005006 <__libc_init_array+0x2e>
 8004ffa:	bd70      	pop	{r4, r5, r6, pc}
 8004ffc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005000:	4798      	blx	r3
 8005002:	3601      	adds	r6, #1
 8005004:	e7ee      	b.n	8004fe4 <__libc_init_array+0xc>
 8005006:	f855 3b04 	ldr.w	r3, [r5], #4
 800500a:	4798      	blx	r3
 800500c:	3601      	adds	r6, #1
 800500e:	e7f2      	b.n	8004ff6 <__libc_init_array+0x1e>
 8005010:	0800719c 	.word	0x0800719c
 8005014:	0800719c 	.word	0x0800719c
 8005018:	0800719c 	.word	0x0800719c
 800501c:	080071a0 	.word	0x080071a0

08005020 <__retarget_lock_acquire_recursive>:
 8005020:	4770      	bx	lr

08005022 <__retarget_lock_release_recursive>:
 8005022:	4770      	bx	lr

08005024 <memcpy>:
 8005024:	440a      	add	r2, r1
 8005026:	4291      	cmp	r1, r2
 8005028:	f100 33ff 	add.w	r3, r0, #4294967295
 800502c:	d100      	bne.n	8005030 <memcpy+0xc>
 800502e:	4770      	bx	lr
 8005030:	b510      	push	{r4, lr}
 8005032:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005036:	f803 4f01 	strb.w	r4, [r3, #1]!
 800503a:	4291      	cmp	r1, r2
 800503c:	d1f9      	bne.n	8005032 <memcpy+0xe>
 800503e:	bd10      	pop	{r4, pc}

08005040 <quorem>:
 8005040:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005044:	6903      	ldr	r3, [r0, #16]
 8005046:	690c      	ldr	r4, [r1, #16]
 8005048:	42a3      	cmp	r3, r4
 800504a:	4607      	mov	r7, r0
 800504c:	db7e      	blt.n	800514c <quorem+0x10c>
 800504e:	3c01      	subs	r4, #1
 8005050:	f101 0814 	add.w	r8, r1, #20
 8005054:	f100 0514 	add.w	r5, r0, #20
 8005058:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800505c:	9301      	str	r3, [sp, #4]
 800505e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005062:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005066:	3301      	adds	r3, #1
 8005068:	429a      	cmp	r2, r3
 800506a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800506e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005072:	fbb2 f6f3 	udiv	r6, r2, r3
 8005076:	d331      	bcc.n	80050dc <quorem+0x9c>
 8005078:	f04f 0e00 	mov.w	lr, #0
 800507c:	4640      	mov	r0, r8
 800507e:	46ac      	mov	ip, r5
 8005080:	46f2      	mov	sl, lr
 8005082:	f850 2b04 	ldr.w	r2, [r0], #4
 8005086:	b293      	uxth	r3, r2
 8005088:	fb06 e303 	mla	r3, r6, r3, lr
 800508c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005090:	0c1a      	lsrs	r2, r3, #16
 8005092:	b29b      	uxth	r3, r3
 8005094:	ebaa 0303 	sub.w	r3, sl, r3
 8005098:	f8dc a000 	ldr.w	sl, [ip]
 800509c:	fa13 f38a 	uxtah	r3, r3, sl
 80050a0:	fb06 220e 	mla	r2, r6, lr, r2
 80050a4:	9300      	str	r3, [sp, #0]
 80050a6:	9b00      	ldr	r3, [sp, #0]
 80050a8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80050ac:	b292      	uxth	r2, r2
 80050ae:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80050b2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80050b6:	f8bd 3000 	ldrh.w	r3, [sp]
 80050ba:	4581      	cmp	r9, r0
 80050bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80050c0:	f84c 3b04 	str.w	r3, [ip], #4
 80050c4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80050c8:	d2db      	bcs.n	8005082 <quorem+0x42>
 80050ca:	f855 300b 	ldr.w	r3, [r5, fp]
 80050ce:	b92b      	cbnz	r3, 80050dc <quorem+0x9c>
 80050d0:	9b01      	ldr	r3, [sp, #4]
 80050d2:	3b04      	subs	r3, #4
 80050d4:	429d      	cmp	r5, r3
 80050d6:	461a      	mov	r2, r3
 80050d8:	d32c      	bcc.n	8005134 <quorem+0xf4>
 80050da:	613c      	str	r4, [r7, #16]
 80050dc:	4638      	mov	r0, r7
 80050de:	f001 f9a5 	bl	800642c <__mcmp>
 80050e2:	2800      	cmp	r0, #0
 80050e4:	db22      	blt.n	800512c <quorem+0xec>
 80050e6:	3601      	adds	r6, #1
 80050e8:	4629      	mov	r1, r5
 80050ea:	2000      	movs	r0, #0
 80050ec:	f858 2b04 	ldr.w	r2, [r8], #4
 80050f0:	f8d1 c000 	ldr.w	ip, [r1]
 80050f4:	b293      	uxth	r3, r2
 80050f6:	1ac3      	subs	r3, r0, r3
 80050f8:	0c12      	lsrs	r2, r2, #16
 80050fa:	fa13 f38c 	uxtah	r3, r3, ip
 80050fe:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005102:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005106:	b29b      	uxth	r3, r3
 8005108:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800510c:	45c1      	cmp	r9, r8
 800510e:	f841 3b04 	str.w	r3, [r1], #4
 8005112:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005116:	d2e9      	bcs.n	80050ec <quorem+0xac>
 8005118:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800511c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005120:	b922      	cbnz	r2, 800512c <quorem+0xec>
 8005122:	3b04      	subs	r3, #4
 8005124:	429d      	cmp	r5, r3
 8005126:	461a      	mov	r2, r3
 8005128:	d30a      	bcc.n	8005140 <quorem+0x100>
 800512a:	613c      	str	r4, [r7, #16]
 800512c:	4630      	mov	r0, r6
 800512e:	b003      	add	sp, #12
 8005130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005134:	6812      	ldr	r2, [r2, #0]
 8005136:	3b04      	subs	r3, #4
 8005138:	2a00      	cmp	r2, #0
 800513a:	d1ce      	bne.n	80050da <quorem+0x9a>
 800513c:	3c01      	subs	r4, #1
 800513e:	e7c9      	b.n	80050d4 <quorem+0x94>
 8005140:	6812      	ldr	r2, [r2, #0]
 8005142:	3b04      	subs	r3, #4
 8005144:	2a00      	cmp	r2, #0
 8005146:	d1f0      	bne.n	800512a <quorem+0xea>
 8005148:	3c01      	subs	r4, #1
 800514a:	e7eb      	b.n	8005124 <quorem+0xe4>
 800514c:	2000      	movs	r0, #0
 800514e:	e7ee      	b.n	800512e <quorem+0xee>

08005150 <_dtoa_r>:
 8005150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005154:	ed2d 8b04 	vpush	{d8-d9}
 8005158:	69c5      	ldr	r5, [r0, #28]
 800515a:	b093      	sub	sp, #76	; 0x4c
 800515c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005160:	ec57 6b10 	vmov	r6, r7, d0
 8005164:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005168:	9107      	str	r1, [sp, #28]
 800516a:	4604      	mov	r4, r0
 800516c:	920a      	str	r2, [sp, #40]	; 0x28
 800516e:	930d      	str	r3, [sp, #52]	; 0x34
 8005170:	b975      	cbnz	r5, 8005190 <_dtoa_r+0x40>
 8005172:	2010      	movs	r0, #16
 8005174:	f000 fe2a 	bl	8005dcc <malloc>
 8005178:	4602      	mov	r2, r0
 800517a:	61e0      	str	r0, [r4, #28]
 800517c:	b920      	cbnz	r0, 8005188 <_dtoa_r+0x38>
 800517e:	4bae      	ldr	r3, [pc, #696]	; (8005438 <_dtoa_r+0x2e8>)
 8005180:	21ef      	movs	r1, #239	; 0xef
 8005182:	48ae      	ldr	r0, [pc, #696]	; (800543c <_dtoa_r+0x2ec>)
 8005184:	f001 fb10 	bl	80067a8 <__assert_func>
 8005188:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800518c:	6005      	str	r5, [r0, #0]
 800518e:	60c5      	str	r5, [r0, #12]
 8005190:	69e3      	ldr	r3, [r4, #28]
 8005192:	6819      	ldr	r1, [r3, #0]
 8005194:	b151      	cbz	r1, 80051ac <_dtoa_r+0x5c>
 8005196:	685a      	ldr	r2, [r3, #4]
 8005198:	604a      	str	r2, [r1, #4]
 800519a:	2301      	movs	r3, #1
 800519c:	4093      	lsls	r3, r2
 800519e:	608b      	str	r3, [r1, #8]
 80051a0:	4620      	mov	r0, r4
 80051a2:	f000 ff07 	bl	8005fb4 <_Bfree>
 80051a6:	69e3      	ldr	r3, [r4, #28]
 80051a8:	2200      	movs	r2, #0
 80051aa:	601a      	str	r2, [r3, #0]
 80051ac:	1e3b      	subs	r3, r7, #0
 80051ae:	bfbb      	ittet	lt
 80051b0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80051b4:	9303      	strlt	r3, [sp, #12]
 80051b6:	2300      	movge	r3, #0
 80051b8:	2201      	movlt	r2, #1
 80051ba:	bfac      	ite	ge
 80051bc:	f8c8 3000 	strge.w	r3, [r8]
 80051c0:	f8c8 2000 	strlt.w	r2, [r8]
 80051c4:	4b9e      	ldr	r3, [pc, #632]	; (8005440 <_dtoa_r+0x2f0>)
 80051c6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80051ca:	ea33 0308 	bics.w	r3, r3, r8
 80051ce:	d11b      	bne.n	8005208 <_dtoa_r+0xb8>
 80051d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80051d2:	f242 730f 	movw	r3, #9999	; 0x270f
 80051d6:	6013      	str	r3, [r2, #0]
 80051d8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80051dc:	4333      	orrs	r3, r6
 80051de:	f000 8593 	beq.w	8005d08 <_dtoa_r+0xbb8>
 80051e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80051e4:	b963      	cbnz	r3, 8005200 <_dtoa_r+0xb0>
 80051e6:	4b97      	ldr	r3, [pc, #604]	; (8005444 <_dtoa_r+0x2f4>)
 80051e8:	e027      	b.n	800523a <_dtoa_r+0xea>
 80051ea:	4b97      	ldr	r3, [pc, #604]	; (8005448 <_dtoa_r+0x2f8>)
 80051ec:	9300      	str	r3, [sp, #0]
 80051ee:	3308      	adds	r3, #8
 80051f0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80051f2:	6013      	str	r3, [r2, #0]
 80051f4:	9800      	ldr	r0, [sp, #0]
 80051f6:	b013      	add	sp, #76	; 0x4c
 80051f8:	ecbd 8b04 	vpop	{d8-d9}
 80051fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005200:	4b90      	ldr	r3, [pc, #576]	; (8005444 <_dtoa_r+0x2f4>)
 8005202:	9300      	str	r3, [sp, #0]
 8005204:	3303      	adds	r3, #3
 8005206:	e7f3      	b.n	80051f0 <_dtoa_r+0xa0>
 8005208:	ed9d 7b02 	vldr	d7, [sp, #8]
 800520c:	2200      	movs	r2, #0
 800520e:	ec51 0b17 	vmov	r0, r1, d7
 8005212:	eeb0 8a47 	vmov.f32	s16, s14
 8005216:	eef0 8a67 	vmov.f32	s17, s15
 800521a:	2300      	movs	r3, #0
 800521c:	f7fb fc5c 	bl	8000ad8 <__aeabi_dcmpeq>
 8005220:	4681      	mov	r9, r0
 8005222:	b160      	cbz	r0, 800523e <_dtoa_r+0xee>
 8005224:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005226:	2301      	movs	r3, #1
 8005228:	6013      	str	r3, [r2, #0]
 800522a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800522c:	2b00      	cmp	r3, #0
 800522e:	f000 8568 	beq.w	8005d02 <_dtoa_r+0xbb2>
 8005232:	4b86      	ldr	r3, [pc, #536]	; (800544c <_dtoa_r+0x2fc>)
 8005234:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005236:	6013      	str	r3, [r2, #0]
 8005238:	3b01      	subs	r3, #1
 800523a:	9300      	str	r3, [sp, #0]
 800523c:	e7da      	b.n	80051f4 <_dtoa_r+0xa4>
 800523e:	aa10      	add	r2, sp, #64	; 0x40
 8005240:	a911      	add	r1, sp, #68	; 0x44
 8005242:	4620      	mov	r0, r4
 8005244:	eeb0 0a48 	vmov.f32	s0, s16
 8005248:	eef0 0a68 	vmov.f32	s1, s17
 800524c:	f001 f994 	bl	8006578 <__d2b>
 8005250:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005254:	4682      	mov	sl, r0
 8005256:	2d00      	cmp	r5, #0
 8005258:	d07f      	beq.n	800535a <_dtoa_r+0x20a>
 800525a:	ee18 3a90 	vmov	r3, s17
 800525e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005262:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005266:	ec51 0b18 	vmov	r0, r1, d8
 800526a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800526e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005272:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005276:	4619      	mov	r1, r3
 8005278:	2200      	movs	r2, #0
 800527a:	4b75      	ldr	r3, [pc, #468]	; (8005450 <_dtoa_r+0x300>)
 800527c:	f7fb f80c 	bl	8000298 <__aeabi_dsub>
 8005280:	a367      	add	r3, pc, #412	; (adr r3, 8005420 <_dtoa_r+0x2d0>)
 8005282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005286:	f7fb f9bf 	bl	8000608 <__aeabi_dmul>
 800528a:	a367      	add	r3, pc, #412	; (adr r3, 8005428 <_dtoa_r+0x2d8>)
 800528c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005290:	f7fb f804 	bl	800029c <__adddf3>
 8005294:	4606      	mov	r6, r0
 8005296:	4628      	mov	r0, r5
 8005298:	460f      	mov	r7, r1
 800529a:	f7fb f94b 	bl	8000534 <__aeabi_i2d>
 800529e:	a364      	add	r3, pc, #400	; (adr r3, 8005430 <_dtoa_r+0x2e0>)
 80052a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a4:	f7fb f9b0 	bl	8000608 <__aeabi_dmul>
 80052a8:	4602      	mov	r2, r0
 80052aa:	460b      	mov	r3, r1
 80052ac:	4630      	mov	r0, r6
 80052ae:	4639      	mov	r1, r7
 80052b0:	f7fa fff4 	bl	800029c <__adddf3>
 80052b4:	4606      	mov	r6, r0
 80052b6:	460f      	mov	r7, r1
 80052b8:	f7fb fc56 	bl	8000b68 <__aeabi_d2iz>
 80052bc:	2200      	movs	r2, #0
 80052be:	4683      	mov	fp, r0
 80052c0:	2300      	movs	r3, #0
 80052c2:	4630      	mov	r0, r6
 80052c4:	4639      	mov	r1, r7
 80052c6:	f7fb fc11 	bl	8000aec <__aeabi_dcmplt>
 80052ca:	b148      	cbz	r0, 80052e0 <_dtoa_r+0x190>
 80052cc:	4658      	mov	r0, fp
 80052ce:	f7fb f931 	bl	8000534 <__aeabi_i2d>
 80052d2:	4632      	mov	r2, r6
 80052d4:	463b      	mov	r3, r7
 80052d6:	f7fb fbff 	bl	8000ad8 <__aeabi_dcmpeq>
 80052da:	b908      	cbnz	r0, 80052e0 <_dtoa_r+0x190>
 80052dc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80052e0:	f1bb 0f16 	cmp.w	fp, #22
 80052e4:	d857      	bhi.n	8005396 <_dtoa_r+0x246>
 80052e6:	4b5b      	ldr	r3, [pc, #364]	; (8005454 <_dtoa_r+0x304>)
 80052e8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80052ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052f0:	ec51 0b18 	vmov	r0, r1, d8
 80052f4:	f7fb fbfa 	bl	8000aec <__aeabi_dcmplt>
 80052f8:	2800      	cmp	r0, #0
 80052fa:	d04e      	beq.n	800539a <_dtoa_r+0x24a>
 80052fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005300:	2300      	movs	r3, #0
 8005302:	930c      	str	r3, [sp, #48]	; 0x30
 8005304:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005306:	1b5b      	subs	r3, r3, r5
 8005308:	1e5a      	subs	r2, r3, #1
 800530a:	bf45      	ittet	mi
 800530c:	f1c3 0301 	rsbmi	r3, r3, #1
 8005310:	9305      	strmi	r3, [sp, #20]
 8005312:	2300      	movpl	r3, #0
 8005314:	2300      	movmi	r3, #0
 8005316:	9206      	str	r2, [sp, #24]
 8005318:	bf54      	ite	pl
 800531a:	9305      	strpl	r3, [sp, #20]
 800531c:	9306      	strmi	r3, [sp, #24]
 800531e:	f1bb 0f00 	cmp.w	fp, #0
 8005322:	db3c      	blt.n	800539e <_dtoa_r+0x24e>
 8005324:	9b06      	ldr	r3, [sp, #24]
 8005326:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800532a:	445b      	add	r3, fp
 800532c:	9306      	str	r3, [sp, #24]
 800532e:	2300      	movs	r3, #0
 8005330:	9308      	str	r3, [sp, #32]
 8005332:	9b07      	ldr	r3, [sp, #28]
 8005334:	2b09      	cmp	r3, #9
 8005336:	d868      	bhi.n	800540a <_dtoa_r+0x2ba>
 8005338:	2b05      	cmp	r3, #5
 800533a:	bfc4      	itt	gt
 800533c:	3b04      	subgt	r3, #4
 800533e:	9307      	strgt	r3, [sp, #28]
 8005340:	9b07      	ldr	r3, [sp, #28]
 8005342:	f1a3 0302 	sub.w	r3, r3, #2
 8005346:	bfcc      	ite	gt
 8005348:	2500      	movgt	r5, #0
 800534a:	2501      	movle	r5, #1
 800534c:	2b03      	cmp	r3, #3
 800534e:	f200 8085 	bhi.w	800545c <_dtoa_r+0x30c>
 8005352:	e8df f003 	tbb	[pc, r3]
 8005356:	3b2e      	.short	0x3b2e
 8005358:	5839      	.short	0x5839
 800535a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800535e:	441d      	add	r5, r3
 8005360:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005364:	2b20      	cmp	r3, #32
 8005366:	bfc1      	itttt	gt
 8005368:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800536c:	fa08 f803 	lslgt.w	r8, r8, r3
 8005370:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8005374:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005378:	bfd6      	itet	le
 800537a:	f1c3 0320 	rsble	r3, r3, #32
 800537e:	ea48 0003 	orrgt.w	r0, r8, r3
 8005382:	fa06 f003 	lslle.w	r0, r6, r3
 8005386:	f7fb f8c5 	bl	8000514 <__aeabi_ui2d>
 800538a:	2201      	movs	r2, #1
 800538c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005390:	3d01      	subs	r5, #1
 8005392:	920e      	str	r2, [sp, #56]	; 0x38
 8005394:	e76f      	b.n	8005276 <_dtoa_r+0x126>
 8005396:	2301      	movs	r3, #1
 8005398:	e7b3      	b.n	8005302 <_dtoa_r+0x1b2>
 800539a:	900c      	str	r0, [sp, #48]	; 0x30
 800539c:	e7b2      	b.n	8005304 <_dtoa_r+0x1b4>
 800539e:	9b05      	ldr	r3, [sp, #20]
 80053a0:	eba3 030b 	sub.w	r3, r3, fp
 80053a4:	9305      	str	r3, [sp, #20]
 80053a6:	f1cb 0300 	rsb	r3, fp, #0
 80053aa:	9308      	str	r3, [sp, #32]
 80053ac:	2300      	movs	r3, #0
 80053ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80053b0:	e7bf      	b.n	8005332 <_dtoa_r+0x1e2>
 80053b2:	2300      	movs	r3, #0
 80053b4:	9309      	str	r3, [sp, #36]	; 0x24
 80053b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	dc52      	bgt.n	8005462 <_dtoa_r+0x312>
 80053bc:	2301      	movs	r3, #1
 80053be:	9301      	str	r3, [sp, #4]
 80053c0:	9304      	str	r3, [sp, #16]
 80053c2:	461a      	mov	r2, r3
 80053c4:	920a      	str	r2, [sp, #40]	; 0x28
 80053c6:	e00b      	b.n	80053e0 <_dtoa_r+0x290>
 80053c8:	2301      	movs	r3, #1
 80053ca:	e7f3      	b.n	80053b4 <_dtoa_r+0x264>
 80053cc:	2300      	movs	r3, #0
 80053ce:	9309      	str	r3, [sp, #36]	; 0x24
 80053d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053d2:	445b      	add	r3, fp
 80053d4:	9301      	str	r3, [sp, #4]
 80053d6:	3301      	adds	r3, #1
 80053d8:	2b01      	cmp	r3, #1
 80053da:	9304      	str	r3, [sp, #16]
 80053dc:	bfb8      	it	lt
 80053de:	2301      	movlt	r3, #1
 80053e0:	69e0      	ldr	r0, [r4, #28]
 80053e2:	2100      	movs	r1, #0
 80053e4:	2204      	movs	r2, #4
 80053e6:	f102 0614 	add.w	r6, r2, #20
 80053ea:	429e      	cmp	r6, r3
 80053ec:	d93d      	bls.n	800546a <_dtoa_r+0x31a>
 80053ee:	6041      	str	r1, [r0, #4]
 80053f0:	4620      	mov	r0, r4
 80053f2:	f000 fd9f 	bl	8005f34 <_Balloc>
 80053f6:	9000      	str	r0, [sp, #0]
 80053f8:	2800      	cmp	r0, #0
 80053fa:	d139      	bne.n	8005470 <_dtoa_r+0x320>
 80053fc:	4b16      	ldr	r3, [pc, #88]	; (8005458 <_dtoa_r+0x308>)
 80053fe:	4602      	mov	r2, r0
 8005400:	f240 11af 	movw	r1, #431	; 0x1af
 8005404:	e6bd      	b.n	8005182 <_dtoa_r+0x32>
 8005406:	2301      	movs	r3, #1
 8005408:	e7e1      	b.n	80053ce <_dtoa_r+0x27e>
 800540a:	2501      	movs	r5, #1
 800540c:	2300      	movs	r3, #0
 800540e:	9307      	str	r3, [sp, #28]
 8005410:	9509      	str	r5, [sp, #36]	; 0x24
 8005412:	f04f 33ff 	mov.w	r3, #4294967295
 8005416:	9301      	str	r3, [sp, #4]
 8005418:	9304      	str	r3, [sp, #16]
 800541a:	2200      	movs	r2, #0
 800541c:	2312      	movs	r3, #18
 800541e:	e7d1      	b.n	80053c4 <_dtoa_r+0x274>
 8005420:	636f4361 	.word	0x636f4361
 8005424:	3fd287a7 	.word	0x3fd287a7
 8005428:	8b60c8b3 	.word	0x8b60c8b3
 800542c:	3fc68a28 	.word	0x3fc68a28
 8005430:	509f79fb 	.word	0x509f79fb
 8005434:	3fd34413 	.word	0x3fd34413
 8005438:	08006e61 	.word	0x08006e61
 800543c:	08006e78 	.word	0x08006e78
 8005440:	7ff00000 	.word	0x7ff00000
 8005444:	08006e5d 	.word	0x08006e5d
 8005448:	08006e54 	.word	0x08006e54
 800544c:	08006e31 	.word	0x08006e31
 8005450:	3ff80000 	.word	0x3ff80000
 8005454:	08006f68 	.word	0x08006f68
 8005458:	08006ed0 	.word	0x08006ed0
 800545c:	2301      	movs	r3, #1
 800545e:	9309      	str	r3, [sp, #36]	; 0x24
 8005460:	e7d7      	b.n	8005412 <_dtoa_r+0x2c2>
 8005462:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005464:	9301      	str	r3, [sp, #4]
 8005466:	9304      	str	r3, [sp, #16]
 8005468:	e7ba      	b.n	80053e0 <_dtoa_r+0x290>
 800546a:	3101      	adds	r1, #1
 800546c:	0052      	lsls	r2, r2, #1
 800546e:	e7ba      	b.n	80053e6 <_dtoa_r+0x296>
 8005470:	69e3      	ldr	r3, [r4, #28]
 8005472:	9a00      	ldr	r2, [sp, #0]
 8005474:	601a      	str	r2, [r3, #0]
 8005476:	9b04      	ldr	r3, [sp, #16]
 8005478:	2b0e      	cmp	r3, #14
 800547a:	f200 80a8 	bhi.w	80055ce <_dtoa_r+0x47e>
 800547e:	2d00      	cmp	r5, #0
 8005480:	f000 80a5 	beq.w	80055ce <_dtoa_r+0x47e>
 8005484:	f1bb 0f00 	cmp.w	fp, #0
 8005488:	dd38      	ble.n	80054fc <_dtoa_r+0x3ac>
 800548a:	4bc0      	ldr	r3, [pc, #768]	; (800578c <_dtoa_r+0x63c>)
 800548c:	f00b 020f 	and.w	r2, fp, #15
 8005490:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005494:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005498:	e9d3 6700 	ldrd	r6, r7, [r3]
 800549c:	ea4f 182b 	mov.w	r8, fp, asr #4
 80054a0:	d019      	beq.n	80054d6 <_dtoa_r+0x386>
 80054a2:	4bbb      	ldr	r3, [pc, #748]	; (8005790 <_dtoa_r+0x640>)
 80054a4:	ec51 0b18 	vmov	r0, r1, d8
 80054a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80054ac:	f7fb f9d6 	bl	800085c <__aeabi_ddiv>
 80054b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80054b4:	f008 080f 	and.w	r8, r8, #15
 80054b8:	2503      	movs	r5, #3
 80054ba:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8005790 <_dtoa_r+0x640>
 80054be:	f1b8 0f00 	cmp.w	r8, #0
 80054c2:	d10a      	bne.n	80054da <_dtoa_r+0x38a>
 80054c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80054c8:	4632      	mov	r2, r6
 80054ca:	463b      	mov	r3, r7
 80054cc:	f7fb f9c6 	bl	800085c <__aeabi_ddiv>
 80054d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80054d4:	e02b      	b.n	800552e <_dtoa_r+0x3de>
 80054d6:	2502      	movs	r5, #2
 80054d8:	e7ef      	b.n	80054ba <_dtoa_r+0x36a>
 80054da:	f018 0f01 	tst.w	r8, #1
 80054de:	d008      	beq.n	80054f2 <_dtoa_r+0x3a2>
 80054e0:	4630      	mov	r0, r6
 80054e2:	4639      	mov	r1, r7
 80054e4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80054e8:	f7fb f88e 	bl	8000608 <__aeabi_dmul>
 80054ec:	3501      	adds	r5, #1
 80054ee:	4606      	mov	r6, r0
 80054f0:	460f      	mov	r7, r1
 80054f2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80054f6:	f109 0908 	add.w	r9, r9, #8
 80054fa:	e7e0      	b.n	80054be <_dtoa_r+0x36e>
 80054fc:	f000 809f 	beq.w	800563e <_dtoa_r+0x4ee>
 8005500:	f1cb 0600 	rsb	r6, fp, #0
 8005504:	4ba1      	ldr	r3, [pc, #644]	; (800578c <_dtoa_r+0x63c>)
 8005506:	4fa2      	ldr	r7, [pc, #648]	; (8005790 <_dtoa_r+0x640>)
 8005508:	f006 020f 	and.w	r2, r6, #15
 800550c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005514:	ec51 0b18 	vmov	r0, r1, d8
 8005518:	f7fb f876 	bl	8000608 <__aeabi_dmul>
 800551c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005520:	1136      	asrs	r6, r6, #4
 8005522:	2300      	movs	r3, #0
 8005524:	2502      	movs	r5, #2
 8005526:	2e00      	cmp	r6, #0
 8005528:	d17e      	bne.n	8005628 <_dtoa_r+0x4d8>
 800552a:	2b00      	cmp	r3, #0
 800552c:	d1d0      	bne.n	80054d0 <_dtoa_r+0x380>
 800552e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005530:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005534:	2b00      	cmp	r3, #0
 8005536:	f000 8084 	beq.w	8005642 <_dtoa_r+0x4f2>
 800553a:	4b96      	ldr	r3, [pc, #600]	; (8005794 <_dtoa_r+0x644>)
 800553c:	2200      	movs	r2, #0
 800553e:	4640      	mov	r0, r8
 8005540:	4649      	mov	r1, r9
 8005542:	f7fb fad3 	bl	8000aec <__aeabi_dcmplt>
 8005546:	2800      	cmp	r0, #0
 8005548:	d07b      	beq.n	8005642 <_dtoa_r+0x4f2>
 800554a:	9b04      	ldr	r3, [sp, #16]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d078      	beq.n	8005642 <_dtoa_r+0x4f2>
 8005550:	9b01      	ldr	r3, [sp, #4]
 8005552:	2b00      	cmp	r3, #0
 8005554:	dd39      	ble.n	80055ca <_dtoa_r+0x47a>
 8005556:	4b90      	ldr	r3, [pc, #576]	; (8005798 <_dtoa_r+0x648>)
 8005558:	2200      	movs	r2, #0
 800555a:	4640      	mov	r0, r8
 800555c:	4649      	mov	r1, r9
 800555e:	f7fb f853 	bl	8000608 <__aeabi_dmul>
 8005562:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005566:	9e01      	ldr	r6, [sp, #4]
 8005568:	f10b 37ff 	add.w	r7, fp, #4294967295
 800556c:	3501      	adds	r5, #1
 800556e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005572:	4628      	mov	r0, r5
 8005574:	f7fa ffde 	bl	8000534 <__aeabi_i2d>
 8005578:	4642      	mov	r2, r8
 800557a:	464b      	mov	r3, r9
 800557c:	f7fb f844 	bl	8000608 <__aeabi_dmul>
 8005580:	4b86      	ldr	r3, [pc, #536]	; (800579c <_dtoa_r+0x64c>)
 8005582:	2200      	movs	r2, #0
 8005584:	f7fa fe8a 	bl	800029c <__adddf3>
 8005588:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800558c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005590:	9303      	str	r3, [sp, #12]
 8005592:	2e00      	cmp	r6, #0
 8005594:	d158      	bne.n	8005648 <_dtoa_r+0x4f8>
 8005596:	4b82      	ldr	r3, [pc, #520]	; (80057a0 <_dtoa_r+0x650>)
 8005598:	2200      	movs	r2, #0
 800559a:	4640      	mov	r0, r8
 800559c:	4649      	mov	r1, r9
 800559e:	f7fa fe7b 	bl	8000298 <__aeabi_dsub>
 80055a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80055a6:	4680      	mov	r8, r0
 80055a8:	4689      	mov	r9, r1
 80055aa:	f7fb fabd 	bl	8000b28 <__aeabi_dcmpgt>
 80055ae:	2800      	cmp	r0, #0
 80055b0:	f040 8296 	bne.w	8005ae0 <_dtoa_r+0x990>
 80055b4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80055b8:	4640      	mov	r0, r8
 80055ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80055be:	4649      	mov	r1, r9
 80055c0:	f7fb fa94 	bl	8000aec <__aeabi_dcmplt>
 80055c4:	2800      	cmp	r0, #0
 80055c6:	f040 8289 	bne.w	8005adc <_dtoa_r+0x98c>
 80055ca:	ed8d 8b02 	vstr	d8, [sp, #8]
 80055ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	f2c0 814e 	blt.w	8005872 <_dtoa_r+0x722>
 80055d6:	f1bb 0f0e 	cmp.w	fp, #14
 80055da:	f300 814a 	bgt.w	8005872 <_dtoa_r+0x722>
 80055de:	4b6b      	ldr	r3, [pc, #428]	; (800578c <_dtoa_r+0x63c>)
 80055e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80055e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80055e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	f280 80dc 	bge.w	80057a8 <_dtoa_r+0x658>
 80055f0:	9b04      	ldr	r3, [sp, #16]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	f300 80d8 	bgt.w	80057a8 <_dtoa_r+0x658>
 80055f8:	f040 826f 	bne.w	8005ada <_dtoa_r+0x98a>
 80055fc:	4b68      	ldr	r3, [pc, #416]	; (80057a0 <_dtoa_r+0x650>)
 80055fe:	2200      	movs	r2, #0
 8005600:	4640      	mov	r0, r8
 8005602:	4649      	mov	r1, r9
 8005604:	f7fb f800 	bl	8000608 <__aeabi_dmul>
 8005608:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800560c:	f7fb fa82 	bl	8000b14 <__aeabi_dcmpge>
 8005610:	9e04      	ldr	r6, [sp, #16]
 8005612:	4637      	mov	r7, r6
 8005614:	2800      	cmp	r0, #0
 8005616:	f040 8245 	bne.w	8005aa4 <_dtoa_r+0x954>
 800561a:	9d00      	ldr	r5, [sp, #0]
 800561c:	2331      	movs	r3, #49	; 0x31
 800561e:	f805 3b01 	strb.w	r3, [r5], #1
 8005622:	f10b 0b01 	add.w	fp, fp, #1
 8005626:	e241      	b.n	8005aac <_dtoa_r+0x95c>
 8005628:	07f2      	lsls	r2, r6, #31
 800562a:	d505      	bpl.n	8005638 <_dtoa_r+0x4e8>
 800562c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005630:	f7fa ffea 	bl	8000608 <__aeabi_dmul>
 8005634:	3501      	adds	r5, #1
 8005636:	2301      	movs	r3, #1
 8005638:	1076      	asrs	r6, r6, #1
 800563a:	3708      	adds	r7, #8
 800563c:	e773      	b.n	8005526 <_dtoa_r+0x3d6>
 800563e:	2502      	movs	r5, #2
 8005640:	e775      	b.n	800552e <_dtoa_r+0x3de>
 8005642:	9e04      	ldr	r6, [sp, #16]
 8005644:	465f      	mov	r7, fp
 8005646:	e792      	b.n	800556e <_dtoa_r+0x41e>
 8005648:	9900      	ldr	r1, [sp, #0]
 800564a:	4b50      	ldr	r3, [pc, #320]	; (800578c <_dtoa_r+0x63c>)
 800564c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005650:	4431      	add	r1, r6
 8005652:	9102      	str	r1, [sp, #8]
 8005654:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005656:	eeb0 9a47 	vmov.f32	s18, s14
 800565a:	eef0 9a67 	vmov.f32	s19, s15
 800565e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005662:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005666:	2900      	cmp	r1, #0
 8005668:	d044      	beq.n	80056f4 <_dtoa_r+0x5a4>
 800566a:	494e      	ldr	r1, [pc, #312]	; (80057a4 <_dtoa_r+0x654>)
 800566c:	2000      	movs	r0, #0
 800566e:	f7fb f8f5 	bl	800085c <__aeabi_ddiv>
 8005672:	ec53 2b19 	vmov	r2, r3, d9
 8005676:	f7fa fe0f 	bl	8000298 <__aeabi_dsub>
 800567a:	9d00      	ldr	r5, [sp, #0]
 800567c:	ec41 0b19 	vmov	d9, r0, r1
 8005680:	4649      	mov	r1, r9
 8005682:	4640      	mov	r0, r8
 8005684:	f7fb fa70 	bl	8000b68 <__aeabi_d2iz>
 8005688:	4606      	mov	r6, r0
 800568a:	f7fa ff53 	bl	8000534 <__aeabi_i2d>
 800568e:	4602      	mov	r2, r0
 8005690:	460b      	mov	r3, r1
 8005692:	4640      	mov	r0, r8
 8005694:	4649      	mov	r1, r9
 8005696:	f7fa fdff 	bl	8000298 <__aeabi_dsub>
 800569a:	3630      	adds	r6, #48	; 0x30
 800569c:	f805 6b01 	strb.w	r6, [r5], #1
 80056a0:	ec53 2b19 	vmov	r2, r3, d9
 80056a4:	4680      	mov	r8, r0
 80056a6:	4689      	mov	r9, r1
 80056a8:	f7fb fa20 	bl	8000aec <__aeabi_dcmplt>
 80056ac:	2800      	cmp	r0, #0
 80056ae:	d164      	bne.n	800577a <_dtoa_r+0x62a>
 80056b0:	4642      	mov	r2, r8
 80056b2:	464b      	mov	r3, r9
 80056b4:	4937      	ldr	r1, [pc, #220]	; (8005794 <_dtoa_r+0x644>)
 80056b6:	2000      	movs	r0, #0
 80056b8:	f7fa fdee 	bl	8000298 <__aeabi_dsub>
 80056bc:	ec53 2b19 	vmov	r2, r3, d9
 80056c0:	f7fb fa14 	bl	8000aec <__aeabi_dcmplt>
 80056c4:	2800      	cmp	r0, #0
 80056c6:	f040 80b6 	bne.w	8005836 <_dtoa_r+0x6e6>
 80056ca:	9b02      	ldr	r3, [sp, #8]
 80056cc:	429d      	cmp	r5, r3
 80056ce:	f43f af7c 	beq.w	80055ca <_dtoa_r+0x47a>
 80056d2:	4b31      	ldr	r3, [pc, #196]	; (8005798 <_dtoa_r+0x648>)
 80056d4:	ec51 0b19 	vmov	r0, r1, d9
 80056d8:	2200      	movs	r2, #0
 80056da:	f7fa ff95 	bl	8000608 <__aeabi_dmul>
 80056de:	4b2e      	ldr	r3, [pc, #184]	; (8005798 <_dtoa_r+0x648>)
 80056e0:	ec41 0b19 	vmov	d9, r0, r1
 80056e4:	2200      	movs	r2, #0
 80056e6:	4640      	mov	r0, r8
 80056e8:	4649      	mov	r1, r9
 80056ea:	f7fa ff8d 	bl	8000608 <__aeabi_dmul>
 80056ee:	4680      	mov	r8, r0
 80056f0:	4689      	mov	r9, r1
 80056f2:	e7c5      	b.n	8005680 <_dtoa_r+0x530>
 80056f4:	ec51 0b17 	vmov	r0, r1, d7
 80056f8:	f7fa ff86 	bl	8000608 <__aeabi_dmul>
 80056fc:	9b02      	ldr	r3, [sp, #8]
 80056fe:	9d00      	ldr	r5, [sp, #0]
 8005700:	930f      	str	r3, [sp, #60]	; 0x3c
 8005702:	ec41 0b19 	vmov	d9, r0, r1
 8005706:	4649      	mov	r1, r9
 8005708:	4640      	mov	r0, r8
 800570a:	f7fb fa2d 	bl	8000b68 <__aeabi_d2iz>
 800570e:	4606      	mov	r6, r0
 8005710:	f7fa ff10 	bl	8000534 <__aeabi_i2d>
 8005714:	3630      	adds	r6, #48	; 0x30
 8005716:	4602      	mov	r2, r0
 8005718:	460b      	mov	r3, r1
 800571a:	4640      	mov	r0, r8
 800571c:	4649      	mov	r1, r9
 800571e:	f7fa fdbb 	bl	8000298 <__aeabi_dsub>
 8005722:	f805 6b01 	strb.w	r6, [r5], #1
 8005726:	9b02      	ldr	r3, [sp, #8]
 8005728:	429d      	cmp	r5, r3
 800572a:	4680      	mov	r8, r0
 800572c:	4689      	mov	r9, r1
 800572e:	f04f 0200 	mov.w	r2, #0
 8005732:	d124      	bne.n	800577e <_dtoa_r+0x62e>
 8005734:	4b1b      	ldr	r3, [pc, #108]	; (80057a4 <_dtoa_r+0x654>)
 8005736:	ec51 0b19 	vmov	r0, r1, d9
 800573a:	f7fa fdaf 	bl	800029c <__adddf3>
 800573e:	4602      	mov	r2, r0
 8005740:	460b      	mov	r3, r1
 8005742:	4640      	mov	r0, r8
 8005744:	4649      	mov	r1, r9
 8005746:	f7fb f9ef 	bl	8000b28 <__aeabi_dcmpgt>
 800574a:	2800      	cmp	r0, #0
 800574c:	d173      	bne.n	8005836 <_dtoa_r+0x6e6>
 800574e:	ec53 2b19 	vmov	r2, r3, d9
 8005752:	4914      	ldr	r1, [pc, #80]	; (80057a4 <_dtoa_r+0x654>)
 8005754:	2000      	movs	r0, #0
 8005756:	f7fa fd9f 	bl	8000298 <__aeabi_dsub>
 800575a:	4602      	mov	r2, r0
 800575c:	460b      	mov	r3, r1
 800575e:	4640      	mov	r0, r8
 8005760:	4649      	mov	r1, r9
 8005762:	f7fb f9c3 	bl	8000aec <__aeabi_dcmplt>
 8005766:	2800      	cmp	r0, #0
 8005768:	f43f af2f 	beq.w	80055ca <_dtoa_r+0x47a>
 800576c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800576e:	1e6b      	subs	r3, r5, #1
 8005770:	930f      	str	r3, [sp, #60]	; 0x3c
 8005772:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005776:	2b30      	cmp	r3, #48	; 0x30
 8005778:	d0f8      	beq.n	800576c <_dtoa_r+0x61c>
 800577a:	46bb      	mov	fp, r7
 800577c:	e04a      	b.n	8005814 <_dtoa_r+0x6c4>
 800577e:	4b06      	ldr	r3, [pc, #24]	; (8005798 <_dtoa_r+0x648>)
 8005780:	f7fa ff42 	bl	8000608 <__aeabi_dmul>
 8005784:	4680      	mov	r8, r0
 8005786:	4689      	mov	r9, r1
 8005788:	e7bd      	b.n	8005706 <_dtoa_r+0x5b6>
 800578a:	bf00      	nop
 800578c:	08006f68 	.word	0x08006f68
 8005790:	08006f40 	.word	0x08006f40
 8005794:	3ff00000 	.word	0x3ff00000
 8005798:	40240000 	.word	0x40240000
 800579c:	401c0000 	.word	0x401c0000
 80057a0:	40140000 	.word	0x40140000
 80057a4:	3fe00000 	.word	0x3fe00000
 80057a8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80057ac:	9d00      	ldr	r5, [sp, #0]
 80057ae:	4642      	mov	r2, r8
 80057b0:	464b      	mov	r3, r9
 80057b2:	4630      	mov	r0, r6
 80057b4:	4639      	mov	r1, r7
 80057b6:	f7fb f851 	bl	800085c <__aeabi_ddiv>
 80057ba:	f7fb f9d5 	bl	8000b68 <__aeabi_d2iz>
 80057be:	9001      	str	r0, [sp, #4]
 80057c0:	f7fa feb8 	bl	8000534 <__aeabi_i2d>
 80057c4:	4642      	mov	r2, r8
 80057c6:	464b      	mov	r3, r9
 80057c8:	f7fa ff1e 	bl	8000608 <__aeabi_dmul>
 80057cc:	4602      	mov	r2, r0
 80057ce:	460b      	mov	r3, r1
 80057d0:	4630      	mov	r0, r6
 80057d2:	4639      	mov	r1, r7
 80057d4:	f7fa fd60 	bl	8000298 <__aeabi_dsub>
 80057d8:	9e01      	ldr	r6, [sp, #4]
 80057da:	9f04      	ldr	r7, [sp, #16]
 80057dc:	3630      	adds	r6, #48	; 0x30
 80057de:	f805 6b01 	strb.w	r6, [r5], #1
 80057e2:	9e00      	ldr	r6, [sp, #0]
 80057e4:	1bae      	subs	r6, r5, r6
 80057e6:	42b7      	cmp	r7, r6
 80057e8:	4602      	mov	r2, r0
 80057ea:	460b      	mov	r3, r1
 80057ec:	d134      	bne.n	8005858 <_dtoa_r+0x708>
 80057ee:	f7fa fd55 	bl	800029c <__adddf3>
 80057f2:	4642      	mov	r2, r8
 80057f4:	464b      	mov	r3, r9
 80057f6:	4606      	mov	r6, r0
 80057f8:	460f      	mov	r7, r1
 80057fa:	f7fb f995 	bl	8000b28 <__aeabi_dcmpgt>
 80057fe:	b9c8      	cbnz	r0, 8005834 <_dtoa_r+0x6e4>
 8005800:	4642      	mov	r2, r8
 8005802:	464b      	mov	r3, r9
 8005804:	4630      	mov	r0, r6
 8005806:	4639      	mov	r1, r7
 8005808:	f7fb f966 	bl	8000ad8 <__aeabi_dcmpeq>
 800580c:	b110      	cbz	r0, 8005814 <_dtoa_r+0x6c4>
 800580e:	9b01      	ldr	r3, [sp, #4]
 8005810:	07db      	lsls	r3, r3, #31
 8005812:	d40f      	bmi.n	8005834 <_dtoa_r+0x6e4>
 8005814:	4651      	mov	r1, sl
 8005816:	4620      	mov	r0, r4
 8005818:	f000 fbcc 	bl	8005fb4 <_Bfree>
 800581c:	2300      	movs	r3, #0
 800581e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005820:	702b      	strb	r3, [r5, #0]
 8005822:	f10b 0301 	add.w	r3, fp, #1
 8005826:	6013      	str	r3, [r2, #0]
 8005828:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800582a:	2b00      	cmp	r3, #0
 800582c:	f43f ace2 	beq.w	80051f4 <_dtoa_r+0xa4>
 8005830:	601d      	str	r5, [r3, #0]
 8005832:	e4df      	b.n	80051f4 <_dtoa_r+0xa4>
 8005834:	465f      	mov	r7, fp
 8005836:	462b      	mov	r3, r5
 8005838:	461d      	mov	r5, r3
 800583a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800583e:	2a39      	cmp	r2, #57	; 0x39
 8005840:	d106      	bne.n	8005850 <_dtoa_r+0x700>
 8005842:	9a00      	ldr	r2, [sp, #0]
 8005844:	429a      	cmp	r2, r3
 8005846:	d1f7      	bne.n	8005838 <_dtoa_r+0x6e8>
 8005848:	9900      	ldr	r1, [sp, #0]
 800584a:	2230      	movs	r2, #48	; 0x30
 800584c:	3701      	adds	r7, #1
 800584e:	700a      	strb	r2, [r1, #0]
 8005850:	781a      	ldrb	r2, [r3, #0]
 8005852:	3201      	adds	r2, #1
 8005854:	701a      	strb	r2, [r3, #0]
 8005856:	e790      	b.n	800577a <_dtoa_r+0x62a>
 8005858:	4ba3      	ldr	r3, [pc, #652]	; (8005ae8 <_dtoa_r+0x998>)
 800585a:	2200      	movs	r2, #0
 800585c:	f7fa fed4 	bl	8000608 <__aeabi_dmul>
 8005860:	2200      	movs	r2, #0
 8005862:	2300      	movs	r3, #0
 8005864:	4606      	mov	r6, r0
 8005866:	460f      	mov	r7, r1
 8005868:	f7fb f936 	bl	8000ad8 <__aeabi_dcmpeq>
 800586c:	2800      	cmp	r0, #0
 800586e:	d09e      	beq.n	80057ae <_dtoa_r+0x65e>
 8005870:	e7d0      	b.n	8005814 <_dtoa_r+0x6c4>
 8005872:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005874:	2a00      	cmp	r2, #0
 8005876:	f000 80ca 	beq.w	8005a0e <_dtoa_r+0x8be>
 800587a:	9a07      	ldr	r2, [sp, #28]
 800587c:	2a01      	cmp	r2, #1
 800587e:	f300 80ad 	bgt.w	80059dc <_dtoa_r+0x88c>
 8005882:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005884:	2a00      	cmp	r2, #0
 8005886:	f000 80a5 	beq.w	80059d4 <_dtoa_r+0x884>
 800588a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800588e:	9e08      	ldr	r6, [sp, #32]
 8005890:	9d05      	ldr	r5, [sp, #20]
 8005892:	9a05      	ldr	r2, [sp, #20]
 8005894:	441a      	add	r2, r3
 8005896:	9205      	str	r2, [sp, #20]
 8005898:	9a06      	ldr	r2, [sp, #24]
 800589a:	2101      	movs	r1, #1
 800589c:	441a      	add	r2, r3
 800589e:	4620      	mov	r0, r4
 80058a0:	9206      	str	r2, [sp, #24]
 80058a2:	f000 fc3d 	bl	8006120 <__i2b>
 80058a6:	4607      	mov	r7, r0
 80058a8:	b165      	cbz	r5, 80058c4 <_dtoa_r+0x774>
 80058aa:	9b06      	ldr	r3, [sp, #24]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	dd09      	ble.n	80058c4 <_dtoa_r+0x774>
 80058b0:	42ab      	cmp	r3, r5
 80058b2:	9a05      	ldr	r2, [sp, #20]
 80058b4:	bfa8      	it	ge
 80058b6:	462b      	movge	r3, r5
 80058b8:	1ad2      	subs	r2, r2, r3
 80058ba:	9205      	str	r2, [sp, #20]
 80058bc:	9a06      	ldr	r2, [sp, #24]
 80058be:	1aed      	subs	r5, r5, r3
 80058c0:	1ad3      	subs	r3, r2, r3
 80058c2:	9306      	str	r3, [sp, #24]
 80058c4:	9b08      	ldr	r3, [sp, #32]
 80058c6:	b1f3      	cbz	r3, 8005906 <_dtoa_r+0x7b6>
 80058c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	f000 80a3 	beq.w	8005a16 <_dtoa_r+0x8c6>
 80058d0:	2e00      	cmp	r6, #0
 80058d2:	dd10      	ble.n	80058f6 <_dtoa_r+0x7a6>
 80058d4:	4639      	mov	r1, r7
 80058d6:	4632      	mov	r2, r6
 80058d8:	4620      	mov	r0, r4
 80058da:	f000 fce1 	bl	80062a0 <__pow5mult>
 80058de:	4652      	mov	r2, sl
 80058e0:	4601      	mov	r1, r0
 80058e2:	4607      	mov	r7, r0
 80058e4:	4620      	mov	r0, r4
 80058e6:	f000 fc31 	bl	800614c <__multiply>
 80058ea:	4651      	mov	r1, sl
 80058ec:	4680      	mov	r8, r0
 80058ee:	4620      	mov	r0, r4
 80058f0:	f000 fb60 	bl	8005fb4 <_Bfree>
 80058f4:	46c2      	mov	sl, r8
 80058f6:	9b08      	ldr	r3, [sp, #32]
 80058f8:	1b9a      	subs	r2, r3, r6
 80058fa:	d004      	beq.n	8005906 <_dtoa_r+0x7b6>
 80058fc:	4651      	mov	r1, sl
 80058fe:	4620      	mov	r0, r4
 8005900:	f000 fcce 	bl	80062a0 <__pow5mult>
 8005904:	4682      	mov	sl, r0
 8005906:	2101      	movs	r1, #1
 8005908:	4620      	mov	r0, r4
 800590a:	f000 fc09 	bl	8006120 <__i2b>
 800590e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005910:	2b00      	cmp	r3, #0
 8005912:	4606      	mov	r6, r0
 8005914:	f340 8081 	ble.w	8005a1a <_dtoa_r+0x8ca>
 8005918:	461a      	mov	r2, r3
 800591a:	4601      	mov	r1, r0
 800591c:	4620      	mov	r0, r4
 800591e:	f000 fcbf 	bl	80062a0 <__pow5mult>
 8005922:	9b07      	ldr	r3, [sp, #28]
 8005924:	2b01      	cmp	r3, #1
 8005926:	4606      	mov	r6, r0
 8005928:	dd7a      	ble.n	8005a20 <_dtoa_r+0x8d0>
 800592a:	f04f 0800 	mov.w	r8, #0
 800592e:	6933      	ldr	r3, [r6, #16]
 8005930:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005934:	6918      	ldr	r0, [r3, #16]
 8005936:	f000 fba5 	bl	8006084 <__hi0bits>
 800593a:	f1c0 0020 	rsb	r0, r0, #32
 800593e:	9b06      	ldr	r3, [sp, #24]
 8005940:	4418      	add	r0, r3
 8005942:	f010 001f 	ands.w	r0, r0, #31
 8005946:	f000 8094 	beq.w	8005a72 <_dtoa_r+0x922>
 800594a:	f1c0 0320 	rsb	r3, r0, #32
 800594e:	2b04      	cmp	r3, #4
 8005950:	f340 8085 	ble.w	8005a5e <_dtoa_r+0x90e>
 8005954:	9b05      	ldr	r3, [sp, #20]
 8005956:	f1c0 001c 	rsb	r0, r0, #28
 800595a:	4403      	add	r3, r0
 800595c:	9305      	str	r3, [sp, #20]
 800595e:	9b06      	ldr	r3, [sp, #24]
 8005960:	4403      	add	r3, r0
 8005962:	4405      	add	r5, r0
 8005964:	9306      	str	r3, [sp, #24]
 8005966:	9b05      	ldr	r3, [sp, #20]
 8005968:	2b00      	cmp	r3, #0
 800596a:	dd05      	ble.n	8005978 <_dtoa_r+0x828>
 800596c:	4651      	mov	r1, sl
 800596e:	461a      	mov	r2, r3
 8005970:	4620      	mov	r0, r4
 8005972:	f000 fcef 	bl	8006354 <__lshift>
 8005976:	4682      	mov	sl, r0
 8005978:	9b06      	ldr	r3, [sp, #24]
 800597a:	2b00      	cmp	r3, #0
 800597c:	dd05      	ble.n	800598a <_dtoa_r+0x83a>
 800597e:	4631      	mov	r1, r6
 8005980:	461a      	mov	r2, r3
 8005982:	4620      	mov	r0, r4
 8005984:	f000 fce6 	bl	8006354 <__lshift>
 8005988:	4606      	mov	r6, r0
 800598a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800598c:	2b00      	cmp	r3, #0
 800598e:	d072      	beq.n	8005a76 <_dtoa_r+0x926>
 8005990:	4631      	mov	r1, r6
 8005992:	4650      	mov	r0, sl
 8005994:	f000 fd4a 	bl	800642c <__mcmp>
 8005998:	2800      	cmp	r0, #0
 800599a:	da6c      	bge.n	8005a76 <_dtoa_r+0x926>
 800599c:	2300      	movs	r3, #0
 800599e:	4651      	mov	r1, sl
 80059a0:	220a      	movs	r2, #10
 80059a2:	4620      	mov	r0, r4
 80059a4:	f000 fb28 	bl	8005ff8 <__multadd>
 80059a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059aa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80059ae:	4682      	mov	sl, r0
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	f000 81b0 	beq.w	8005d16 <_dtoa_r+0xbc6>
 80059b6:	2300      	movs	r3, #0
 80059b8:	4639      	mov	r1, r7
 80059ba:	220a      	movs	r2, #10
 80059bc:	4620      	mov	r0, r4
 80059be:	f000 fb1b 	bl	8005ff8 <__multadd>
 80059c2:	9b01      	ldr	r3, [sp, #4]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	4607      	mov	r7, r0
 80059c8:	f300 8096 	bgt.w	8005af8 <_dtoa_r+0x9a8>
 80059cc:	9b07      	ldr	r3, [sp, #28]
 80059ce:	2b02      	cmp	r3, #2
 80059d0:	dc59      	bgt.n	8005a86 <_dtoa_r+0x936>
 80059d2:	e091      	b.n	8005af8 <_dtoa_r+0x9a8>
 80059d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80059d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80059da:	e758      	b.n	800588e <_dtoa_r+0x73e>
 80059dc:	9b04      	ldr	r3, [sp, #16]
 80059de:	1e5e      	subs	r6, r3, #1
 80059e0:	9b08      	ldr	r3, [sp, #32]
 80059e2:	42b3      	cmp	r3, r6
 80059e4:	bfbf      	itttt	lt
 80059e6:	9b08      	ldrlt	r3, [sp, #32]
 80059e8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80059ea:	9608      	strlt	r6, [sp, #32]
 80059ec:	1af3      	sublt	r3, r6, r3
 80059ee:	bfb4      	ite	lt
 80059f0:	18d2      	addlt	r2, r2, r3
 80059f2:	1b9e      	subge	r6, r3, r6
 80059f4:	9b04      	ldr	r3, [sp, #16]
 80059f6:	bfbc      	itt	lt
 80059f8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80059fa:	2600      	movlt	r6, #0
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	bfb7      	itett	lt
 8005a00:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8005a04:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8005a08:	1a9d      	sublt	r5, r3, r2
 8005a0a:	2300      	movlt	r3, #0
 8005a0c:	e741      	b.n	8005892 <_dtoa_r+0x742>
 8005a0e:	9e08      	ldr	r6, [sp, #32]
 8005a10:	9d05      	ldr	r5, [sp, #20]
 8005a12:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005a14:	e748      	b.n	80058a8 <_dtoa_r+0x758>
 8005a16:	9a08      	ldr	r2, [sp, #32]
 8005a18:	e770      	b.n	80058fc <_dtoa_r+0x7ac>
 8005a1a:	9b07      	ldr	r3, [sp, #28]
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	dc19      	bgt.n	8005a54 <_dtoa_r+0x904>
 8005a20:	9b02      	ldr	r3, [sp, #8]
 8005a22:	b9bb      	cbnz	r3, 8005a54 <_dtoa_r+0x904>
 8005a24:	9b03      	ldr	r3, [sp, #12]
 8005a26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a2a:	b99b      	cbnz	r3, 8005a54 <_dtoa_r+0x904>
 8005a2c:	9b03      	ldr	r3, [sp, #12]
 8005a2e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005a32:	0d1b      	lsrs	r3, r3, #20
 8005a34:	051b      	lsls	r3, r3, #20
 8005a36:	b183      	cbz	r3, 8005a5a <_dtoa_r+0x90a>
 8005a38:	9b05      	ldr	r3, [sp, #20]
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	9305      	str	r3, [sp, #20]
 8005a3e:	9b06      	ldr	r3, [sp, #24]
 8005a40:	3301      	adds	r3, #1
 8005a42:	9306      	str	r3, [sp, #24]
 8005a44:	f04f 0801 	mov.w	r8, #1
 8005a48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	f47f af6f 	bne.w	800592e <_dtoa_r+0x7de>
 8005a50:	2001      	movs	r0, #1
 8005a52:	e774      	b.n	800593e <_dtoa_r+0x7ee>
 8005a54:	f04f 0800 	mov.w	r8, #0
 8005a58:	e7f6      	b.n	8005a48 <_dtoa_r+0x8f8>
 8005a5a:	4698      	mov	r8, r3
 8005a5c:	e7f4      	b.n	8005a48 <_dtoa_r+0x8f8>
 8005a5e:	d082      	beq.n	8005966 <_dtoa_r+0x816>
 8005a60:	9a05      	ldr	r2, [sp, #20]
 8005a62:	331c      	adds	r3, #28
 8005a64:	441a      	add	r2, r3
 8005a66:	9205      	str	r2, [sp, #20]
 8005a68:	9a06      	ldr	r2, [sp, #24]
 8005a6a:	441a      	add	r2, r3
 8005a6c:	441d      	add	r5, r3
 8005a6e:	9206      	str	r2, [sp, #24]
 8005a70:	e779      	b.n	8005966 <_dtoa_r+0x816>
 8005a72:	4603      	mov	r3, r0
 8005a74:	e7f4      	b.n	8005a60 <_dtoa_r+0x910>
 8005a76:	9b04      	ldr	r3, [sp, #16]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	dc37      	bgt.n	8005aec <_dtoa_r+0x99c>
 8005a7c:	9b07      	ldr	r3, [sp, #28]
 8005a7e:	2b02      	cmp	r3, #2
 8005a80:	dd34      	ble.n	8005aec <_dtoa_r+0x99c>
 8005a82:	9b04      	ldr	r3, [sp, #16]
 8005a84:	9301      	str	r3, [sp, #4]
 8005a86:	9b01      	ldr	r3, [sp, #4]
 8005a88:	b963      	cbnz	r3, 8005aa4 <_dtoa_r+0x954>
 8005a8a:	4631      	mov	r1, r6
 8005a8c:	2205      	movs	r2, #5
 8005a8e:	4620      	mov	r0, r4
 8005a90:	f000 fab2 	bl	8005ff8 <__multadd>
 8005a94:	4601      	mov	r1, r0
 8005a96:	4606      	mov	r6, r0
 8005a98:	4650      	mov	r0, sl
 8005a9a:	f000 fcc7 	bl	800642c <__mcmp>
 8005a9e:	2800      	cmp	r0, #0
 8005aa0:	f73f adbb 	bgt.w	800561a <_dtoa_r+0x4ca>
 8005aa4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005aa6:	9d00      	ldr	r5, [sp, #0]
 8005aa8:	ea6f 0b03 	mvn.w	fp, r3
 8005aac:	f04f 0800 	mov.w	r8, #0
 8005ab0:	4631      	mov	r1, r6
 8005ab2:	4620      	mov	r0, r4
 8005ab4:	f000 fa7e 	bl	8005fb4 <_Bfree>
 8005ab8:	2f00      	cmp	r7, #0
 8005aba:	f43f aeab 	beq.w	8005814 <_dtoa_r+0x6c4>
 8005abe:	f1b8 0f00 	cmp.w	r8, #0
 8005ac2:	d005      	beq.n	8005ad0 <_dtoa_r+0x980>
 8005ac4:	45b8      	cmp	r8, r7
 8005ac6:	d003      	beq.n	8005ad0 <_dtoa_r+0x980>
 8005ac8:	4641      	mov	r1, r8
 8005aca:	4620      	mov	r0, r4
 8005acc:	f000 fa72 	bl	8005fb4 <_Bfree>
 8005ad0:	4639      	mov	r1, r7
 8005ad2:	4620      	mov	r0, r4
 8005ad4:	f000 fa6e 	bl	8005fb4 <_Bfree>
 8005ad8:	e69c      	b.n	8005814 <_dtoa_r+0x6c4>
 8005ada:	2600      	movs	r6, #0
 8005adc:	4637      	mov	r7, r6
 8005ade:	e7e1      	b.n	8005aa4 <_dtoa_r+0x954>
 8005ae0:	46bb      	mov	fp, r7
 8005ae2:	4637      	mov	r7, r6
 8005ae4:	e599      	b.n	800561a <_dtoa_r+0x4ca>
 8005ae6:	bf00      	nop
 8005ae8:	40240000 	.word	0x40240000
 8005aec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	f000 80c8 	beq.w	8005c84 <_dtoa_r+0xb34>
 8005af4:	9b04      	ldr	r3, [sp, #16]
 8005af6:	9301      	str	r3, [sp, #4]
 8005af8:	2d00      	cmp	r5, #0
 8005afa:	dd05      	ble.n	8005b08 <_dtoa_r+0x9b8>
 8005afc:	4639      	mov	r1, r7
 8005afe:	462a      	mov	r2, r5
 8005b00:	4620      	mov	r0, r4
 8005b02:	f000 fc27 	bl	8006354 <__lshift>
 8005b06:	4607      	mov	r7, r0
 8005b08:	f1b8 0f00 	cmp.w	r8, #0
 8005b0c:	d05b      	beq.n	8005bc6 <_dtoa_r+0xa76>
 8005b0e:	6879      	ldr	r1, [r7, #4]
 8005b10:	4620      	mov	r0, r4
 8005b12:	f000 fa0f 	bl	8005f34 <_Balloc>
 8005b16:	4605      	mov	r5, r0
 8005b18:	b928      	cbnz	r0, 8005b26 <_dtoa_r+0x9d6>
 8005b1a:	4b83      	ldr	r3, [pc, #524]	; (8005d28 <_dtoa_r+0xbd8>)
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8005b22:	f7ff bb2e 	b.w	8005182 <_dtoa_r+0x32>
 8005b26:	693a      	ldr	r2, [r7, #16]
 8005b28:	3202      	adds	r2, #2
 8005b2a:	0092      	lsls	r2, r2, #2
 8005b2c:	f107 010c 	add.w	r1, r7, #12
 8005b30:	300c      	adds	r0, #12
 8005b32:	f7ff fa77 	bl	8005024 <memcpy>
 8005b36:	2201      	movs	r2, #1
 8005b38:	4629      	mov	r1, r5
 8005b3a:	4620      	mov	r0, r4
 8005b3c:	f000 fc0a 	bl	8006354 <__lshift>
 8005b40:	9b00      	ldr	r3, [sp, #0]
 8005b42:	3301      	adds	r3, #1
 8005b44:	9304      	str	r3, [sp, #16]
 8005b46:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b4a:	4413      	add	r3, r2
 8005b4c:	9308      	str	r3, [sp, #32]
 8005b4e:	9b02      	ldr	r3, [sp, #8]
 8005b50:	f003 0301 	and.w	r3, r3, #1
 8005b54:	46b8      	mov	r8, r7
 8005b56:	9306      	str	r3, [sp, #24]
 8005b58:	4607      	mov	r7, r0
 8005b5a:	9b04      	ldr	r3, [sp, #16]
 8005b5c:	4631      	mov	r1, r6
 8005b5e:	3b01      	subs	r3, #1
 8005b60:	4650      	mov	r0, sl
 8005b62:	9301      	str	r3, [sp, #4]
 8005b64:	f7ff fa6c 	bl	8005040 <quorem>
 8005b68:	4641      	mov	r1, r8
 8005b6a:	9002      	str	r0, [sp, #8]
 8005b6c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005b70:	4650      	mov	r0, sl
 8005b72:	f000 fc5b 	bl	800642c <__mcmp>
 8005b76:	463a      	mov	r2, r7
 8005b78:	9005      	str	r0, [sp, #20]
 8005b7a:	4631      	mov	r1, r6
 8005b7c:	4620      	mov	r0, r4
 8005b7e:	f000 fc71 	bl	8006464 <__mdiff>
 8005b82:	68c2      	ldr	r2, [r0, #12]
 8005b84:	4605      	mov	r5, r0
 8005b86:	bb02      	cbnz	r2, 8005bca <_dtoa_r+0xa7a>
 8005b88:	4601      	mov	r1, r0
 8005b8a:	4650      	mov	r0, sl
 8005b8c:	f000 fc4e 	bl	800642c <__mcmp>
 8005b90:	4602      	mov	r2, r0
 8005b92:	4629      	mov	r1, r5
 8005b94:	4620      	mov	r0, r4
 8005b96:	9209      	str	r2, [sp, #36]	; 0x24
 8005b98:	f000 fa0c 	bl	8005fb4 <_Bfree>
 8005b9c:	9b07      	ldr	r3, [sp, #28]
 8005b9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ba0:	9d04      	ldr	r5, [sp, #16]
 8005ba2:	ea43 0102 	orr.w	r1, r3, r2
 8005ba6:	9b06      	ldr	r3, [sp, #24]
 8005ba8:	4319      	orrs	r1, r3
 8005baa:	d110      	bne.n	8005bce <_dtoa_r+0xa7e>
 8005bac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005bb0:	d029      	beq.n	8005c06 <_dtoa_r+0xab6>
 8005bb2:	9b05      	ldr	r3, [sp, #20]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	dd02      	ble.n	8005bbe <_dtoa_r+0xa6e>
 8005bb8:	9b02      	ldr	r3, [sp, #8]
 8005bba:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8005bbe:	9b01      	ldr	r3, [sp, #4]
 8005bc0:	f883 9000 	strb.w	r9, [r3]
 8005bc4:	e774      	b.n	8005ab0 <_dtoa_r+0x960>
 8005bc6:	4638      	mov	r0, r7
 8005bc8:	e7ba      	b.n	8005b40 <_dtoa_r+0x9f0>
 8005bca:	2201      	movs	r2, #1
 8005bcc:	e7e1      	b.n	8005b92 <_dtoa_r+0xa42>
 8005bce:	9b05      	ldr	r3, [sp, #20]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	db04      	blt.n	8005bde <_dtoa_r+0xa8e>
 8005bd4:	9907      	ldr	r1, [sp, #28]
 8005bd6:	430b      	orrs	r3, r1
 8005bd8:	9906      	ldr	r1, [sp, #24]
 8005bda:	430b      	orrs	r3, r1
 8005bdc:	d120      	bne.n	8005c20 <_dtoa_r+0xad0>
 8005bde:	2a00      	cmp	r2, #0
 8005be0:	dded      	ble.n	8005bbe <_dtoa_r+0xa6e>
 8005be2:	4651      	mov	r1, sl
 8005be4:	2201      	movs	r2, #1
 8005be6:	4620      	mov	r0, r4
 8005be8:	f000 fbb4 	bl	8006354 <__lshift>
 8005bec:	4631      	mov	r1, r6
 8005bee:	4682      	mov	sl, r0
 8005bf0:	f000 fc1c 	bl	800642c <__mcmp>
 8005bf4:	2800      	cmp	r0, #0
 8005bf6:	dc03      	bgt.n	8005c00 <_dtoa_r+0xab0>
 8005bf8:	d1e1      	bne.n	8005bbe <_dtoa_r+0xa6e>
 8005bfa:	f019 0f01 	tst.w	r9, #1
 8005bfe:	d0de      	beq.n	8005bbe <_dtoa_r+0xa6e>
 8005c00:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005c04:	d1d8      	bne.n	8005bb8 <_dtoa_r+0xa68>
 8005c06:	9a01      	ldr	r2, [sp, #4]
 8005c08:	2339      	movs	r3, #57	; 0x39
 8005c0a:	7013      	strb	r3, [r2, #0]
 8005c0c:	462b      	mov	r3, r5
 8005c0e:	461d      	mov	r5, r3
 8005c10:	3b01      	subs	r3, #1
 8005c12:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005c16:	2a39      	cmp	r2, #57	; 0x39
 8005c18:	d06c      	beq.n	8005cf4 <_dtoa_r+0xba4>
 8005c1a:	3201      	adds	r2, #1
 8005c1c:	701a      	strb	r2, [r3, #0]
 8005c1e:	e747      	b.n	8005ab0 <_dtoa_r+0x960>
 8005c20:	2a00      	cmp	r2, #0
 8005c22:	dd07      	ble.n	8005c34 <_dtoa_r+0xae4>
 8005c24:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005c28:	d0ed      	beq.n	8005c06 <_dtoa_r+0xab6>
 8005c2a:	9a01      	ldr	r2, [sp, #4]
 8005c2c:	f109 0301 	add.w	r3, r9, #1
 8005c30:	7013      	strb	r3, [r2, #0]
 8005c32:	e73d      	b.n	8005ab0 <_dtoa_r+0x960>
 8005c34:	9b04      	ldr	r3, [sp, #16]
 8005c36:	9a08      	ldr	r2, [sp, #32]
 8005c38:	f803 9c01 	strb.w	r9, [r3, #-1]
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d043      	beq.n	8005cc8 <_dtoa_r+0xb78>
 8005c40:	4651      	mov	r1, sl
 8005c42:	2300      	movs	r3, #0
 8005c44:	220a      	movs	r2, #10
 8005c46:	4620      	mov	r0, r4
 8005c48:	f000 f9d6 	bl	8005ff8 <__multadd>
 8005c4c:	45b8      	cmp	r8, r7
 8005c4e:	4682      	mov	sl, r0
 8005c50:	f04f 0300 	mov.w	r3, #0
 8005c54:	f04f 020a 	mov.w	r2, #10
 8005c58:	4641      	mov	r1, r8
 8005c5a:	4620      	mov	r0, r4
 8005c5c:	d107      	bne.n	8005c6e <_dtoa_r+0xb1e>
 8005c5e:	f000 f9cb 	bl	8005ff8 <__multadd>
 8005c62:	4680      	mov	r8, r0
 8005c64:	4607      	mov	r7, r0
 8005c66:	9b04      	ldr	r3, [sp, #16]
 8005c68:	3301      	adds	r3, #1
 8005c6a:	9304      	str	r3, [sp, #16]
 8005c6c:	e775      	b.n	8005b5a <_dtoa_r+0xa0a>
 8005c6e:	f000 f9c3 	bl	8005ff8 <__multadd>
 8005c72:	4639      	mov	r1, r7
 8005c74:	4680      	mov	r8, r0
 8005c76:	2300      	movs	r3, #0
 8005c78:	220a      	movs	r2, #10
 8005c7a:	4620      	mov	r0, r4
 8005c7c:	f000 f9bc 	bl	8005ff8 <__multadd>
 8005c80:	4607      	mov	r7, r0
 8005c82:	e7f0      	b.n	8005c66 <_dtoa_r+0xb16>
 8005c84:	9b04      	ldr	r3, [sp, #16]
 8005c86:	9301      	str	r3, [sp, #4]
 8005c88:	9d00      	ldr	r5, [sp, #0]
 8005c8a:	4631      	mov	r1, r6
 8005c8c:	4650      	mov	r0, sl
 8005c8e:	f7ff f9d7 	bl	8005040 <quorem>
 8005c92:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005c96:	9b00      	ldr	r3, [sp, #0]
 8005c98:	f805 9b01 	strb.w	r9, [r5], #1
 8005c9c:	1aea      	subs	r2, r5, r3
 8005c9e:	9b01      	ldr	r3, [sp, #4]
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	dd07      	ble.n	8005cb4 <_dtoa_r+0xb64>
 8005ca4:	4651      	mov	r1, sl
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	220a      	movs	r2, #10
 8005caa:	4620      	mov	r0, r4
 8005cac:	f000 f9a4 	bl	8005ff8 <__multadd>
 8005cb0:	4682      	mov	sl, r0
 8005cb2:	e7ea      	b.n	8005c8a <_dtoa_r+0xb3a>
 8005cb4:	9b01      	ldr	r3, [sp, #4]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	bfc8      	it	gt
 8005cba:	461d      	movgt	r5, r3
 8005cbc:	9b00      	ldr	r3, [sp, #0]
 8005cbe:	bfd8      	it	le
 8005cc0:	2501      	movle	r5, #1
 8005cc2:	441d      	add	r5, r3
 8005cc4:	f04f 0800 	mov.w	r8, #0
 8005cc8:	4651      	mov	r1, sl
 8005cca:	2201      	movs	r2, #1
 8005ccc:	4620      	mov	r0, r4
 8005cce:	f000 fb41 	bl	8006354 <__lshift>
 8005cd2:	4631      	mov	r1, r6
 8005cd4:	4682      	mov	sl, r0
 8005cd6:	f000 fba9 	bl	800642c <__mcmp>
 8005cda:	2800      	cmp	r0, #0
 8005cdc:	dc96      	bgt.n	8005c0c <_dtoa_r+0xabc>
 8005cde:	d102      	bne.n	8005ce6 <_dtoa_r+0xb96>
 8005ce0:	f019 0f01 	tst.w	r9, #1
 8005ce4:	d192      	bne.n	8005c0c <_dtoa_r+0xabc>
 8005ce6:	462b      	mov	r3, r5
 8005ce8:	461d      	mov	r5, r3
 8005cea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005cee:	2a30      	cmp	r2, #48	; 0x30
 8005cf0:	d0fa      	beq.n	8005ce8 <_dtoa_r+0xb98>
 8005cf2:	e6dd      	b.n	8005ab0 <_dtoa_r+0x960>
 8005cf4:	9a00      	ldr	r2, [sp, #0]
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d189      	bne.n	8005c0e <_dtoa_r+0xabe>
 8005cfa:	f10b 0b01 	add.w	fp, fp, #1
 8005cfe:	2331      	movs	r3, #49	; 0x31
 8005d00:	e796      	b.n	8005c30 <_dtoa_r+0xae0>
 8005d02:	4b0a      	ldr	r3, [pc, #40]	; (8005d2c <_dtoa_r+0xbdc>)
 8005d04:	f7ff ba99 	b.w	800523a <_dtoa_r+0xea>
 8005d08:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	f47f aa6d 	bne.w	80051ea <_dtoa_r+0x9a>
 8005d10:	4b07      	ldr	r3, [pc, #28]	; (8005d30 <_dtoa_r+0xbe0>)
 8005d12:	f7ff ba92 	b.w	800523a <_dtoa_r+0xea>
 8005d16:	9b01      	ldr	r3, [sp, #4]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	dcb5      	bgt.n	8005c88 <_dtoa_r+0xb38>
 8005d1c:	9b07      	ldr	r3, [sp, #28]
 8005d1e:	2b02      	cmp	r3, #2
 8005d20:	f73f aeb1 	bgt.w	8005a86 <_dtoa_r+0x936>
 8005d24:	e7b0      	b.n	8005c88 <_dtoa_r+0xb38>
 8005d26:	bf00      	nop
 8005d28:	08006ed0 	.word	0x08006ed0
 8005d2c:	08006e30 	.word	0x08006e30
 8005d30:	08006e54 	.word	0x08006e54

08005d34 <_free_r>:
 8005d34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005d36:	2900      	cmp	r1, #0
 8005d38:	d044      	beq.n	8005dc4 <_free_r+0x90>
 8005d3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d3e:	9001      	str	r0, [sp, #4]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	f1a1 0404 	sub.w	r4, r1, #4
 8005d46:	bfb8      	it	lt
 8005d48:	18e4      	addlt	r4, r4, r3
 8005d4a:	f000 f8e7 	bl	8005f1c <__malloc_lock>
 8005d4e:	4a1e      	ldr	r2, [pc, #120]	; (8005dc8 <_free_r+0x94>)
 8005d50:	9801      	ldr	r0, [sp, #4]
 8005d52:	6813      	ldr	r3, [r2, #0]
 8005d54:	b933      	cbnz	r3, 8005d64 <_free_r+0x30>
 8005d56:	6063      	str	r3, [r4, #4]
 8005d58:	6014      	str	r4, [r2, #0]
 8005d5a:	b003      	add	sp, #12
 8005d5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005d60:	f000 b8e2 	b.w	8005f28 <__malloc_unlock>
 8005d64:	42a3      	cmp	r3, r4
 8005d66:	d908      	bls.n	8005d7a <_free_r+0x46>
 8005d68:	6825      	ldr	r5, [r4, #0]
 8005d6a:	1961      	adds	r1, r4, r5
 8005d6c:	428b      	cmp	r3, r1
 8005d6e:	bf01      	itttt	eq
 8005d70:	6819      	ldreq	r1, [r3, #0]
 8005d72:	685b      	ldreq	r3, [r3, #4]
 8005d74:	1949      	addeq	r1, r1, r5
 8005d76:	6021      	streq	r1, [r4, #0]
 8005d78:	e7ed      	b.n	8005d56 <_free_r+0x22>
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	b10b      	cbz	r3, 8005d84 <_free_r+0x50>
 8005d80:	42a3      	cmp	r3, r4
 8005d82:	d9fa      	bls.n	8005d7a <_free_r+0x46>
 8005d84:	6811      	ldr	r1, [r2, #0]
 8005d86:	1855      	adds	r5, r2, r1
 8005d88:	42a5      	cmp	r5, r4
 8005d8a:	d10b      	bne.n	8005da4 <_free_r+0x70>
 8005d8c:	6824      	ldr	r4, [r4, #0]
 8005d8e:	4421      	add	r1, r4
 8005d90:	1854      	adds	r4, r2, r1
 8005d92:	42a3      	cmp	r3, r4
 8005d94:	6011      	str	r1, [r2, #0]
 8005d96:	d1e0      	bne.n	8005d5a <_free_r+0x26>
 8005d98:	681c      	ldr	r4, [r3, #0]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	6053      	str	r3, [r2, #4]
 8005d9e:	440c      	add	r4, r1
 8005da0:	6014      	str	r4, [r2, #0]
 8005da2:	e7da      	b.n	8005d5a <_free_r+0x26>
 8005da4:	d902      	bls.n	8005dac <_free_r+0x78>
 8005da6:	230c      	movs	r3, #12
 8005da8:	6003      	str	r3, [r0, #0]
 8005daa:	e7d6      	b.n	8005d5a <_free_r+0x26>
 8005dac:	6825      	ldr	r5, [r4, #0]
 8005dae:	1961      	adds	r1, r4, r5
 8005db0:	428b      	cmp	r3, r1
 8005db2:	bf04      	itt	eq
 8005db4:	6819      	ldreq	r1, [r3, #0]
 8005db6:	685b      	ldreq	r3, [r3, #4]
 8005db8:	6063      	str	r3, [r4, #4]
 8005dba:	bf04      	itt	eq
 8005dbc:	1949      	addeq	r1, r1, r5
 8005dbe:	6021      	streq	r1, [r4, #0]
 8005dc0:	6054      	str	r4, [r2, #4]
 8005dc2:	e7ca      	b.n	8005d5a <_free_r+0x26>
 8005dc4:	b003      	add	sp, #12
 8005dc6:	bd30      	pop	{r4, r5, pc}
 8005dc8:	200040e8 	.word	0x200040e8

08005dcc <malloc>:
 8005dcc:	4b02      	ldr	r3, [pc, #8]	; (8005dd8 <malloc+0xc>)
 8005dce:	4601      	mov	r1, r0
 8005dd0:	6818      	ldr	r0, [r3, #0]
 8005dd2:	f000 b823 	b.w	8005e1c <_malloc_r>
 8005dd6:	bf00      	nop
 8005dd8:	2000006c 	.word	0x2000006c

08005ddc <sbrk_aligned>:
 8005ddc:	b570      	push	{r4, r5, r6, lr}
 8005dde:	4e0e      	ldr	r6, [pc, #56]	; (8005e18 <sbrk_aligned+0x3c>)
 8005de0:	460c      	mov	r4, r1
 8005de2:	6831      	ldr	r1, [r6, #0]
 8005de4:	4605      	mov	r5, r0
 8005de6:	b911      	cbnz	r1, 8005dee <sbrk_aligned+0x12>
 8005de8:	f000 fcce 	bl	8006788 <_sbrk_r>
 8005dec:	6030      	str	r0, [r6, #0]
 8005dee:	4621      	mov	r1, r4
 8005df0:	4628      	mov	r0, r5
 8005df2:	f000 fcc9 	bl	8006788 <_sbrk_r>
 8005df6:	1c43      	adds	r3, r0, #1
 8005df8:	d00a      	beq.n	8005e10 <sbrk_aligned+0x34>
 8005dfa:	1cc4      	adds	r4, r0, #3
 8005dfc:	f024 0403 	bic.w	r4, r4, #3
 8005e00:	42a0      	cmp	r0, r4
 8005e02:	d007      	beq.n	8005e14 <sbrk_aligned+0x38>
 8005e04:	1a21      	subs	r1, r4, r0
 8005e06:	4628      	mov	r0, r5
 8005e08:	f000 fcbe 	bl	8006788 <_sbrk_r>
 8005e0c:	3001      	adds	r0, #1
 8005e0e:	d101      	bne.n	8005e14 <sbrk_aligned+0x38>
 8005e10:	f04f 34ff 	mov.w	r4, #4294967295
 8005e14:	4620      	mov	r0, r4
 8005e16:	bd70      	pop	{r4, r5, r6, pc}
 8005e18:	200040ec 	.word	0x200040ec

08005e1c <_malloc_r>:
 8005e1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e20:	1ccd      	adds	r5, r1, #3
 8005e22:	f025 0503 	bic.w	r5, r5, #3
 8005e26:	3508      	adds	r5, #8
 8005e28:	2d0c      	cmp	r5, #12
 8005e2a:	bf38      	it	cc
 8005e2c:	250c      	movcc	r5, #12
 8005e2e:	2d00      	cmp	r5, #0
 8005e30:	4607      	mov	r7, r0
 8005e32:	db01      	blt.n	8005e38 <_malloc_r+0x1c>
 8005e34:	42a9      	cmp	r1, r5
 8005e36:	d905      	bls.n	8005e44 <_malloc_r+0x28>
 8005e38:	230c      	movs	r3, #12
 8005e3a:	603b      	str	r3, [r7, #0]
 8005e3c:	2600      	movs	r6, #0
 8005e3e:	4630      	mov	r0, r6
 8005e40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e44:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005f18 <_malloc_r+0xfc>
 8005e48:	f000 f868 	bl	8005f1c <__malloc_lock>
 8005e4c:	f8d8 3000 	ldr.w	r3, [r8]
 8005e50:	461c      	mov	r4, r3
 8005e52:	bb5c      	cbnz	r4, 8005eac <_malloc_r+0x90>
 8005e54:	4629      	mov	r1, r5
 8005e56:	4638      	mov	r0, r7
 8005e58:	f7ff ffc0 	bl	8005ddc <sbrk_aligned>
 8005e5c:	1c43      	adds	r3, r0, #1
 8005e5e:	4604      	mov	r4, r0
 8005e60:	d155      	bne.n	8005f0e <_malloc_r+0xf2>
 8005e62:	f8d8 4000 	ldr.w	r4, [r8]
 8005e66:	4626      	mov	r6, r4
 8005e68:	2e00      	cmp	r6, #0
 8005e6a:	d145      	bne.n	8005ef8 <_malloc_r+0xdc>
 8005e6c:	2c00      	cmp	r4, #0
 8005e6e:	d048      	beq.n	8005f02 <_malloc_r+0xe6>
 8005e70:	6823      	ldr	r3, [r4, #0]
 8005e72:	4631      	mov	r1, r6
 8005e74:	4638      	mov	r0, r7
 8005e76:	eb04 0903 	add.w	r9, r4, r3
 8005e7a:	f000 fc85 	bl	8006788 <_sbrk_r>
 8005e7e:	4581      	cmp	r9, r0
 8005e80:	d13f      	bne.n	8005f02 <_malloc_r+0xe6>
 8005e82:	6821      	ldr	r1, [r4, #0]
 8005e84:	1a6d      	subs	r5, r5, r1
 8005e86:	4629      	mov	r1, r5
 8005e88:	4638      	mov	r0, r7
 8005e8a:	f7ff ffa7 	bl	8005ddc <sbrk_aligned>
 8005e8e:	3001      	adds	r0, #1
 8005e90:	d037      	beq.n	8005f02 <_malloc_r+0xe6>
 8005e92:	6823      	ldr	r3, [r4, #0]
 8005e94:	442b      	add	r3, r5
 8005e96:	6023      	str	r3, [r4, #0]
 8005e98:	f8d8 3000 	ldr.w	r3, [r8]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d038      	beq.n	8005f12 <_malloc_r+0xf6>
 8005ea0:	685a      	ldr	r2, [r3, #4]
 8005ea2:	42a2      	cmp	r2, r4
 8005ea4:	d12b      	bne.n	8005efe <_malloc_r+0xe2>
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	605a      	str	r2, [r3, #4]
 8005eaa:	e00f      	b.n	8005ecc <_malloc_r+0xb0>
 8005eac:	6822      	ldr	r2, [r4, #0]
 8005eae:	1b52      	subs	r2, r2, r5
 8005eb0:	d41f      	bmi.n	8005ef2 <_malloc_r+0xd6>
 8005eb2:	2a0b      	cmp	r2, #11
 8005eb4:	d917      	bls.n	8005ee6 <_malloc_r+0xca>
 8005eb6:	1961      	adds	r1, r4, r5
 8005eb8:	42a3      	cmp	r3, r4
 8005eba:	6025      	str	r5, [r4, #0]
 8005ebc:	bf18      	it	ne
 8005ebe:	6059      	strne	r1, [r3, #4]
 8005ec0:	6863      	ldr	r3, [r4, #4]
 8005ec2:	bf08      	it	eq
 8005ec4:	f8c8 1000 	streq.w	r1, [r8]
 8005ec8:	5162      	str	r2, [r4, r5]
 8005eca:	604b      	str	r3, [r1, #4]
 8005ecc:	4638      	mov	r0, r7
 8005ece:	f104 060b 	add.w	r6, r4, #11
 8005ed2:	f000 f829 	bl	8005f28 <__malloc_unlock>
 8005ed6:	f026 0607 	bic.w	r6, r6, #7
 8005eda:	1d23      	adds	r3, r4, #4
 8005edc:	1af2      	subs	r2, r6, r3
 8005ede:	d0ae      	beq.n	8005e3e <_malloc_r+0x22>
 8005ee0:	1b9b      	subs	r3, r3, r6
 8005ee2:	50a3      	str	r3, [r4, r2]
 8005ee4:	e7ab      	b.n	8005e3e <_malloc_r+0x22>
 8005ee6:	42a3      	cmp	r3, r4
 8005ee8:	6862      	ldr	r2, [r4, #4]
 8005eea:	d1dd      	bne.n	8005ea8 <_malloc_r+0x8c>
 8005eec:	f8c8 2000 	str.w	r2, [r8]
 8005ef0:	e7ec      	b.n	8005ecc <_malloc_r+0xb0>
 8005ef2:	4623      	mov	r3, r4
 8005ef4:	6864      	ldr	r4, [r4, #4]
 8005ef6:	e7ac      	b.n	8005e52 <_malloc_r+0x36>
 8005ef8:	4634      	mov	r4, r6
 8005efa:	6876      	ldr	r6, [r6, #4]
 8005efc:	e7b4      	b.n	8005e68 <_malloc_r+0x4c>
 8005efe:	4613      	mov	r3, r2
 8005f00:	e7cc      	b.n	8005e9c <_malloc_r+0x80>
 8005f02:	230c      	movs	r3, #12
 8005f04:	603b      	str	r3, [r7, #0]
 8005f06:	4638      	mov	r0, r7
 8005f08:	f000 f80e 	bl	8005f28 <__malloc_unlock>
 8005f0c:	e797      	b.n	8005e3e <_malloc_r+0x22>
 8005f0e:	6025      	str	r5, [r4, #0]
 8005f10:	e7dc      	b.n	8005ecc <_malloc_r+0xb0>
 8005f12:	605b      	str	r3, [r3, #4]
 8005f14:	deff      	udf	#255	; 0xff
 8005f16:	bf00      	nop
 8005f18:	200040e8 	.word	0x200040e8

08005f1c <__malloc_lock>:
 8005f1c:	4801      	ldr	r0, [pc, #4]	; (8005f24 <__malloc_lock+0x8>)
 8005f1e:	f7ff b87f 	b.w	8005020 <__retarget_lock_acquire_recursive>
 8005f22:	bf00      	nop
 8005f24:	200040e4 	.word	0x200040e4

08005f28 <__malloc_unlock>:
 8005f28:	4801      	ldr	r0, [pc, #4]	; (8005f30 <__malloc_unlock+0x8>)
 8005f2a:	f7ff b87a 	b.w	8005022 <__retarget_lock_release_recursive>
 8005f2e:	bf00      	nop
 8005f30:	200040e4 	.word	0x200040e4

08005f34 <_Balloc>:
 8005f34:	b570      	push	{r4, r5, r6, lr}
 8005f36:	69c6      	ldr	r6, [r0, #28]
 8005f38:	4604      	mov	r4, r0
 8005f3a:	460d      	mov	r5, r1
 8005f3c:	b976      	cbnz	r6, 8005f5c <_Balloc+0x28>
 8005f3e:	2010      	movs	r0, #16
 8005f40:	f7ff ff44 	bl	8005dcc <malloc>
 8005f44:	4602      	mov	r2, r0
 8005f46:	61e0      	str	r0, [r4, #28]
 8005f48:	b920      	cbnz	r0, 8005f54 <_Balloc+0x20>
 8005f4a:	4b18      	ldr	r3, [pc, #96]	; (8005fac <_Balloc+0x78>)
 8005f4c:	4818      	ldr	r0, [pc, #96]	; (8005fb0 <_Balloc+0x7c>)
 8005f4e:	216b      	movs	r1, #107	; 0x6b
 8005f50:	f000 fc2a 	bl	80067a8 <__assert_func>
 8005f54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005f58:	6006      	str	r6, [r0, #0]
 8005f5a:	60c6      	str	r6, [r0, #12]
 8005f5c:	69e6      	ldr	r6, [r4, #28]
 8005f5e:	68f3      	ldr	r3, [r6, #12]
 8005f60:	b183      	cbz	r3, 8005f84 <_Balloc+0x50>
 8005f62:	69e3      	ldr	r3, [r4, #28]
 8005f64:	68db      	ldr	r3, [r3, #12]
 8005f66:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005f6a:	b9b8      	cbnz	r0, 8005f9c <_Balloc+0x68>
 8005f6c:	2101      	movs	r1, #1
 8005f6e:	fa01 f605 	lsl.w	r6, r1, r5
 8005f72:	1d72      	adds	r2, r6, #5
 8005f74:	0092      	lsls	r2, r2, #2
 8005f76:	4620      	mov	r0, r4
 8005f78:	f000 fc34 	bl	80067e4 <_calloc_r>
 8005f7c:	b160      	cbz	r0, 8005f98 <_Balloc+0x64>
 8005f7e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005f82:	e00e      	b.n	8005fa2 <_Balloc+0x6e>
 8005f84:	2221      	movs	r2, #33	; 0x21
 8005f86:	2104      	movs	r1, #4
 8005f88:	4620      	mov	r0, r4
 8005f8a:	f000 fc2b 	bl	80067e4 <_calloc_r>
 8005f8e:	69e3      	ldr	r3, [r4, #28]
 8005f90:	60f0      	str	r0, [r6, #12]
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d1e4      	bne.n	8005f62 <_Balloc+0x2e>
 8005f98:	2000      	movs	r0, #0
 8005f9a:	bd70      	pop	{r4, r5, r6, pc}
 8005f9c:	6802      	ldr	r2, [r0, #0]
 8005f9e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005fa8:	e7f7      	b.n	8005f9a <_Balloc+0x66>
 8005faa:	bf00      	nop
 8005fac:	08006e61 	.word	0x08006e61
 8005fb0:	08006ee1 	.word	0x08006ee1

08005fb4 <_Bfree>:
 8005fb4:	b570      	push	{r4, r5, r6, lr}
 8005fb6:	69c6      	ldr	r6, [r0, #28]
 8005fb8:	4605      	mov	r5, r0
 8005fba:	460c      	mov	r4, r1
 8005fbc:	b976      	cbnz	r6, 8005fdc <_Bfree+0x28>
 8005fbe:	2010      	movs	r0, #16
 8005fc0:	f7ff ff04 	bl	8005dcc <malloc>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	61e8      	str	r0, [r5, #28]
 8005fc8:	b920      	cbnz	r0, 8005fd4 <_Bfree+0x20>
 8005fca:	4b09      	ldr	r3, [pc, #36]	; (8005ff0 <_Bfree+0x3c>)
 8005fcc:	4809      	ldr	r0, [pc, #36]	; (8005ff4 <_Bfree+0x40>)
 8005fce:	218f      	movs	r1, #143	; 0x8f
 8005fd0:	f000 fbea 	bl	80067a8 <__assert_func>
 8005fd4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005fd8:	6006      	str	r6, [r0, #0]
 8005fda:	60c6      	str	r6, [r0, #12]
 8005fdc:	b13c      	cbz	r4, 8005fee <_Bfree+0x3a>
 8005fde:	69eb      	ldr	r3, [r5, #28]
 8005fe0:	6862      	ldr	r2, [r4, #4]
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005fe8:	6021      	str	r1, [r4, #0]
 8005fea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005fee:	bd70      	pop	{r4, r5, r6, pc}
 8005ff0:	08006e61 	.word	0x08006e61
 8005ff4:	08006ee1 	.word	0x08006ee1

08005ff8 <__multadd>:
 8005ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ffc:	690d      	ldr	r5, [r1, #16]
 8005ffe:	4607      	mov	r7, r0
 8006000:	460c      	mov	r4, r1
 8006002:	461e      	mov	r6, r3
 8006004:	f101 0c14 	add.w	ip, r1, #20
 8006008:	2000      	movs	r0, #0
 800600a:	f8dc 3000 	ldr.w	r3, [ip]
 800600e:	b299      	uxth	r1, r3
 8006010:	fb02 6101 	mla	r1, r2, r1, r6
 8006014:	0c1e      	lsrs	r6, r3, #16
 8006016:	0c0b      	lsrs	r3, r1, #16
 8006018:	fb02 3306 	mla	r3, r2, r6, r3
 800601c:	b289      	uxth	r1, r1
 800601e:	3001      	adds	r0, #1
 8006020:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006024:	4285      	cmp	r5, r0
 8006026:	f84c 1b04 	str.w	r1, [ip], #4
 800602a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800602e:	dcec      	bgt.n	800600a <__multadd+0x12>
 8006030:	b30e      	cbz	r6, 8006076 <__multadd+0x7e>
 8006032:	68a3      	ldr	r3, [r4, #8]
 8006034:	42ab      	cmp	r3, r5
 8006036:	dc19      	bgt.n	800606c <__multadd+0x74>
 8006038:	6861      	ldr	r1, [r4, #4]
 800603a:	4638      	mov	r0, r7
 800603c:	3101      	adds	r1, #1
 800603e:	f7ff ff79 	bl	8005f34 <_Balloc>
 8006042:	4680      	mov	r8, r0
 8006044:	b928      	cbnz	r0, 8006052 <__multadd+0x5a>
 8006046:	4602      	mov	r2, r0
 8006048:	4b0c      	ldr	r3, [pc, #48]	; (800607c <__multadd+0x84>)
 800604a:	480d      	ldr	r0, [pc, #52]	; (8006080 <__multadd+0x88>)
 800604c:	21ba      	movs	r1, #186	; 0xba
 800604e:	f000 fbab 	bl	80067a8 <__assert_func>
 8006052:	6922      	ldr	r2, [r4, #16]
 8006054:	3202      	adds	r2, #2
 8006056:	f104 010c 	add.w	r1, r4, #12
 800605a:	0092      	lsls	r2, r2, #2
 800605c:	300c      	adds	r0, #12
 800605e:	f7fe ffe1 	bl	8005024 <memcpy>
 8006062:	4621      	mov	r1, r4
 8006064:	4638      	mov	r0, r7
 8006066:	f7ff ffa5 	bl	8005fb4 <_Bfree>
 800606a:	4644      	mov	r4, r8
 800606c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006070:	3501      	adds	r5, #1
 8006072:	615e      	str	r6, [r3, #20]
 8006074:	6125      	str	r5, [r4, #16]
 8006076:	4620      	mov	r0, r4
 8006078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800607c:	08006ed0 	.word	0x08006ed0
 8006080:	08006ee1 	.word	0x08006ee1

08006084 <__hi0bits>:
 8006084:	0c03      	lsrs	r3, r0, #16
 8006086:	041b      	lsls	r3, r3, #16
 8006088:	b9d3      	cbnz	r3, 80060c0 <__hi0bits+0x3c>
 800608a:	0400      	lsls	r0, r0, #16
 800608c:	2310      	movs	r3, #16
 800608e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006092:	bf04      	itt	eq
 8006094:	0200      	lsleq	r0, r0, #8
 8006096:	3308      	addeq	r3, #8
 8006098:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800609c:	bf04      	itt	eq
 800609e:	0100      	lsleq	r0, r0, #4
 80060a0:	3304      	addeq	r3, #4
 80060a2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80060a6:	bf04      	itt	eq
 80060a8:	0080      	lsleq	r0, r0, #2
 80060aa:	3302      	addeq	r3, #2
 80060ac:	2800      	cmp	r0, #0
 80060ae:	db05      	blt.n	80060bc <__hi0bits+0x38>
 80060b0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80060b4:	f103 0301 	add.w	r3, r3, #1
 80060b8:	bf08      	it	eq
 80060ba:	2320      	moveq	r3, #32
 80060bc:	4618      	mov	r0, r3
 80060be:	4770      	bx	lr
 80060c0:	2300      	movs	r3, #0
 80060c2:	e7e4      	b.n	800608e <__hi0bits+0xa>

080060c4 <__lo0bits>:
 80060c4:	6803      	ldr	r3, [r0, #0]
 80060c6:	f013 0207 	ands.w	r2, r3, #7
 80060ca:	d00c      	beq.n	80060e6 <__lo0bits+0x22>
 80060cc:	07d9      	lsls	r1, r3, #31
 80060ce:	d422      	bmi.n	8006116 <__lo0bits+0x52>
 80060d0:	079a      	lsls	r2, r3, #30
 80060d2:	bf49      	itett	mi
 80060d4:	085b      	lsrmi	r3, r3, #1
 80060d6:	089b      	lsrpl	r3, r3, #2
 80060d8:	6003      	strmi	r3, [r0, #0]
 80060da:	2201      	movmi	r2, #1
 80060dc:	bf5c      	itt	pl
 80060de:	6003      	strpl	r3, [r0, #0]
 80060e0:	2202      	movpl	r2, #2
 80060e2:	4610      	mov	r0, r2
 80060e4:	4770      	bx	lr
 80060e6:	b299      	uxth	r1, r3
 80060e8:	b909      	cbnz	r1, 80060ee <__lo0bits+0x2a>
 80060ea:	0c1b      	lsrs	r3, r3, #16
 80060ec:	2210      	movs	r2, #16
 80060ee:	b2d9      	uxtb	r1, r3
 80060f0:	b909      	cbnz	r1, 80060f6 <__lo0bits+0x32>
 80060f2:	3208      	adds	r2, #8
 80060f4:	0a1b      	lsrs	r3, r3, #8
 80060f6:	0719      	lsls	r1, r3, #28
 80060f8:	bf04      	itt	eq
 80060fa:	091b      	lsreq	r3, r3, #4
 80060fc:	3204      	addeq	r2, #4
 80060fe:	0799      	lsls	r1, r3, #30
 8006100:	bf04      	itt	eq
 8006102:	089b      	lsreq	r3, r3, #2
 8006104:	3202      	addeq	r2, #2
 8006106:	07d9      	lsls	r1, r3, #31
 8006108:	d403      	bmi.n	8006112 <__lo0bits+0x4e>
 800610a:	085b      	lsrs	r3, r3, #1
 800610c:	f102 0201 	add.w	r2, r2, #1
 8006110:	d003      	beq.n	800611a <__lo0bits+0x56>
 8006112:	6003      	str	r3, [r0, #0]
 8006114:	e7e5      	b.n	80060e2 <__lo0bits+0x1e>
 8006116:	2200      	movs	r2, #0
 8006118:	e7e3      	b.n	80060e2 <__lo0bits+0x1e>
 800611a:	2220      	movs	r2, #32
 800611c:	e7e1      	b.n	80060e2 <__lo0bits+0x1e>
	...

08006120 <__i2b>:
 8006120:	b510      	push	{r4, lr}
 8006122:	460c      	mov	r4, r1
 8006124:	2101      	movs	r1, #1
 8006126:	f7ff ff05 	bl	8005f34 <_Balloc>
 800612a:	4602      	mov	r2, r0
 800612c:	b928      	cbnz	r0, 800613a <__i2b+0x1a>
 800612e:	4b05      	ldr	r3, [pc, #20]	; (8006144 <__i2b+0x24>)
 8006130:	4805      	ldr	r0, [pc, #20]	; (8006148 <__i2b+0x28>)
 8006132:	f240 1145 	movw	r1, #325	; 0x145
 8006136:	f000 fb37 	bl	80067a8 <__assert_func>
 800613a:	2301      	movs	r3, #1
 800613c:	6144      	str	r4, [r0, #20]
 800613e:	6103      	str	r3, [r0, #16]
 8006140:	bd10      	pop	{r4, pc}
 8006142:	bf00      	nop
 8006144:	08006ed0 	.word	0x08006ed0
 8006148:	08006ee1 	.word	0x08006ee1

0800614c <__multiply>:
 800614c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006150:	4691      	mov	r9, r2
 8006152:	690a      	ldr	r2, [r1, #16]
 8006154:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006158:	429a      	cmp	r2, r3
 800615a:	bfb8      	it	lt
 800615c:	460b      	movlt	r3, r1
 800615e:	460c      	mov	r4, r1
 8006160:	bfbc      	itt	lt
 8006162:	464c      	movlt	r4, r9
 8006164:	4699      	movlt	r9, r3
 8006166:	6927      	ldr	r7, [r4, #16]
 8006168:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800616c:	68a3      	ldr	r3, [r4, #8]
 800616e:	6861      	ldr	r1, [r4, #4]
 8006170:	eb07 060a 	add.w	r6, r7, sl
 8006174:	42b3      	cmp	r3, r6
 8006176:	b085      	sub	sp, #20
 8006178:	bfb8      	it	lt
 800617a:	3101      	addlt	r1, #1
 800617c:	f7ff feda 	bl	8005f34 <_Balloc>
 8006180:	b930      	cbnz	r0, 8006190 <__multiply+0x44>
 8006182:	4602      	mov	r2, r0
 8006184:	4b44      	ldr	r3, [pc, #272]	; (8006298 <__multiply+0x14c>)
 8006186:	4845      	ldr	r0, [pc, #276]	; (800629c <__multiply+0x150>)
 8006188:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800618c:	f000 fb0c 	bl	80067a8 <__assert_func>
 8006190:	f100 0514 	add.w	r5, r0, #20
 8006194:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006198:	462b      	mov	r3, r5
 800619a:	2200      	movs	r2, #0
 800619c:	4543      	cmp	r3, r8
 800619e:	d321      	bcc.n	80061e4 <__multiply+0x98>
 80061a0:	f104 0314 	add.w	r3, r4, #20
 80061a4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80061a8:	f109 0314 	add.w	r3, r9, #20
 80061ac:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80061b0:	9202      	str	r2, [sp, #8]
 80061b2:	1b3a      	subs	r2, r7, r4
 80061b4:	3a15      	subs	r2, #21
 80061b6:	f022 0203 	bic.w	r2, r2, #3
 80061ba:	3204      	adds	r2, #4
 80061bc:	f104 0115 	add.w	r1, r4, #21
 80061c0:	428f      	cmp	r7, r1
 80061c2:	bf38      	it	cc
 80061c4:	2204      	movcc	r2, #4
 80061c6:	9201      	str	r2, [sp, #4]
 80061c8:	9a02      	ldr	r2, [sp, #8]
 80061ca:	9303      	str	r3, [sp, #12]
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d80c      	bhi.n	80061ea <__multiply+0x9e>
 80061d0:	2e00      	cmp	r6, #0
 80061d2:	dd03      	ble.n	80061dc <__multiply+0x90>
 80061d4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d05b      	beq.n	8006294 <__multiply+0x148>
 80061dc:	6106      	str	r6, [r0, #16]
 80061de:	b005      	add	sp, #20
 80061e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061e4:	f843 2b04 	str.w	r2, [r3], #4
 80061e8:	e7d8      	b.n	800619c <__multiply+0x50>
 80061ea:	f8b3 a000 	ldrh.w	sl, [r3]
 80061ee:	f1ba 0f00 	cmp.w	sl, #0
 80061f2:	d024      	beq.n	800623e <__multiply+0xf2>
 80061f4:	f104 0e14 	add.w	lr, r4, #20
 80061f8:	46a9      	mov	r9, r5
 80061fa:	f04f 0c00 	mov.w	ip, #0
 80061fe:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006202:	f8d9 1000 	ldr.w	r1, [r9]
 8006206:	fa1f fb82 	uxth.w	fp, r2
 800620a:	b289      	uxth	r1, r1
 800620c:	fb0a 110b 	mla	r1, sl, fp, r1
 8006210:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006214:	f8d9 2000 	ldr.w	r2, [r9]
 8006218:	4461      	add	r1, ip
 800621a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800621e:	fb0a c20b 	mla	r2, sl, fp, ip
 8006222:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006226:	b289      	uxth	r1, r1
 8006228:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800622c:	4577      	cmp	r7, lr
 800622e:	f849 1b04 	str.w	r1, [r9], #4
 8006232:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006236:	d8e2      	bhi.n	80061fe <__multiply+0xb2>
 8006238:	9a01      	ldr	r2, [sp, #4]
 800623a:	f845 c002 	str.w	ip, [r5, r2]
 800623e:	9a03      	ldr	r2, [sp, #12]
 8006240:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006244:	3304      	adds	r3, #4
 8006246:	f1b9 0f00 	cmp.w	r9, #0
 800624a:	d021      	beq.n	8006290 <__multiply+0x144>
 800624c:	6829      	ldr	r1, [r5, #0]
 800624e:	f104 0c14 	add.w	ip, r4, #20
 8006252:	46ae      	mov	lr, r5
 8006254:	f04f 0a00 	mov.w	sl, #0
 8006258:	f8bc b000 	ldrh.w	fp, [ip]
 800625c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006260:	fb09 220b 	mla	r2, r9, fp, r2
 8006264:	4452      	add	r2, sl
 8006266:	b289      	uxth	r1, r1
 8006268:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800626c:	f84e 1b04 	str.w	r1, [lr], #4
 8006270:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006274:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006278:	f8be 1000 	ldrh.w	r1, [lr]
 800627c:	fb09 110a 	mla	r1, r9, sl, r1
 8006280:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006284:	4567      	cmp	r7, ip
 8006286:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800628a:	d8e5      	bhi.n	8006258 <__multiply+0x10c>
 800628c:	9a01      	ldr	r2, [sp, #4]
 800628e:	50a9      	str	r1, [r5, r2]
 8006290:	3504      	adds	r5, #4
 8006292:	e799      	b.n	80061c8 <__multiply+0x7c>
 8006294:	3e01      	subs	r6, #1
 8006296:	e79b      	b.n	80061d0 <__multiply+0x84>
 8006298:	08006ed0 	.word	0x08006ed0
 800629c:	08006ee1 	.word	0x08006ee1

080062a0 <__pow5mult>:
 80062a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062a4:	4615      	mov	r5, r2
 80062a6:	f012 0203 	ands.w	r2, r2, #3
 80062aa:	4606      	mov	r6, r0
 80062ac:	460f      	mov	r7, r1
 80062ae:	d007      	beq.n	80062c0 <__pow5mult+0x20>
 80062b0:	4c25      	ldr	r4, [pc, #148]	; (8006348 <__pow5mult+0xa8>)
 80062b2:	3a01      	subs	r2, #1
 80062b4:	2300      	movs	r3, #0
 80062b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80062ba:	f7ff fe9d 	bl	8005ff8 <__multadd>
 80062be:	4607      	mov	r7, r0
 80062c0:	10ad      	asrs	r5, r5, #2
 80062c2:	d03d      	beq.n	8006340 <__pow5mult+0xa0>
 80062c4:	69f4      	ldr	r4, [r6, #28]
 80062c6:	b97c      	cbnz	r4, 80062e8 <__pow5mult+0x48>
 80062c8:	2010      	movs	r0, #16
 80062ca:	f7ff fd7f 	bl	8005dcc <malloc>
 80062ce:	4602      	mov	r2, r0
 80062d0:	61f0      	str	r0, [r6, #28]
 80062d2:	b928      	cbnz	r0, 80062e0 <__pow5mult+0x40>
 80062d4:	4b1d      	ldr	r3, [pc, #116]	; (800634c <__pow5mult+0xac>)
 80062d6:	481e      	ldr	r0, [pc, #120]	; (8006350 <__pow5mult+0xb0>)
 80062d8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80062dc:	f000 fa64 	bl	80067a8 <__assert_func>
 80062e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80062e4:	6004      	str	r4, [r0, #0]
 80062e6:	60c4      	str	r4, [r0, #12]
 80062e8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80062ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80062f0:	b94c      	cbnz	r4, 8006306 <__pow5mult+0x66>
 80062f2:	f240 2171 	movw	r1, #625	; 0x271
 80062f6:	4630      	mov	r0, r6
 80062f8:	f7ff ff12 	bl	8006120 <__i2b>
 80062fc:	2300      	movs	r3, #0
 80062fe:	f8c8 0008 	str.w	r0, [r8, #8]
 8006302:	4604      	mov	r4, r0
 8006304:	6003      	str	r3, [r0, #0]
 8006306:	f04f 0900 	mov.w	r9, #0
 800630a:	07eb      	lsls	r3, r5, #31
 800630c:	d50a      	bpl.n	8006324 <__pow5mult+0x84>
 800630e:	4639      	mov	r1, r7
 8006310:	4622      	mov	r2, r4
 8006312:	4630      	mov	r0, r6
 8006314:	f7ff ff1a 	bl	800614c <__multiply>
 8006318:	4639      	mov	r1, r7
 800631a:	4680      	mov	r8, r0
 800631c:	4630      	mov	r0, r6
 800631e:	f7ff fe49 	bl	8005fb4 <_Bfree>
 8006322:	4647      	mov	r7, r8
 8006324:	106d      	asrs	r5, r5, #1
 8006326:	d00b      	beq.n	8006340 <__pow5mult+0xa0>
 8006328:	6820      	ldr	r0, [r4, #0]
 800632a:	b938      	cbnz	r0, 800633c <__pow5mult+0x9c>
 800632c:	4622      	mov	r2, r4
 800632e:	4621      	mov	r1, r4
 8006330:	4630      	mov	r0, r6
 8006332:	f7ff ff0b 	bl	800614c <__multiply>
 8006336:	6020      	str	r0, [r4, #0]
 8006338:	f8c0 9000 	str.w	r9, [r0]
 800633c:	4604      	mov	r4, r0
 800633e:	e7e4      	b.n	800630a <__pow5mult+0x6a>
 8006340:	4638      	mov	r0, r7
 8006342:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006346:	bf00      	nop
 8006348:	08007030 	.word	0x08007030
 800634c:	08006e61 	.word	0x08006e61
 8006350:	08006ee1 	.word	0x08006ee1

08006354 <__lshift>:
 8006354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006358:	460c      	mov	r4, r1
 800635a:	6849      	ldr	r1, [r1, #4]
 800635c:	6923      	ldr	r3, [r4, #16]
 800635e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006362:	68a3      	ldr	r3, [r4, #8]
 8006364:	4607      	mov	r7, r0
 8006366:	4691      	mov	r9, r2
 8006368:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800636c:	f108 0601 	add.w	r6, r8, #1
 8006370:	42b3      	cmp	r3, r6
 8006372:	db0b      	blt.n	800638c <__lshift+0x38>
 8006374:	4638      	mov	r0, r7
 8006376:	f7ff fddd 	bl	8005f34 <_Balloc>
 800637a:	4605      	mov	r5, r0
 800637c:	b948      	cbnz	r0, 8006392 <__lshift+0x3e>
 800637e:	4602      	mov	r2, r0
 8006380:	4b28      	ldr	r3, [pc, #160]	; (8006424 <__lshift+0xd0>)
 8006382:	4829      	ldr	r0, [pc, #164]	; (8006428 <__lshift+0xd4>)
 8006384:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006388:	f000 fa0e 	bl	80067a8 <__assert_func>
 800638c:	3101      	adds	r1, #1
 800638e:	005b      	lsls	r3, r3, #1
 8006390:	e7ee      	b.n	8006370 <__lshift+0x1c>
 8006392:	2300      	movs	r3, #0
 8006394:	f100 0114 	add.w	r1, r0, #20
 8006398:	f100 0210 	add.w	r2, r0, #16
 800639c:	4618      	mov	r0, r3
 800639e:	4553      	cmp	r3, sl
 80063a0:	db33      	blt.n	800640a <__lshift+0xb6>
 80063a2:	6920      	ldr	r0, [r4, #16]
 80063a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80063a8:	f104 0314 	add.w	r3, r4, #20
 80063ac:	f019 091f 	ands.w	r9, r9, #31
 80063b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80063b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80063b8:	d02b      	beq.n	8006412 <__lshift+0xbe>
 80063ba:	f1c9 0e20 	rsb	lr, r9, #32
 80063be:	468a      	mov	sl, r1
 80063c0:	2200      	movs	r2, #0
 80063c2:	6818      	ldr	r0, [r3, #0]
 80063c4:	fa00 f009 	lsl.w	r0, r0, r9
 80063c8:	4310      	orrs	r0, r2
 80063ca:	f84a 0b04 	str.w	r0, [sl], #4
 80063ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80063d2:	459c      	cmp	ip, r3
 80063d4:	fa22 f20e 	lsr.w	r2, r2, lr
 80063d8:	d8f3      	bhi.n	80063c2 <__lshift+0x6e>
 80063da:	ebac 0304 	sub.w	r3, ip, r4
 80063de:	3b15      	subs	r3, #21
 80063e0:	f023 0303 	bic.w	r3, r3, #3
 80063e4:	3304      	adds	r3, #4
 80063e6:	f104 0015 	add.w	r0, r4, #21
 80063ea:	4584      	cmp	ip, r0
 80063ec:	bf38      	it	cc
 80063ee:	2304      	movcc	r3, #4
 80063f0:	50ca      	str	r2, [r1, r3]
 80063f2:	b10a      	cbz	r2, 80063f8 <__lshift+0xa4>
 80063f4:	f108 0602 	add.w	r6, r8, #2
 80063f8:	3e01      	subs	r6, #1
 80063fa:	4638      	mov	r0, r7
 80063fc:	612e      	str	r6, [r5, #16]
 80063fe:	4621      	mov	r1, r4
 8006400:	f7ff fdd8 	bl	8005fb4 <_Bfree>
 8006404:	4628      	mov	r0, r5
 8006406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800640a:	f842 0f04 	str.w	r0, [r2, #4]!
 800640e:	3301      	adds	r3, #1
 8006410:	e7c5      	b.n	800639e <__lshift+0x4a>
 8006412:	3904      	subs	r1, #4
 8006414:	f853 2b04 	ldr.w	r2, [r3], #4
 8006418:	f841 2f04 	str.w	r2, [r1, #4]!
 800641c:	459c      	cmp	ip, r3
 800641e:	d8f9      	bhi.n	8006414 <__lshift+0xc0>
 8006420:	e7ea      	b.n	80063f8 <__lshift+0xa4>
 8006422:	bf00      	nop
 8006424:	08006ed0 	.word	0x08006ed0
 8006428:	08006ee1 	.word	0x08006ee1

0800642c <__mcmp>:
 800642c:	b530      	push	{r4, r5, lr}
 800642e:	6902      	ldr	r2, [r0, #16]
 8006430:	690c      	ldr	r4, [r1, #16]
 8006432:	1b12      	subs	r2, r2, r4
 8006434:	d10e      	bne.n	8006454 <__mcmp+0x28>
 8006436:	f100 0314 	add.w	r3, r0, #20
 800643a:	3114      	adds	r1, #20
 800643c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006440:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006444:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006448:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800644c:	42a5      	cmp	r5, r4
 800644e:	d003      	beq.n	8006458 <__mcmp+0x2c>
 8006450:	d305      	bcc.n	800645e <__mcmp+0x32>
 8006452:	2201      	movs	r2, #1
 8006454:	4610      	mov	r0, r2
 8006456:	bd30      	pop	{r4, r5, pc}
 8006458:	4283      	cmp	r3, r0
 800645a:	d3f3      	bcc.n	8006444 <__mcmp+0x18>
 800645c:	e7fa      	b.n	8006454 <__mcmp+0x28>
 800645e:	f04f 32ff 	mov.w	r2, #4294967295
 8006462:	e7f7      	b.n	8006454 <__mcmp+0x28>

08006464 <__mdiff>:
 8006464:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006468:	460c      	mov	r4, r1
 800646a:	4606      	mov	r6, r0
 800646c:	4611      	mov	r1, r2
 800646e:	4620      	mov	r0, r4
 8006470:	4690      	mov	r8, r2
 8006472:	f7ff ffdb 	bl	800642c <__mcmp>
 8006476:	1e05      	subs	r5, r0, #0
 8006478:	d110      	bne.n	800649c <__mdiff+0x38>
 800647a:	4629      	mov	r1, r5
 800647c:	4630      	mov	r0, r6
 800647e:	f7ff fd59 	bl	8005f34 <_Balloc>
 8006482:	b930      	cbnz	r0, 8006492 <__mdiff+0x2e>
 8006484:	4b3a      	ldr	r3, [pc, #232]	; (8006570 <__mdiff+0x10c>)
 8006486:	4602      	mov	r2, r0
 8006488:	f240 2137 	movw	r1, #567	; 0x237
 800648c:	4839      	ldr	r0, [pc, #228]	; (8006574 <__mdiff+0x110>)
 800648e:	f000 f98b 	bl	80067a8 <__assert_func>
 8006492:	2301      	movs	r3, #1
 8006494:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006498:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800649c:	bfa4      	itt	ge
 800649e:	4643      	movge	r3, r8
 80064a0:	46a0      	movge	r8, r4
 80064a2:	4630      	mov	r0, r6
 80064a4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80064a8:	bfa6      	itte	ge
 80064aa:	461c      	movge	r4, r3
 80064ac:	2500      	movge	r5, #0
 80064ae:	2501      	movlt	r5, #1
 80064b0:	f7ff fd40 	bl	8005f34 <_Balloc>
 80064b4:	b920      	cbnz	r0, 80064c0 <__mdiff+0x5c>
 80064b6:	4b2e      	ldr	r3, [pc, #184]	; (8006570 <__mdiff+0x10c>)
 80064b8:	4602      	mov	r2, r0
 80064ba:	f240 2145 	movw	r1, #581	; 0x245
 80064be:	e7e5      	b.n	800648c <__mdiff+0x28>
 80064c0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80064c4:	6926      	ldr	r6, [r4, #16]
 80064c6:	60c5      	str	r5, [r0, #12]
 80064c8:	f104 0914 	add.w	r9, r4, #20
 80064cc:	f108 0514 	add.w	r5, r8, #20
 80064d0:	f100 0e14 	add.w	lr, r0, #20
 80064d4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80064d8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80064dc:	f108 0210 	add.w	r2, r8, #16
 80064e0:	46f2      	mov	sl, lr
 80064e2:	2100      	movs	r1, #0
 80064e4:	f859 3b04 	ldr.w	r3, [r9], #4
 80064e8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80064ec:	fa11 f88b 	uxtah	r8, r1, fp
 80064f0:	b299      	uxth	r1, r3
 80064f2:	0c1b      	lsrs	r3, r3, #16
 80064f4:	eba8 0801 	sub.w	r8, r8, r1
 80064f8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80064fc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006500:	fa1f f888 	uxth.w	r8, r8
 8006504:	1419      	asrs	r1, r3, #16
 8006506:	454e      	cmp	r6, r9
 8006508:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800650c:	f84a 3b04 	str.w	r3, [sl], #4
 8006510:	d8e8      	bhi.n	80064e4 <__mdiff+0x80>
 8006512:	1b33      	subs	r3, r6, r4
 8006514:	3b15      	subs	r3, #21
 8006516:	f023 0303 	bic.w	r3, r3, #3
 800651a:	3304      	adds	r3, #4
 800651c:	3415      	adds	r4, #21
 800651e:	42a6      	cmp	r6, r4
 8006520:	bf38      	it	cc
 8006522:	2304      	movcc	r3, #4
 8006524:	441d      	add	r5, r3
 8006526:	4473      	add	r3, lr
 8006528:	469e      	mov	lr, r3
 800652a:	462e      	mov	r6, r5
 800652c:	4566      	cmp	r6, ip
 800652e:	d30e      	bcc.n	800654e <__mdiff+0xea>
 8006530:	f10c 0203 	add.w	r2, ip, #3
 8006534:	1b52      	subs	r2, r2, r5
 8006536:	f022 0203 	bic.w	r2, r2, #3
 800653a:	3d03      	subs	r5, #3
 800653c:	45ac      	cmp	ip, r5
 800653e:	bf38      	it	cc
 8006540:	2200      	movcc	r2, #0
 8006542:	4413      	add	r3, r2
 8006544:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006548:	b17a      	cbz	r2, 800656a <__mdiff+0x106>
 800654a:	6107      	str	r7, [r0, #16]
 800654c:	e7a4      	b.n	8006498 <__mdiff+0x34>
 800654e:	f856 8b04 	ldr.w	r8, [r6], #4
 8006552:	fa11 f288 	uxtah	r2, r1, r8
 8006556:	1414      	asrs	r4, r2, #16
 8006558:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800655c:	b292      	uxth	r2, r2
 800655e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006562:	f84e 2b04 	str.w	r2, [lr], #4
 8006566:	1421      	asrs	r1, r4, #16
 8006568:	e7e0      	b.n	800652c <__mdiff+0xc8>
 800656a:	3f01      	subs	r7, #1
 800656c:	e7ea      	b.n	8006544 <__mdiff+0xe0>
 800656e:	bf00      	nop
 8006570:	08006ed0 	.word	0x08006ed0
 8006574:	08006ee1 	.word	0x08006ee1

08006578 <__d2b>:
 8006578:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800657c:	460f      	mov	r7, r1
 800657e:	2101      	movs	r1, #1
 8006580:	ec59 8b10 	vmov	r8, r9, d0
 8006584:	4616      	mov	r6, r2
 8006586:	f7ff fcd5 	bl	8005f34 <_Balloc>
 800658a:	4604      	mov	r4, r0
 800658c:	b930      	cbnz	r0, 800659c <__d2b+0x24>
 800658e:	4602      	mov	r2, r0
 8006590:	4b24      	ldr	r3, [pc, #144]	; (8006624 <__d2b+0xac>)
 8006592:	4825      	ldr	r0, [pc, #148]	; (8006628 <__d2b+0xb0>)
 8006594:	f240 310f 	movw	r1, #783	; 0x30f
 8006598:	f000 f906 	bl	80067a8 <__assert_func>
 800659c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80065a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80065a4:	bb2d      	cbnz	r5, 80065f2 <__d2b+0x7a>
 80065a6:	9301      	str	r3, [sp, #4]
 80065a8:	f1b8 0300 	subs.w	r3, r8, #0
 80065ac:	d026      	beq.n	80065fc <__d2b+0x84>
 80065ae:	4668      	mov	r0, sp
 80065b0:	9300      	str	r3, [sp, #0]
 80065b2:	f7ff fd87 	bl	80060c4 <__lo0bits>
 80065b6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80065ba:	b1e8      	cbz	r0, 80065f8 <__d2b+0x80>
 80065bc:	f1c0 0320 	rsb	r3, r0, #32
 80065c0:	fa02 f303 	lsl.w	r3, r2, r3
 80065c4:	430b      	orrs	r3, r1
 80065c6:	40c2      	lsrs	r2, r0
 80065c8:	6163      	str	r3, [r4, #20]
 80065ca:	9201      	str	r2, [sp, #4]
 80065cc:	9b01      	ldr	r3, [sp, #4]
 80065ce:	61a3      	str	r3, [r4, #24]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	bf14      	ite	ne
 80065d4:	2202      	movne	r2, #2
 80065d6:	2201      	moveq	r2, #1
 80065d8:	6122      	str	r2, [r4, #16]
 80065da:	b1bd      	cbz	r5, 800660c <__d2b+0x94>
 80065dc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80065e0:	4405      	add	r5, r0
 80065e2:	603d      	str	r5, [r7, #0]
 80065e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80065e8:	6030      	str	r0, [r6, #0]
 80065ea:	4620      	mov	r0, r4
 80065ec:	b003      	add	sp, #12
 80065ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80065f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065f6:	e7d6      	b.n	80065a6 <__d2b+0x2e>
 80065f8:	6161      	str	r1, [r4, #20]
 80065fa:	e7e7      	b.n	80065cc <__d2b+0x54>
 80065fc:	a801      	add	r0, sp, #4
 80065fe:	f7ff fd61 	bl	80060c4 <__lo0bits>
 8006602:	9b01      	ldr	r3, [sp, #4]
 8006604:	6163      	str	r3, [r4, #20]
 8006606:	3020      	adds	r0, #32
 8006608:	2201      	movs	r2, #1
 800660a:	e7e5      	b.n	80065d8 <__d2b+0x60>
 800660c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006610:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006614:	6038      	str	r0, [r7, #0]
 8006616:	6918      	ldr	r0, [r3, #16]
 8006618:	f7ff fd34 	bl	8006084 <__hi0bits>
 800661c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006620:	e7e2      	b.n	80065e8 <__d2b+0x70>
 8006622:	bf00      	nop
 8006624:	08006ed0 	.word	0x08006ed0
 8006628:	08006ee1 	.word	0x08006ee1

0800662c <__sflush_r>:
 800662c:	898a      	ldrh	r2, [r1, #12]
 800662e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006632:	4605      	mov	r5, r0
 8006634:	0710      	lsls	r0, r2, #28
 8006636:	460c      	mov	r4, r1
 8006638:	d458      	bmi.n	80066ec <__sflush_r+0xc0>
 800663a:	684b      	ldr	r3, [r1, #4]
 800663c:	2b00      	cmp	r3, #0
 800663e:	dc05      	bgt.n	800664c <__sflush_r+0x20>
 8006640:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006642:	2b00      	cmp	r3, #0
 8006644:	dc02      	bgt.n	800664c <__sflush_r+0x20>
 8006646:	2000      	movs	r0, #0
 8006648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800664c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800664e:	2e00      	cmp	r6, #0
 8006650:	d0f9      	beq.n	8006646 <__sflush_r+0x1a>
 8006652:	2300      	movs	r3, #0
 8006654:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006658:	682f      	ldr	r7, [r5, #0]
 800665a:	6a21      	ldr	r1, [r4, #32]
 800665c:	602b      	str	r3, [r5, #0]
 800665e:	d032      	beq.n	80066c6 <__sflush_r+0x9a>
 8006660:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006662:	89a3      	ldrh	r3, [r4, #12]
 8006664:	075a      	lsls	r2, r3, #29
 8006666:	d505      	bpl.n	8006674 <__sflush_r+0x48>
 8006668:	6863      	ldr	r3, [r4, #4]
 800666a:	1ac0      	subs	r0, r0, r3
 800666c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800666e:	b10b      	cbz	r3, 8006674 <__sflush_r+0x48>
 8006670:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006672:	1ac0      	subs	r0, r0, r3
 8006674:	2300      	movs	r3, #0
 8006676:	4602      	mov	r2, r0
 8006678:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800667a:	6a21      	ldr	r1, [r4, #32]
 800667c:	4628      	mov	r0, r5
 800667e:	47b0      	blx	r6
 8006680:	1c43      	adds	r3, r0, #1
 8006682:	89a3      	ldrh	r3, [r4, #12]
 8006684:	d106      	bne.n	8006694 <__sflush_r+0x68>
 8006686:	6829      	ldr	r1, [r5, #0]
 8006688:	291d      	cmp	r1, #29
 800668a:	d82b      	bhi.n	80066e4 <__sflush_r+0xb8>
 800668c:	4a29      	ldr	r2, [pc, #164]	; (8006734 <__sflush_r+0x108>)
 800668e:	410a      	asrs	r2, r1
 8006690:	07d6      	lsls	r6, r2, #31
 8006692:	d427      	bmi.n	80066e4 <__sflush_r+0xb8>
 8006694:	2200      	movs	r2, #0
 8006696:	6062      	str	r2, [r4, #4]
 8006698:	04d9      	lsls	r1, r3, #19
 800669a:	6922      	ldr	r2, [r4, #16]
 800669c:	6022      	str	r2, [r4, #0]
 800669e:	d504      	bpl.n	80066aa <__sflush_r+0x7e>
 80066a0:	1c42      	adds	r2, r0, #1
 80066a2:	d101      	bne.n	80066a8 <__sflush_r+0x7c>
 80066a4:	682b      	ldr	r3, [r5, #0]
 80066a6:	b903      	cbnz	r3, 80066aa <__sflush_r+0x7e>
 80066a8:	6560      	str	r0, [r4, #84]	; 0x54
 80066aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80066ac:	602f      	str	r7, [r5, #0]
 80066ae:	2900      	cmp	r1, #0
 80066b0:	d0c9      	beq.n	8006646 <__sflush_r+0x1a>
 80066b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80066b6:	4299      	cmp	r1, r3
 80066b8:	d002      	beq.n	80066c0 <__sflush_r+0x94>
 80066ba:	4628      	mov	r0, r5
 80066bc:	f7ff fb3a 	bl	8005d34 <_free_r>
 80066c0:	2000      	movs	r0, #0
 80066c2:	6360      	str	r0, [r4, #52]	; 0x34
 80066c4:	e7c0      	b.n	8006648 <__sflush_r+0x1c>
 80066c6:	2301      	movs	r3, #1
 80066c8:	4628      	mov	r0, r5
 80066ca:	47b0      	blx	r6
 80066cc:	1c41      	adds	r1, r0, #1
 80066ce:	d1c8      	bne.n	8006662 <__sflush_r+0x36>
 80066d0:	682b      	ldr	r3, [r5, #0]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d0c5      	beq.n	8006662 <__sflush_r+0x36>
 80066d6:	2b1d      	cmp	r3, #29
 80066d8:	d001      	beq.n	80066de <__sflush_r+0xb2>
 80066da:	2b16      	cmp	r3, #22
 80066dc:	d101      	bne.n	80066e2 <__sflush_r+0xb6>
 80066de:	602f      	str	r7, [r5, #0]
 80066e0:	e7b1      	b.n	8006646 <__sflush_r+0x1a>
 80066e2:	89a3      	ldrh	r3, [r4, #12]
 80066e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066e8:	81a3      	strh	r3, [r4, #12]
 80066ea:	e7ad      	b.n	8006648 <__sflush_r+0x1c>
 80066ec:	690f      	ldr	r7, [r1, #16]
 80066ee:	2f00      	cmp	r7, #0
 80066f0:	d0a9      	beq.n	8006646 <__sflush_r+0x1a>
 80066f2:	0793      	lsls	r3, r2, #30
 80066f4:	680e      	ldr	r6, [r1, #0]
 80066f6:	bf08      	it	eq
 80066f8:	694b      	ldreq	r3, [r1, #20]
 80066fa:	600f      	str	r7, [r1, #0]
 80066fc:	bf18      	it	ne
 80066fe:	2300      	movne	r3, #0
 8006700:	eba6 0807 	sub.w	r8, r6, r7
 8006704:	608b      	str	r3, [r1, #8]
 8006706:	f1b8 0f00 	cmp.w	r8, #0
 800670a:	dd9c      	ble.n	8006646 <__sflush_r+0x1a>
 800670c:	6a21      	ldr	r1, [r4, #32]
 800670e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006710:	4643      	mov	r3, r8
 8006712:	463a      	mov	r2, r7
 8006714:	4628      	mov	r0, r5
 8006716:	47b0      	blx	r6
 8006718:	2800      	cmp	r0, #0
 800671a:	dc06      	bgt.n	800672a <__sflush_r+0xfe>
 800671c:	89a3      	ldrh	r3, [r4, #12]
 800671e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006722:	81a3      	strh	r3, [r4, #12]
 8006724:	f04f 30ff 	mov.w	r0, #4294967295
 8006728:	e78e      	b.n	8006648 <__sflush_r+0x1c>
 800672a:	4407      	add	r7, r0
 800672c:	eba8 0800 	sub.w	r8, r8, r0
 8006730:	e7e9      	b.n	8006706 <__sflush_r+0xda>
 8006732:	bf00      	nop
 8006734:	dfbffffe 	.word	0xdfbffffe

08006738 <_fflush_r>:
 8006738:	b538      	push	{r3, r4, r5, lr}
 800673a:	690b      	ldr	r3, [r1, #16]
 800673c:	4605      	mov	r5, r0
 800673e:	460c      	mov	r4, r1
 8006740:	b913      	cbnz	r3, 8006748 <_fflush_r+0x10>
 8006742:	2500      	movs	r5, #0
 8006744:	4628      	mov	r0, r5
 8006746:	bd38      	pop	{r3, r4, r5, pc}
 8006748:	b118      	cbz	r0, 8006752 <_fflush_r+0x1a>
 800674a:	6a03      	ldr	r3, [r0, #32]
 800674c:	b90b      	cbnz	r3, 8006752 <_fflush_r+0x1a>
 800674e:	f7fe fb71 	bl	8004e34 <__sinit>
 8006752:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d0f3      	beq.n	8006742 <_fflush_r+0xa>
 800675a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800675c:	07d0      	lsls	r0, r2, #31
 800675e:	d404      	bmi.n	800676a <_fflush_r+0x32>
 8006760:	0599      	lsls	r1, r3, #22
 8006762:	d402      	bmi.n	800676a <_fflush_r+0x32>
 8006764:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006766:	f7fe fc5b 	bl	8005020 <__retarget_lock_acquire_recursive>
 800676a:	4628      	mov	r0, r5
 800676c:	4621      	mov	r1, r4
 800676e:	f7ff ff5d 	bl	800662c <__sflush_r>
 8006772:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006774:	07da      	lsls	r2, r3, #31
 8006776:	4605      	mov	r5, r0
 8006778:	d4e4      	bmi.n	8006744 <_fflush_r+0xc>
 800677a:	89a3      	ldrh	r3, [r4, #12]
 800677c:	059b      	lsls	r3, r3, #22
 800677e:	d4e1      	bmi.n	8006744 <_fflush_r+0xc>
 8006780:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006782:	f7fe fc4e 	bl	8005022 <__retarget_lock_release_recursive>
 8006786:	e7dd      	b.n	8006744 <_fflush_r+0xc>

08006788 <_sbrk_r>:
 8006788:	b538      	push	{r3, r4, r5, lr}
 800678a:	4d06      	ldr	r5, [pc, #24]	; (80067a4 <_sbrk_r+0x1c>)
 800678c:	2300      	movs	r3, #0
 800678e:	4604      	mov	r4, r0
 8006790:	4608      	mov	r0, r1
 8006792:	602b      	str	r3, [r5, #0]
 8006794:	f7fa fd68 	bl	8001268 <_sbrk>
 8006798:	1c43      	adds	r3, r0, #1
 800679a:	d102      	bne.n	80067a2 <_sbrk_r+0x1a>
 800679c:	682b      	ldr	r3, [r5, #0]
 800679e:	b103      	cbz	r3, 80067a2 <_sbrk_r+0x1a>
 80067a0:	6023      	str	r3, [r4, #0]
 80067a2:	bd38      	pop	{r3, r4, r5, pc}
 80067a4:	200040e0 	.word	0x200040e0

080067a8 <__assert_func>:
 80067a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80067aa:	4614      	mov	r4, r2
 80067ac:	461a      	mov	r2, r3
 80067ae:	4b09      	ldr	r3, [pc, #36]	; (80067d4 <__assert_func+0x2c>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4605      	mov	r5, r0
 80067b4:	68d8      	ldr	r0, [r3, #12]
 80067b6:	b14c      	cbz	r4, 80067cc <__assert_func+0x24>
 80067b8:	4b07      	ldr	r3, [pc, #28]	; (80067d8 <__assert_func+0x30>)
 80067ba:	9100      	str	r1, [sp, #0]
 80067bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80067c0:	4906      	ldr	r1, [pc, #24]	; (80067dc <__assert_func+0x34>)
 80067c2:	462b      	mov	r3, r5
 80067c4:	f000 f844 	bl	8006850 <fiprintf>
 80067c8:	f000 f854 	bl	8006874 <abort>
 80067cc:	4b04      	ldr	r3, [pc, #16]	; (80067e0 <__assert_func+0x38>)
 80067ce:	461c      	mov	r4, r3
 80067d0:	e7f3      	b.n	80067ba <__assert_func+0x12>
 80067d2:	bf00      	nop
 80067d4:	2000006c 	.word	0x2000006c
 80067d8:	08007046 	.word	0x08007046
 80067dc:	08007053 	.word	0x08007053
 80067e0:	08007081 	.word	0x08007081

080067e4 <_calloc_r>:
 80067e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80067e6:	fba1 2402 	umull	r2, r4, r1, r2
 80067ea:	b94c      	cbnz	r4, 8006800 <_calloc_r+0x1c>
 80067ec:	4611      	mov	r1, r2
 80067ee:	9201      	str	r2, [sp, #4]
 80067f0:	f7ff fb14 	bl	8005e1c <_malloc_r>
 80067f4:	9a01      	ldr	r2, [sp, #4]
 80067f6:	4605      	mov	r5, r0
 80067f8:	b930      	cbnz	r0, 8006808 <_calloc_r+0x24>
 80067fa:	4628      	mov	r0, r5
 80067fc:	b003      	add	sp, #12
 80067fe:	bd30      	pop	{r4, r5, pc}
 8006800:	220c      	movs	r2, #12
 8006802:	6002      	str	r2, [r0, #0]
 8006804:	2500      	movs	r5, #0
 8006806:	e7f8      	b.n	80067fa <_calloc_r+0x16>
 8006808:	4621      	mov	r1, r4
 800680a:	f7fe fb8c 	bl	8004f26 <memset>
 800680e:	e7f4      	b.n	80067fa <_calloc_r+0x16>

08006810 <__ascii_mbtowc>:
 8006810:	b082      	sub	sp, #8
 8006812:	b901      	cbnz	r1, 8006816 <__ascii_mbtowc+0x6>
 8006814:	a901      	add	r1, sp, #4
 8006816:	b142      	cbz	r2, 800682a <__ascii_mbtowc+0x1a>
 8006818:	b14b      	cbz	r3, 800682e <__ascii_mbtowc+0x1e>
 800681a:	7813      	ldrb	r3, [r2, #0]
 800681c:	600b      	str	r3, [r1, #0]
 800681e:	7812      	ldrb	r2, [r2, #0]
 8006820:	1e10      	subs	r0, r2, #0
 8006822:	bf18      	it	ne
 8006824:	2001      	movne	r0, #1
 8006826:	b002      	add	sp, #8
 8006828:	4770      	bx	lr
 800682a:	4610      	mov	r0, r2
 800682c:	e7fb      	b.n	8006826 <__ascii_mbtowc+0x16>
 800682e:	f06f 0001 	mvn.w	r0, #1
 8006832:	e7f8      	b.n	8006826 <__ascii_mbtowc+0x16>

08006834 <__ascii_wctomb>:
 8006834:	b149      	cbz	r1, 800684a <__ascii_wctomb+0x16>
 8006836:	2aff      	cmp	r2, #255	; 0xff
 8006838:	bf85      	ittet	hi
 800683a:	238a      	movhi	r3, #138	; 0x8a
 800683c:	6003      	strhi	r3, [r0, #0]
 800683e:	700a      	strbls	r2, [r1, #0]
 8006840:	f04f 30ff 	movhi.w	r0, #4294967295
 8006844:	bf98      	it	ls
 8006846:	2001      	movls	r0, #1
 8006848:	4770      	bx	lr
 800684a:	4608      	mov	r0, r1
 800684c:	4770      	bx	lr
	...

08006850 <fiprintf>:
 8006850:	b40e      	push	{r1, r2, r3}
 8006852:	b503      	push	{r0, r1, lr}
 8006854:	4601      	mov	r1, r0
 8006856:	ab03      	add	r3, sp, #12
 8006858:	4805      	ldr	r0, [pc, #20]	; (8006870 <fiprintf+0x20>)
 800685a:	f853 2b04 	ldr.w	r2, [r3], #4
 800685e:	6800      	ldr	r0, [r0, #0]
 8006860:	9301      	str	r3, [sp, #4]
 8006862:	f000 f837 	bl	80068d4 <_vfiprintf_r>
 8006866:	b002      	add	sp, #8
 8006868:	f85d eb04 	ldr.w	lr, [sp], #4
 800686c:	b003      	add	sp, #12
 800686e:	4770      	bx	lr
 8006870:	2000006c 	.word	0x2000006c

08006874 <abort>:
 8006874:	b508      	push	{r3, lr}
 8006876:	2006      	movs	r0, #6
 8006878:	f000 fa04 	bl	8006c84 <raise>
 800687c:	2001      	movs	r0, #1
 800687e:	f7fa fc7b 	bl	8001178 <_exit>

08006882 <__sfputc_r>:
 8006882:	6893      	ldr	r3, [r2, #8]
 8006884:	3b01      	subs	r3, #1
 8006886:	2b00      	cmp	r3, #0
 8006888:	b410      	push	{r4}
 800688a:	6093      	str	r3, [r2, #8]
 800688c:	da08      	bge.n	80068a0 <__sfputc_r+0x1e>
 800688e:	6994      	ldr	r4, [r2, #24]
 8006890:	42a3      	cmp	r3, r4
 8006892:	db01      	blt.n	8006898 <__sfputc_r+0x16>
 8006894:	290a      	cmp	r1, #10
 8006896:	d103      	bne.n	80068a0 <__sfputc_r+0x1e>
 8006898:	f85d 4b04 	ldr.w	r4, [sp], #4
 800689c:	f000 b934 	b.w	8006b08 <__swbuf_r>
 80068a0:	6813      	ldr	r3, [r2, #0]
 80068a2:	1c58      	adds	r0, r3, #1
 80068a4:	6010      	str	r0, [r2, #0]
 80068a6:	7019      	strb	r1, [r3, #0]
 80068a8:	4608      	mov	r0, r1
 80068aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80068ae:	4770      	bx	lr

080068b0 <__sfputs_r>:
 80068b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068b2:	4606      	mov	r6, r0
 80068b4:	460f      	mov	r7, r1
 80068b6:	4614      	mov	r4, r2
 80068b8:	18d5      	adds	r5, r2, r3
 80068ba:	42ac      	cmp	r4, r5
 80068bc:	d101      	bne.n	80068c2 <__sfputs_r+0x12>
 80068be:	2000      	movs	r0, #0
 80068c0:	e007      	b.n	80068d2 <__sfputs_r+0x22>
 80068c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068c6:	463a      	mov	r2, r7
 80068c8:	4630      	mov	r0, r6
 80068ca:	f7ff ffda 	bl	8006882 <__sfputc_r>
 80068ce:	1c43      	adds	r3, r0, #1
 80068d0:	d1f3      	bne.n	80068ba <__sfputs_r+0xa>
 80068d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080068d4 <_vfiprintf_r>:
 80068d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068d8:	460d      	mov	r5, r1
 80068da:	b09d      	sub	sp, #116	; 0x74
 80068dc:	4614      	mov	r4, r2
 80068de:	4698      	mov	r8, r3
 80068e0:	4606      	mov	r6, r0
 80068e2:	b118      	cbz	r0, 80068ec <_vfiprintf_r+0x18>
 80068e4:	6a03      	ldr	r3, [r0, #32]
 80068e6:	b90b      	cbnz	r3, 80068ec <_vfiprintf_r+0x18>
 80068e8:	f7fe faa4 	bl	8004e34 <__sinit>
 80068ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80068ee:	07d9      	lsls	r1, r3, #31
 80068f0:	d405      	bmi.n	80068fe <_vfiprintf_r+0x2a>
 80068f2:	89ab      	ldrh	r3, [r5, #12]
 80068f4:	059a      	lsls	r2, r3, #22
 80068f6:	d402      	bmi.n	80068fe <_vfiprintf_r+0x2a>
 80068f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80068fa:	f7fe fb91 	bl	8005020 <__retarget_lock_acquire_recursive>
 80068fe:	89ab      	ldrh	r3, [r5, #12]
 8006900:	071b      	lsls	r3, r3, #28
 8006902:	d501      	bpl.n	8006908 <_vfiprintf_r+0x34>
 8006904:	692b      	ldr	r3, [r5, #16]
 8006906:	b99b      	cbnz	r3, 8006930 <_vfiprintf_r+0x5c>
 8006908:	4629      	mov	r1, r5
 800690a:	4630      	mov	r0, r6
 800690c:	f000 f93a 	bl	8006b84 <__swsetup_r>
 8006910:	b170      	cbz	r0, 8006930 <_vfiprintf_r+0x5c>
 8006912:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006914:	07dc      	lsls	r4, r3, #31
 8006916:	d504      	bpl.n	8006922 <_vfiprintf_r+0x4e>
 8006918:	f04f 30ff 	mov.w	r0, #4294967295
 800691c:	b01d      	add	sp, #116	; 0x74
 800691e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006922:	89ab      	ldrh	r3, [r5, #12]
 8006924:	0598      	lsls	r0, r3, #22
 8006926:	d4f7      	bmi.n	8006918 <_vfiprintf_r+0x44>
 8006928:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800692a:	f7fe fb7a 	bl	8005022 <__retarget_lock_release_recursive>
 800692e:	e7f3      	b.n	8006918 <_vfiprintf_r+0x44>
 8006930:	2300      	movs	r3, #0
 8006932:	9309      	str	r3, [sp, #36]	; 0x24
 8006934:	2320      	movs	r3, #32
 8006936:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800693a:	f8cd 800c 	str.w	r8, [sp, #12]
 800693e:	2330      	movs	r3, #48	; 0x30
 8006940:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006af4 <_vfiprintf_r+0x220>
 8006944:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006948:	f04f 0901 	mov.w	r9, #1
 800694c:	4623      	mov	r3, r4
 800694e:	469a      	mov	sl, r3
 8006950:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006954:	b10a      	cbz	r2, 800695a <_vfiprintf_r+0x86>
 8006956:	2a25      	cmp	r2, #37	; 0x25
 8006958:	d1f9      	bne.n	800694e <_vfiprintf_r+0x7a>
 800695a:	ebba 0b04 	subs.w	fp, sl, r4
 800695e:	d00b      	beq.n	8006978 <_vfiprintf_r+0xa4>
 8006960:	465b      	mov	r3, fp
 8006962:	4622      	mov	r2, r4
 8006964:	4629      	mov	r1, r5
 8006966:	4630      	mov	r0, r6
 8006968:	f7ff ffa2 	bl	80068b0 <__sfputs_r>
 800696c:	3001      	adds	r0, #1
 800696e:	f000 80a9 	beq.w	8006ac4 <_vfiprintf_r+0x1f0>
 8006972:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006974:	445a      	add	r2, fp
 8006976:	9209      	str	r2, [sp, #36]	; 0x24
 8006978:	f89a 3000 	ldrb.w	r3, [sl]
 800697c:	2b00      	cmp	r3, #0
 800697e:	f000 80a1 	beq.w	8006ac4 <_vfiprintf_r+0x1f0>
 8006982:	2300      	movs	r3, #0
 8006984:	f04f 32ff 	mov.w	r2, #4294967295
 8006988:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800698c:	f10a 0a01 	add.w	sl, sl, #1
 8006990:	9304      	str	r3, [sp, #16]
 8006992:	9307      	str	r3, [sp, #28]
 8006994:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006998:	931a      	str	r3, [sp, #104]	; 0x68
 800699a:	4654      	mov	r4, sl
 800699c:	2205      	movs	r2, #5
 800699e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069a2:	4854      	ldr	r0, [pc, #336]	; (8006af4 <_vfiprintf_r+0x220>)
 80069a4:	f7f9 fc1c 	bl	80001e0 <memchr>
 80069a8:	9a04      	ldr	r2, [sp, #16]
 80069aa:	b9d8      	cbnz	r0, 80069e4 <_vfiprintf_r+0x110>
 80069ac:	06d1      	lsls	r1, r2, #27
 80069ae:	bf44      	itt	mi
 80069b0:	2320      	movmi	r3, #32
 80069b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069b6:	0713      	lsls	r3, r2, #28
 80069b8:	bf44      	itt	mi
 80069ba:	232b      	movmi	r3, #43	; 0x2b
 80069bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069c0:	f89a 3000 	ldrb.w	r3, [sl]
 80069c4:	2b2a      	cmp	r3, #42	; 0x2a
 80069c6:	d015      	beq.n	80069f4 <_vfiprintf_r+0x120>
 80069c8:	9a07      	ldr	r2, [sp, #28]
 80069ca:	4654      	mov	r4, sl
 80069cc:	2000      	movs	r0, #0
 80069ce:	f04f 0c0a 	mov.w	ip, #10
 80069d2:	4621      	mov	r1, r4
 80069d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80069d8:	3b30      	subs	r3, #48	; 0x30
 80069da:	2b09      	cmp	r3, #9
 80069dc:	d94d      	bls.n	8006a7a <_vfiprintf_r+0x1a6>
 80069de:	b1b0      	cbz	r0, 8006a0e <_vfiprintf_r+0x13a>
 80069e0:	9207      	str	r2, [sp, #28]
 80069e2:	e014      	b.n	8006a0e <_vfiprintf_r+0x13a>
 80069e4:	eba0 0308 	sub.w	r3, r0, r8
 80069e8:	fa09 f303 	lsl.w	r3, r9, r3
 80069ec:	4313      	orrs	r3, r2
 80069ee:	9304      	str	r3, [sp, #16]
 80069f0:	46a2      	mov	sl, r4
 80069f2:	e7d2      	b.n	800699a <_vfiprintf_r+0xc6>
 80069f4:	9b03      	ldr	r3, [sp, #12]
 80069f6:	1d19      	adds	r1, r3, #4
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	9103      	str	r1, [sp, #12]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	bfbb      	ittet	lt
 8006a00:	425b      	neglt	r3, r3
 8006a02:	f042 0202 	orrlt.w	r2, r2, #2
 8006a06:	9307      	strge	r3, [sp, #28]
 8006a08:	9307      	strlt	r3, [sp, #28]
 8006a0a:	bfb8      	it	lt
 8006a0c:	9204      	strlt	r2, [sp, #16]
 8006a0e:	7823      	ldrb	r3, [r4, #0]
 8006a10:	2b2e      	cmp	r3, #46	; 0x2e
 8006a12:	d10c      	bne.n	8006a2e <_vfiprintf_r+0x15a>
 8006a14:	7863      	ldrb	r3, [r4, #1]
 8006a16:	2b2a      	cmp	r3, #42	; 0x2a
 8006a18:	d134      	bne.n	8006a84 <_vfiprintf_r+0x1b0>
 8006a1a:	9b03      	ldr	r3, [sp, #12]
 8006a1c:	1d1a      	adds	r2, r3, #4
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	9203      	str	r2, [sp, #12]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	bfb8      	it	lt
 8006a26:	f04f 33ff 	movlt.w	r3, #4294967295
 8006a2a:	3402      	adds	r4, #2
 8006a2c:	9305      	str	r3, [sp, #20]
 8006a2e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006b04 <_vfiprintf_r+0x230>
 8006a32:	7821      	ldrb	r1, [r4, #0]
 8006a34:	2203      	movs	r2, #3
 8006a36:	4650      	mov	r0, sl
 8006a38:	f7f9 fbd2 	bl	80001e0 <memchr>
 8006a3c:	b138      	cbz	r0, 8006a4e <_vfiprintf_r+0x17a>
 8006a3e:	9b04      	ldr	r3, [sp, #16]
 8006a40:	eba0 000a 	sub.w	r0, r0, sl
 8006a44:	2240      	movs	r2, #64	; 0x40
 8006a46:	4082      	lsls	r2, r0
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	3401      	adds	r4, #1
 8006a4c:	9304      	str	r3, [sp, #16]
 8006a4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a52:	4829      	ldr	r0, [pc, #164]	; (8006af8 <_vfiprintf_r+0x224>)
 8006a54:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006a58:	2206      	movs	r2, #6
 8006a5a:	f7f9 fbc1 	bl	80001e0 <memchr>
 8006a5e:	2800      	cmp	r0, #0
 8006a60:	d03f      	beq.n	8006ae2 <_vfiprintf_r+0x20e>
 8006a62:	4b26      	ldr	r3, [pc, #152]	; (8006afc <_vfiprintf_r+0x228>)
 8006a64:	bb1b      	cbnz	r3, 8006aae <_vfiprintf_r+0x1da>
 8006a66:	9b03      	ldr	r3, [sp, #12]
 8006a68:	3307      	adds	r3, #7
 8006a6a:	f023 0307 	bic.w	r3, r3, #7
 8006a6e:	3308      	adds	r3, #8
 8006a70:	9303      	str	r3, [sp, #12]
 8006a72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a74:	443b      	add	r3, r7
 8006a76:	9309      	str	r3, [sp, #36]	; 0x24
 8006a78:	e768      	b.n	800694c <_vfiprintf_r+0x78>
 8006a7a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a7e:	460c      	mov	r4, r1
 8006a80:	2001      	movs	r0, #1
 8006a82:	e7a6      	b.n	80069d2 <_vfiprintf_r+0xfe>
 8006a84:	2300      	movs	r3, #0
 8006a86:	3401      	adds	r4, #1
 8006a88:	9305      	str	r3, [sp, #20]
 8006a8a:	4619      	mov	r1, r3
 8006a8c:	f04f 0c0a 	mov.w	ip, #10
 8006a90:	4620      	mov	r0, r4
 8006a92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a96:	3a30      	subs	r2, #48	; 0x30
 8006a98:	2a09      	cmp	r2, #9
 8006a9a:	d903      	bls.n	8006aa4 <_vfiprintf_r+0x1d0>
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d0c6      	beq.n	8006a2e <_vfiprintf_r+0x15a>
 8006aa0:	9105      	str	r1, [sp, #20]
 8006aa2:	e7c4      	b.n	8006a2e <_vfiprintf_r+0x15a>
 8006aa4:	fb0c 2101 	mla	r1, ip, r1, r2
 8006aa8:	4604      	mov	r4, r0
 8006aaa:	2301      	movs	r3, #1
 8006aac:	e7f0      	b.n	8006a90 <_vfiprintf_r+0x1bc>
 8006aae:	ab03      	add	r3, sp, #12
 8006ab0:	9300      	str	r3, [sp, #0]
 8006ab2:	462a      	mov	r2, r5
 8006ab4:	4b12      	ldr	r3, [pc, #72]	; (8006b00 <_vfiprintf_r+0x22c>)
 8006ab6:	a904      	add	r1, sp, #16
 8006ab8:	4630      	mov	r0, r6
 8006aba:	f7fd fd7b 	bl	80045b4 <_printf_float>
 8006abe:	4607      	mov	r7, r0
 8006ac0:	1c78      	adds	r0, r7, #1
 8006ac2:	d1d6      	bne.n	8006a72 <_vfiprintf_r+0x19e>
 8006ac4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ac6:	07d9      	lsls	r1, r3, #31
 8006ac8:	d405      	bmi.n	8006ad6 <_vfiprintf_r+0x202>
 8006aca:	89ab      	ldrh	r3, [r5, #12]
 8006acc:	059a      	lsls	r2, r3, #22
 8006ace:	d402      	bmi.n	8006ad6 <_vfiprintf_r+0x202>
 8006ad0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ad2:	f7fe faa6 	bl	8005022 <__retarget_lock_release_recursive>
 8006ad6:	89ab      	ldrh	r3, [r5, #12]
 8006ad8:	065b      	lsls	r3, r3, #25
 8006ada:	f53f af1d 	bmi.w	8006918 <_vfiprintf_r+0x44>
 8006ade:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ae0:	e71c      	b.n	800691c <_vfiprintf_r+0x48>
 8006ae2:	ab03      	add	r3, sp, #12
 8006ae4:	9300      	str	r3, [sp, #0]
 8006ae6:	462a      	mov	r2, r5
 8006ae8:	4b05      	ldr	r3, [pc, #20]	; (8006b00 <_vfiprintf_r+0x22c>)
 8006aea:	a904      	add	r1, sp, #16
 8006aec:	4630      	mov	r0, r6
 8006aee:	f7fe f805 	bl	8004afc <_printf_i>
 8006af2:	e7e4      	b.n	8006abe <_vfiprintf_r+0x1ea>
 8006af4:	08007183 	.word	0x08007183
 8006af8:	0800718d 	.word	0x0800718d
 8006afc:	080045b5 	.word	0x080045b5
 8006b00:	080068b1 	.word	0x080068b1
 8006b04:	08007189 	.word	0x08007189

08006b08 <__swbuf_r>:
 8006b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b0a:	460e      	mov	r6, r1
 8006b0c:	4614      	mov	r4, r2
 8006b0e:	4605      	mov	r5, r0
 8006b10:	b118      	cbz	r0, 8006b1a <__swbuf_r+0x12>
 8006b12:	6a03      	ldr	r3, [r0, #32]
 8006b14:	b90b      	cbnz	r3, 8006b1a <__swbuf_r+0x12>
 8006b16:	f7fe f98d 	bl	8004e34 <__sinit>
 8006b1a:	69a3      	ldr	r3, [r4, #24]
 8006b1c:	60a3      	str	r3, [r4, #8]
 8006b1e:	89a3      	ldrh	r3, [r4, #12]
 8006b20:	071a      	lsls	r2, r3, #28
 8006b22:	d525      	bpl.n	8006b70 <__swbuf_r+0x68>
 8006b24:	6923      	ldr	r3, [r4, #16]
 8006b26:	b31b      	cbz	r3, 8006b70 <__swbuf_r+0x68>
 8006b28:	6823      	ldr	r3, [r4, #0]
 8006b2a:	6922      	ldr	r2, [r4, #16]
 8006b2c:	1a98      	subs	r0, r3, r2
 8006b2e:	6963      	ldr	r3, [r4, #20]
 8006b30:	b2f6      	uxtb	r6, r6
 8006b32:	4283      	cmp	r3, r0
 8006b34:	4637      	mov	r7, r6
 8006b36:	dc04      	bgt.n	8006b42 <__swbuf_r+0x3a>
 8006b38:	4621      	mov	r1, r4
 8006b3a:	4628      	mov	r0, r5
 8006b3c:	f7ff fdfc 	bl	8006738 <_fflush_r>
 8006b40:	b9e0      	cbnz	r0, 8006b7c <__swbuf_r+0x74>
 8006b42:	68a3      	ldr	r3, [r4, #8]
 8006b44:	3b01      	subs	r3, #1
 8006b46:	60a3      	str	r3, [r4, #8]
 8006b48:	6823      	ldr	r3, [r4, #0]
 8006b4a:	1c5a      	adds	r2, r3, #1
 8006b4c:	6022      	str	r2, [r4, #0]
 8006b4e:	701e      	strb	r6, [r3, #0]
 8006b50:	6962      	ldr	r2, [r4, #20]
 8006b52:	1c43      	adds	r3, r0, #1
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d004      	beq.n	8006b62 <__swbuf_r+0x5a>
 8006b58:	89a3      	ldrh	r3, [r4, #12]
 8006b5a:	07db      	lsls	r3, r3, #31
 8006b5c:	d506      	bpl.n	8006b6c <__swbuf_r+0x64>
 8006b5e:	2e0a      	cmp	r6, #10
 8006b60:	d104      	bne.n	8006b6c <__swbuf_r+0x64>
 8006b62:	4621      	mov	r1, r4
 8006b64:	4628      	mov	r0, r5
 8006b66:	f7ff fde7 	bl	8006738 <_fflush_r>
 8006b6a:	b938      	cbnz	r0, 8006b7c <__swbuf_r+0x74>
 8006b6c:	4638      	mov	r0, r7
 8006b6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b70:	4621      	mov	r1, r4
 8006b72:	4628      	mov	r0, r5
 8006b74:	f000 f806 	bl	8006b84 <__swsetup_r>
 8006b78:	2800      	cmp	r0, #0
 8006b7a:	d0d5      	beq.n	8006b28 <__swbuf_r+0x20>
 8006b7c:	f04f 37ff 	mov.w	r7, #4294967295
 8006b80:	e7f4      	b.n	8006b6c <__swbuf_r+0x64>
	...

08006b84 <__swsetup_r>:
 8006b84:	b538      	push	{r3, r4, r5, lr}
 8006b86:	4b2a      	ldr	r3, [pc, #168]	; (8006c30 <__swsetup_r+0xac>)
 8006b88:	4605      	mov	r5, r0
 8006b8a:	6818      	ldr	r0, [r3, #0]
 8006b8c:	460c      	mov	r4, r1
 8006b8e:	b118      	cbz	r0, 8006b98 <__swsetup_r+0x14>
 8006b90:	6a03      	ldr	r3, [r0, #32]
 8006b92:	b90b      	cbnz	r3, 8006b98 <__swsetup_r+0x14>
 8006b94:	f7fe f94e 	bl	8004e34 <__sinit>
 8006b98:	89a3      	ldrh	r3, [r4, #12]
 8006b9a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006b9e:	0718      	lsls	r0, r3, #28
 8006ba0:	d422      	bmi.n	8006be8 <__swsetup_r+0x64>
 8006ba2:	06d9      	lsls	r1, r3, #27
 8006ba4:	d407      	bmi.n	8006bb6 <__swsetup_r+0x32>
 8006ba6:	2309      	movs	r3, #9
 8006ba8:	602b      	str	r3, [r5, #0]
 8006baa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006bae:	81a3      	strh	r3, [r4, #12]
 8006bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8006bb4:	e034      	b.n	8006c20 <__swsetup_r+0x9c>
 8006bb6:	0758      	lsls	r0, r3, #29
 8006bb8:	d512      	bpl.n	8006be0 <__swsetup_r+0x5c>
 8006bba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006bbc:	b141      	cbz	r1, 8006bd0 <__swsetup_r+0x4c>
 8006bbe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006bc2:	4299      	cmp	r1, r3
 8006bc4:	d002      	beq.n	8006bcc <__swsetup_r+0x48>
 8006bc6:	4628      	mov	r0, r5
 8006bc8:	f7ff f8b4 	bl	8005d34 <_free_r>
 8006bcc:	2300      	movs	r3, #0
 8006bce:	6363      	str	r3, [r4, #52]	; 0x34
 8006bd0:	89a3      	ldrh	r3, [r4, #12]
 8006bd2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006bd6:	81a3      	strh	r3, [r4, #12]
 8006bd8:	2300      	movs	r3, #0
 8006bda:	6063      	str	r3, [r4, #4]
 8006bdc:	6923      	ldr	r3, [r4, #16]
 8006bde:	6023      	str	r3, [r4, #0]
 8006be0:	89a3      	ldrh	r3, [r4, #12]
 8006be2:	f043 0308 	orr.w	r3, r3, #8
 8006be6:	81a3      	strh	r3, [r4, #12]
 8006be8:	6923      	ldr	r3, [r4, #16]
 8006bea:	b94b      	cbnz	r3, 8006c00 <__swsetup_r+0x7c>
 8006bec:	89a3      	ldrh	r3, [r4, #12]
 8006bee:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006bf2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bf6:	d003      	beq.n	8006c00 <__swsetup_r+0x7c>
 8006bf8:	4621      	mov	r1, r4
 8006bfa:	4628      	mov	r0, r5
 8006bfc:	f000 f884 	bl	8006d08 <__smakebuf_r>
 8006c00:	89a0      	ldrh	r0, [r4, #12]
 8006c02:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c06:	f010 0301 	ands.w	r3, r0, #1
 8006c0a:	d00a      	beq.n	8006c22 <__swsetup_r+0x9e>
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	60a3      	str	r3, [r4, #8]
 8006c10:	6963      	ldr	r3, [r4, #20]
 8006c12:	425b      	negs	r3, r3
 8006c14:	61a3      	str	r3, [r4, #24]
 8006c16:	6923      	ldr	r3, [r4, #16]
 8006c18:	b943      	cbnz	r3, 8006c2c <__swsetup_r+0xa8>
 8006c1a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006c1e:	d1c4      	bne.n	8006baa <__swsetup_r+0x26>
 8006c20:	bd38      	pop	{r3, r4, r5, pc}
 8006c22:	0781      	lsls	r1, r0, #30
 8006c24:	bf58      	it	pl
 8006c26:	6963      	ldrpl	r3, [r4, #20]
 8006c28:	60a3      	str	r3, [r4, #8]
 8006c2a:	e7f4      	b.n	8006c16 <__swsetup_r+0x92>
 8006c2c:	2000      	movs	r0, #0
 8006c2e:	e7f7      	b.n	8006c20 <__swsetup_r+0x9c>
 8006c30:	2000006c 	.word	0x2000006c

08006c34 <_raise_r>:
 8006c34:	291f      	cmp	r1, #31
 8006c36:	b538      	push	{r3, r4, r5, lr}
 8006c38:	4604      	mov	r4, r0
 8006c3a:	460d      	mov	r5, r1
 8006c3c:	d904      	bls.n	8006c48 <_raise_r+0x14>
 8006c3e:	2316      	movs	r3, #22
 8006c40:	6003      	str	r3, [r0, #0]
 8006c42:	f04f 30ff 	mov.w	r0, #4294967295
 8006c46:	bd38      	pop	{r3, r4, r5, pc}
 8006c48:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006c4a:	b112      	cbz	r2, 8006c52 <_raise_r+0x1e>
 8006c4c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006c50:	b94b      	cbnz	r3, 8006c66 <_raise_r+0x32>
 8006c52:	4620      	mov	r0, r4
 8006c54:	f000 f830 	bl	8006cb8 <_getpid_r>
 8006c58:	462a      	mov	r2, r5
 8006c5a:	4601      	mov	r1, r0
 8006c5c:	4620      	mov	r0, r4
 8006c5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c62:	f000 b817 	b.w	8006c94 <_kill_r>
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d00a      	beq.n	8006c80 <_raise_r+0x4c>
 8006c6a:	1c59      	adds	r1, r3, #1
 8006c6c:	d103      	bne.n	8006c76 <_raise_r+0x42>
 8006c6e:	2316      	movs	r3, #22
 8006c70:	6003      	str	r3, [r0, #0]
 8006c72:	2001      	movs	r0, #1
 8006c74:	e7e7      	b.n	8006c46 <_raise_r+0x12>
 8006c76:	2400      	movs	r4, #0
 8006c78:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006c7c:	4628      	mov	r0, r5
 8006c7e:	4798      	blx	r3
 8006c80:	2000      	movs	r0, #0
 8006c82:	e7e0      	b.n	8006c46 <_raise_r+0x12>

08006c84 <raise>:
 8006c84:	4b02      	ldr	r3, [pc, #8]	; (8006c90 <raise+0xc>)
 8006c86:	4601      	mov	r1, r0
 8006c88:	6818      	ldr	r0, [r3, #0]
 8006c8a:	f7ff bfd3 	b.w	8006c34 <_raise_r>
 8006c8e:	bf00      	nop
 8006c90:	2000006c 	.word	0x2000006c

08006c94 <_kill_r>:
 8006c94:	b538      	push	{r3, r4, r5, lr}
 8006c96:	4d07      	ldr	r5, [pc, #28]	; (8006cb4 <_kill_r+0x20>)
 8006c98:	2300      	movs	r3, #0
 8006c9a:	4604      	mov	r4, r0
 8006c9c:	4608      	mov	r0, r1
 8006c9e:	4611      	mov	r1, r2
 8006ca0:	602b      	str	r3, [r5, #0]
 8006ca2:	f7fa fa59 	bl	8001158 <_kill>
 8006ca6:	1c43      	adds	r3, r0, #1
 8006ca8:	d102      	bne.n	8006cb0 <_kill_r+0x1c>
 8006caa:	682b      	ldr	r3, [r5, #0]
 8006cac:	b103      	cbz	r3, 8006cb0 <_kill_r+0x1c>
 8006cae:	6023      	str	r3, [r4, #0]
 8006cb0:	bd38      	pop	{r3, r4, r5, pc}
 8006cb2:	bf00      	nop
 8006cb4:	200040e0 	.word	0x200040e0

08006cb8 <_getpid_r>:
 8006cb8:	f7fa ba46 	b.w	8001148 <_getpid>

08006cbc <__swhatbuf_r>:
 8006cbc:	b570      	push	{r4, r5, r6, lr}
 8006cbe:	460c      	mov	r4, r1
 8006cc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cc4:	2900      	cmp	r1, #0
 8006cc6:	b096      	sub	sp, #88	; 0x58
 8006cc8:	4615      	mov	r5, r2
 8006cca:	461e      	mov	r6, r3
 8006ccc:	da0d      	bge.n	8006cea <__swhatbuf_r+0x2e>
 8006cce:	89a3      	ldrh	r3, [r4, #12]
 8006cd0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006cd4:	f04f 0100 	mov.w	r1, #0
 8006cd8:	bf0c      	ite	eq
 8006cda:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006cde:	2340      	movne	r3, #64	; 0x40
 8006ce0:	2000      	movs	r0, #0
 8006ce2:	6031      	str	r1, [r6, #0]
 8006ce4:	602b      	str	r3, [r5, #0]
 8006ce6:	b016      	add	sp, #88	; 0x58
 8006ce8:	bd70      	pop	{r4, r5, r6, pc}
 8006cea:	466a      	mov	r2, sp
 8006cec:	f000 f848 	bl	8006d80 <_fstat_r>
 8006cf0:	2800      	cmp	r0, #0
 8006cf2:	dbec      	blt.n	8006cce <__swhatbuf_r+0x12>
 8006cf4:	9901      	ldr	r1, [sp, #4]
 8006cf6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006cfa:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006cfe:	4259      	negs	r1, r3
 8006d00:	4159      	adcs	r1, r3
 8006d02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d06:	e7eb      	b.n	8006ce0 <__swhatbuf_r+0x24>

08006d08 <__smakebuf_r>:
 8006d08:	898b      	ldrh	r3, [r1, #12]
 8006d0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006d0c:	079d      	lsls	r5, r3, #30
 8006d0e:	4606      	mov	r6, r0
 8006d10:	460c      	mov	r4, r1
 8006d12:	d507      	bpl.n	8006d24 <__smakebuf_r+0x1c>
 8006d14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006d18:	6023      	str	r3, [r4, #0]
 8006d1a:	6123      	str	r3, [r4, #16]
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	6163      	str	r3, [r4, #20]
 8006d20:	b002      	add	sp, #8
 8006d22:	bd70      	pop	{r4, r5, r6, pc}
 8006d24:	ab01      	add	r3, sp, #4
 8006d26:	466a      	mov	r2, sp
 8006d28:	f7ff ffc8 	bl	8006cbc <__swhatbuf_r>
 8006d2c:	9900      	ldr	r1, [sp, #0]
 8006d2e:	4605      	mov	r5, r0
 8006d30:	4630      	mov	r0, r6
 8006d32:	f7ff f873 	bl	8005e1c <_malloc_r>
 8006d36:	b948      	cbnz	r0, 8006d4c <__smakebuf_r+0x44>
 8006d38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d3c:	059a      	lsls	r2, r3, #22
 8006d3e:	d4ef      	bmi.n	8006d20 <__smakebuf_r+0x18>
 8006d40:	f023 0303 	bic.w	r3, r3, #3
 8006d44:	f043 0302 	orr.w	r3, r3, #2
 8006d48:	81a3      	strh	r3, [r4, #12]
 8006d4a:	e7e3      	b.n	8006d14 <__smakebuf_r+0xc>
 8006d4c:	89a3      	ldrh	r3, [r4, #12]
 8006d4e:	6020      	str	r0, [r4, #0]
 8006d50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d54:	81a3      	strh	r3, [r4, #12]
 8006d56:	9b00      	ldr	r3, [sp, #0]
 8006d58:	6163      	str	r3, [r4, #20]
 8006d5a:	9b01      	ldr	r3, [sp, #4]
 8006d5c:	6120      	str	r0, [r4, #16]
 8006d5e:	b15b      	cbz	r3, 8006d78 <__smakebuf_r+0x70>
 8006d60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d64:	4630      	mov	r0, r6
 8006d66:	f000 f81d 	bl	8006da4 <_isatty_r>
 8006d6a:	b128      	cbz	r0, 8006d78 <__smakebuf_r+0x70>
 8006d6c:	89a3      	ldrh	r3, [r4, #12]
 8006d6e:	f023 0303 	bic.w	r3, r3, #3
 8006d72:	f043 0301 	orr.w	r3, r3, #1
 8006d76:	81a3      	strh	r3, [r4, #12]
 8006d78:	89a3      	ldrh	r3, [r4, #12]
 8006d7a:	431d      	orrs	r5, r3
 8006d7c:	81a5      	strh	r5, [r4, #12]
 8006d7e:	e7cf      	b.n	8006d20 <__smakebuf_r+0x18>

08006d80 <_fstat_r>:
 8006d80:	b538      	push	{r3, r4, r5, lr}
 8006d82:	4d07      	ldr	r5, [pc, #28]	; (8006da0 <_fstat_r+0x20>)
 8006d84:	2300      	movs	r3, #0
 8006d86:	4604      	mov	r4, r0
 8006d88:	4608      	mov	r0, r1
 8006d8a:	4611      	mov	r1, r2
 8006d8c:	602b      	str	r3, [r5, #0]
 8006d8e:	f7fa fa42 	bl	8001216 <_fstat>
 8006d92:	1c43      	adds	r3, r0, #1
 8006d94:	d102      	bne.n	8006d9c <_fstat_r+0x1c>
 8006d96:	682b      	ldr	r3, [r5, #0]
 8006d98:	b103      	cbz	r3, 8006d9c <_fstat_r+0x1c>
 8006d9a:	6023      	str	r3, [r4, #0]
 8006d9c:	bd38      	pop	{r3, r4, r5, pc}
 8006d9e:	bf00      	nop
 8006da0:	200040e0 	.word	0x200040e0

08006da4 <_isatty_r>:
 8006da4:	b538      	push	{r3, r4, r5, lr}
 8006da6:	4d06      	ldr	r5, [pc, #24]	; (8006dc0 <_isatty_r+0x1c>)
 8006da8:	2300      	movs	r3, #0
 8006daa:	4604      	mov	r4, r0
 8006dac:	4608      	mov	r0, r1
 8006dae:	602b      	str	r3, [r5, #0]
 8006db0:	f7fa fa41 	bl	8001236 <_isatty>
 8006db4:	1c43      	adds	r3, r0, #1
 8006db6:	d102      	bne.n	8006dbe <_isatty_r+0x1a>
 8006db8:	682b      	ldr	r3, [r5, #0]
 8006dba:	b103      	cbz	r3, 8006dbe <_isatty_r+0x1a>
 8006dbc:	6023      	str	r3, [r4, #0]
 8006dbe:	bd38      	pop	{r3, r4, r5, pc}
 8006dc0:	200040e0 	.word	0x200040e0

08006dc4 <_init>:
 8006dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dc6:	bf00      	nop
 8006dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dca:	bc08      	pop	{r3}
 8006dcc:	469e      	mov	lr, r3
 8006dce:	4770      	bx	lr

08006dd0 <_fini>:
 8006dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dd2:	bf00      	nop
 8006dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dd6:	bc08      	pop	{r3}
 8006dd8:	469e      	mov	lr, r3
 8006dda:	4770      	bx	lr
